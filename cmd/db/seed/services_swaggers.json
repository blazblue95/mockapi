[{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebac"
  },
  "swaggerSpec": {
    "openapi": "3.0.1",
    "info": {
      "description": "Notification Service documentation.",
      "contact": {
        "name": "API Support",
        "email": "circles-notification@circles.asia"
      },
      "version": "v2",
      "title": "Notification Service API"
    },
    "servers": [
      {
        "url": "//sg-notify.circles.asia/"
      }
    ],
    "tags": null,
    "paths": {
      "/health": {
        "get": {
          "responses": {
            "200": {
              "content": {}
            },
            "502": {
              "description": "Bad Gateway",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Health"
          ],
          "summary": "Check health of notification service",
          "description": "Check health of notification service"
        }
      },
      "/api/v1/{tenant}/{country}/notification": {
        "post": {
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "NotificationRequest",
          "tags": [
            "AcceptNotification"
          ],
          "summary": "Send notification to user",
          "description": "Send notification to user",
          "parameters": [
            {
              "in": "header",
              "description": "team key authorization header",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "teamKey"
            },
            {
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path"
            },
            {
              "description": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path"
            }
          ],
          "requestBody": {
            "description": "Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.NotificationRequest"
                }
              }
            },
            "required": true
          }
        }
      },
      "/api/v1/{tenant}/notification/admin/logs": {
        "get": {
          "tags": [
            "GetNotificationLogs"
          ],
          "summary": "Get logs of notifications sent by various filters",
          "description": "Get logs of notifications sent by various filters",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true
            },
            {
              "description": "sSearchStr",
              "schema": {
                "type": "string"
              },
              "name": "sSearchStr",
              "in": "query"
            },
            {
              "name": "sSearchType",
              "in": "query",
              "description": "sSearchType",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "boolean"
              },
              "name": "bRegex",
              "in": "query",
              "description": "bRegex"
            },
            {
              "name": "iPeriod",
              "in": "query",
              "description": "iPeriod",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "isortCol",
              "schema": {
                "type": "string"
              },
              "name": "isortCol",
              "in": "query"
            },
            {
              "name": "isortDir",
              "in": "query",
              "description": "isortDir",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "description": "idisplayStart",
              "schema": {
                "type": "string"
              },
              "name": "idisplayStart"
            },
            {
              "name": "idisplayLength",
              "in": "query",
              "description": "idisplayLength",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notification/history/push": {
        "put": {
          "summary": "Set the status of push notifications to read",
          "description": "Set the status of push notifications to read. Identifier is always userId.",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "User-Id",
              "in": "header",
              "description": "user_id as a header"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "version",
              "in": "path",
              "description": "version",
              "required": true
            },
            {
              "description": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path"
            },
            {
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path"
            },
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "SetReadStatusV2"
          ]
        }
      },
      "/api/v1/{tenant}/notification/{identifier}/history/push": {
        "put": {
          "parameters": [
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "identifier",
              "in": "path",
              "description": "identifier"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "SetReadStatus"
          ],
          "summary": "Set the status of push notifications to read",
          "description": "Set the status of push notifications to read. Identifier can be either email/userId/mobileNo."
        }
      },
      "/api/v1/{tenant}/notification/{event_id}/event/history": {
        "get": {
          "tags": [
            "GetEventHistory"
          ],
          "summary": "Get the history sms, email, push, internal for a particular event id",
          "description": "Get the history sms, email, push, internal for a particular event id",
          "parameters": [
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "event_id",
              "in": "path",
              "description": "event_id"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.EventHistoryResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notifications/activities": {
        "patch": {
          "summary": "Update an activity",
          "description": "Update a  Notification activity.",
          "parameters": [
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "UpdateActivity"
          ]
        },
        "get": {
          "tags": [
            "GetAllActivityNames"
          ],
          "summary": "Get all activity names",
          "description": "Get All Notification activity names in the system.",
          "parameters": [
            {
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "summary": "Create an activity",
          "description": "Create a  Notification activity.",
          "parameters": [
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "CreateActivity"
          ]
        }
      },
      "/api/v1/{country}/en/{tenant}/notifications/metadata": {
        "get": {
          "tags": [
            "getMetadata"
          ],
          "summary": "get metadata for team",
          "description": "get metadata for team",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "teamKey",
              "in": "query",
              "description": "team key query param ?search=teamKey=={key}",
              "required": true
            },
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "description": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.ActivityMetadataResp"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notifications/activities/{activity_name}/assets": {
        "post": {
          "description": "Upload an asset to an activity",
          "parameters": [
            {
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "UploadAsset"
          ],
          "summary": "Upload an asset to an activity"
        },
        "delete": {
          "description": "Delete an asset of an activity",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant"
            }
          ],
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "DeleteAsset"
          ],
          "summary": "Delete an asset of an activity"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notifications/activities/{activity_name}": {
        "get": {
          "tags": [
            "GetActivity"
          ],
          "summary": "Get activity details",
          "description": "Get All the details of the Notification activity.",
          "parameters": [
            {
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "DeleteActivity"
          ],
          "summary": "Delete an activity",
          "description": "Delete a Notification activity.",
          "parameters": [
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notification/history": {
        "get": {
          "tags": [
            "GetHistoryLogsV2"
          ],
          "summary": "Get history logs of notifications version 2",
          "description": "Get History logs by various filters. Identifier is always userId.",
          "parameters": [
            {
              "in": "header",
              "description": "user_id as a header",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "User-Id"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "version",
              "in": "path",
              "description": "version",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path",
              "description": "country",
              "required": true
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true
            },
            {
              "name": "push",
              "in": "query",
              "description": "push",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "description": "email",
              "schema": {
                "type": "string"
              },
              "name": "email"
            },
            {
              "name": "sms",
              "in": "query",
              "description": "sms",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "reset_timestamp",
              "in": "query",
              "description": "reset_timestamp",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "iPeriod",
              "in": "query",
              "description": "iPeriod",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "isortCol",
              "in": "query",
              "description": "isortCol",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "isortDir",
              "in": "query",
              "description": "isortDir",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "description": "idisplayStart",
              "schema": {
                "type": "string"
              },
              "name": "idisplayStart"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "idisplayLength",
              "in": "query",
              "description": "idisplayLength"
            },
            {
              "in": "query",
              "description": "hideBackgroundNotifications",
              "schema": {
                "type": "boolean"
              },
              "name": "hideBackgroundNotifications"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/{country}/en/{tenant}/notification": {
        "post": {
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "NotificationRequest",
          "tags": [
            "AcceptNotification"
          ],
          "summary": "Send notification to user",
          "description": "Send notification to user",
          "parameters": [
            {
              "name": "teamKey",
              "in": "header",
              "description": "team key authorization header",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant"
            },
            {
              "name": "country",
              "in": "path",
              "description": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.NotificationRequest"
                }
              }
            },
            "required": true
          }
        }
      },
      "/api/v1/{tenant}/notification/user/{identifier}/options": {
        "get": {
          "tags": [
            "GetUserOptions"
          ],
          "summary": "Get Notification options for user",
          "description": "Get Notification options for a user from Mongo. Identifier can be either email/userId/mobileNo.",
          "parameters": [
            {
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path"
            },
            {
              "name": "identifier",
              "in": "path",
              "description": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "PostUserOptions"
          ],
          "summary": "Send notification options to the service",
          "description": "Send notification options to the service and store in Mongo DB. Identifier can be either email/userId/mobileNo.",
          "parameters": [
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "identifier",
              "in": "path",
              "description": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UserOptionsRequest"
                }
              }
            },
            "required": true,
            "description": "Payload"
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "UserOptionsRequest"
        }
      },
      "/api/v1/{tenant}/notification/{identifier}/history": {
        "get": {
          "tags": [
            "GetHistoryLogs"
          ],
          "summary": "Get history logs of notifications",
          "description": "Get History logs by various filters. Identifier can be either email/userId/mobileNo.",
          "parameters": [
            {
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant"
            },
            {
              "name": "identifier",
              "in": "path",
              "description": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "push",
              "in": "query",
              "description": "push",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "email",
              "schema": {
                "type": "string"
              },
              "name": "email",
              "in": "query"
            },
            {
              "name": "sms",
              "in": "query",
              "description": "sms",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "reset_timestamp",
              "in": "query",
              "description": "reset_timestamp"
            },
            {
              "description": "iPeriod",
              "schema": {
                "type": "string"
              },
              "name": "iPeriod",
              "in": "query"
            },
            {
              "description": "isortCol",
              "schema": {
                "type": "string"
              },
              "name": "isortCol",
              "in": "query"
            },
            {
              "in": "query",
              "description": "isortDir",
              "schema": {
                "type": "string"
              },
              "name": "isortDir"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "idisplayStart",
              "in": "query",
              "description": "idisplayStart"
            },
            {
              "name": "idisplayLength",
              "in": "query",
              "description": "idisplayLength",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notifications/webhook": {
        "post": {
          "summary": "Accept webhook notifications from CleverTap",
          "description": "Accept webhook notifications from CleverTap",
          "parameters": [
            {
              "description": "team key authorization header",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "teamKey",
              "in": "header"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "version",
              "in": "path",
              "description": "version",
              "required": true
            },
            {
              "description": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant"
            }
          ],
          "requestBody": {
            "description": "Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.WebHookNotificationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "WebHookNotificationRequest",
          "tags": [
            "AcceptWebHookNotification"
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "response.ErrorResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "status bad request"
            },
            "title": {
              "type": "string",
              "example": "400"
            },
            "code": {
              "type": "integer",
              "example": 400
            }
          }
        },
        "request.NotificationRequest": {
          "type": "object",
          "properties": {
            "sms_sender_number": {
              "type": "string"
            },
            "activity_id": {
              "type": "string"
            },
            "attachments": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/request.Attachment"
              }
            },
            "identifier_value": {
              "type": "string"
            },
            "payload": {
              "properties": {},
              "type": "object"
            },
            "identifier_key": {
              "type": "string"
            },
            "locale": {
              "type": "string"
            },
            "priority": {
              "type": "string"
            },
            "additional_identifiers": {
              "swagger_ref": "#/components/schemas/request.AdditionalIdentifier"
            },
            "client_id": {
              "type": "string"
            }
          }
        },
        "response.Transport": {
          "type": "object",
          "properties": {
            "required": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "request.Profile": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            },
            "identity": {
              "type": "string"
            },
            "key_values": {
              "swagger_ref": "#/components/schemas/request.KeyValue"
            }
          }
        },
        "request.WebHookNotificationRequest": {
          "properties": {
            "profiles": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/request.Profile"
              }
            }
          },
          "type": "object"
        },
        "request.KeyValue": {
          "type": "object",
          "properties": {
            "activity": {
              "type": "string"
            }
          }
        },
        "response.PayloadMetadata": {
          "type": "object",
          "properties": {
            "minValue": {
              "type": "number"
            },
            "precision": {
              "type": "integer"
            },
            "regex": {
              "type": "string"
            },
            "datatype": {
              "type": "string"
            },
            "key": {
              "type": "string"
            },
            "maxLength": {
              "type": "integer"
            },
            "maxValue": {
              "type": "number"
            },
            "minLength": {
              "type": "integer"
            }
          }
        },
        "response.StdResponse": {
          "type": "object",
          "properties": {
            "debug": {
              "type": "object",
              "properties": {}
            },
            "failure": {
              "swagger_ref": "#/components/schemas/response.ErrorResponse"
            },
            "result": {
              "type": "object",
              "properties": {}
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "request.Attachment": {
          "type": "object",
          "properties": {
            "file_location": {
              "type": "string"
            },
            "file_name": {
              "type": "string"
            },
            "file_path": {
              "type": "string"
            }
          }
        },
        "request.UserOptionsRequest": {
          "type": "object",
          "properties": {
            "options": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "response.ActivityMetadataResp": {
          "type": "object",
          "properties": {
            "transports": {
              "items": {
                "swagger_ref": "#/components/schemas/response.Transport"
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "metadata": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/response.PayloadMetadata"
              }
            }
          }
        },
        "model.ErrorResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "example": 400
            },
            "message": {
              "type": "string",
              "example": "status bad request"
            },
            "object": {
              "type": "string",
              "example": "error"
            }
          }
        },
        "request.AdditionalIdentifier": {
          "properties": {
            "email": {
              "type": "string"
            },
            "mobile": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.PushMessage": {
          "properties": {
            "text": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "content": {
              "type": "object",
              "properties": {}
            },
            "image_preview": {
              "type": "string"
            },
            "link": {
              "type": "string"
            },
            "media-url": {
              "type": "string"
            },
            "mime_type": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.EventHistoryResponse": {
          "type": "object",
          "properties": {
            "internal_body": {
              "type": "string"
            },
            "internal_email": {
              "type": "string"
            },
            "internal_subject": {
              "type": "string"
            },
            "push_message": {
              "swagger_ref": "#/components/schemas/model.PushMessage"
            },
            "sms_message": {
              "type": "string"
            },
            "email_body": {
              "type": "string"
            },
            "email_subject": {
              "type": "string"
            },
            "event_id": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebab"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/api/v1/{tenant}/notification/user/{identifier}/options",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v1/{tenant}/notification/user/{identifier}/options",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notification/history/push",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v1/{country}/en/{tenant}/notifications/metadata",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v1/{tenant}/notification/{identifier}/history",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v1/{tenant}/notification/{identifier}/history/push",
      "method": "PATCH"
    },
    {
      "endptRegex": "/health",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v1/{tenant}/notification/admin/logs",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v1/{tenant}/notification/{event_id}/event/history",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v1/{tenant}/{country}/notification",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/activities",
      "method": "PATCH"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/activities",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/activities",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/activities/{activity_name}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/activities/{activity_name}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/webhook",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v1/{country}/en/{tenant}/notification",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notification/history",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/activities/{activity_name}/assets",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notifications/activities/{activity_name}/assets",
      "method": "DELETE"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357746"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357746"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebae"
  },
  "swaggerSpec": {
    "servers": [
      {
        "url": "http://sgqwallet.circles.asia/v1/{tenant}/wallet"
      }
    ],
    "tags": null,
    "components": {
      "schemas": {
        "validator.CommitTransactionRequest": {
          "properties": {
            "currency_amt": {
              "type": "integer"
            },
            "txn_ref_id": {
              "type": "string"
            },
            "txn_remark": {
              "type": "string"
            },
            "txn_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "validator.GetLedgerResponse": {
          "properties": {
            "balance": {
              "swagger_ref": "#/components/schemas/validator.WalletTypeBalances"
            },
            "customer_id": {
              "type": "string"
            },
            "wallet_txns": {
              "items": {
                "swagger_ref": "#/components/schemas/validator.TransactionsResponse"
              },
              "type": "array"
            },
            "wallet_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "validator.InitWalletResponse": {
          "properties": {
            "customer_id": {
              "type": "string"
            },
            "wallet_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "validator.TransactionsResponse": {
          "properties": {
            "txn_ts": {
              "type": "integer"
            },
            "txn_type": {
              "type": "string"
            },
            "txn_amount": {
              "type": "integer"
            },
            "txn_ref_id": {
              "type": "string"
            },
            "txn_remark": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "validator.ErrorResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "object": {
              "type": "string"
            },
            "code": {
              "type": "integer"
            }
          }
        },
        "validator.WalletInitRequest": {
          "properties": {
            "wallet_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "validator.WalletTypeBalances": {
          "type": "object",
          "properties": {
            "wallet_type": {
              "type": "string"
            },
            "available_bal": {
              "type": "integer"
            },
            "currency_symbol": {
              "type": "string"
            },
            "expired_bal": {
              "type": "integer"
            },
            "redeemable_bal": {
              "type": "integer"
            }
          }
        },
        "validator.ExistResponse": {
          "properties": {
            "exist": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "validator.InitTransactionResponse": {
          "properties": {
            "customer_id": {
              "type": "string"
            },
            "txn_ref_id": {
              "type": "string"
            },
            "valid_till": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "validator.CommitTransactionResponse": {
          "properties": {
            "txn_ref_id": {
              "type": "string"
            },
            "txn_status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "validator.GetBalancesResponse": {
          "properties": {
            "wallets": {
              "items": {
                "swagger_ref": "#/components/schemas/validator.WalletTypeBalances"
              },
              "type": "array"
            },
            "cust_id": {
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "license": {
        "name": "Copyright (C) Liberty Wireless Pte Ltd - All Rights Reserved"
      },
      "title": "Circle Wallet Service API",
      "version": "1.0",
      "contact": {
        "email": "brw@circles.asia",
        "name": "API Support"
      },
      "description": "Circle Wallet Service API documentation."
    },
    "openapi": "3.0.1",
    "paths": {
      "/{CustomerId}/ledger/{WalletType}": {
        "get": {
          "description": "Get balances for all or given wallet type of customer",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Customer Id",
              "in": "path",
              "name": "CustomerId",
              "required": true
            },
            {
              "description": "Tenant",
              "in": "path",
              "name": "Tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "WalletType",
              "in": "path",
              "name": "WalletType"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.GetLedgerResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Unauthorized"
            }
          },
          "summary": "Get ledger for all or given wallet type of customer"
        }
      },
      "/{CustomerId}/transaction/initiate": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.InitTransactionResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Initiate transaction for the giver customer id",
          "description": "Initiate transaction for the giver customer id",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Customer Id",
              "in": "path",
              "name": "CustomerId",
              "required": true
            },
            {
              "in": "path",
              "name": "Tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant"
            }
          ]
        }
      },
      "/{CustomerId}/{WalletType}/exist": {
        "get": {
          "parameters": [
            {
              "description": "Customer Id",
              "in": "path",
              "name": "CustomerId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "Tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant"
            },
            {
              "description": "WalletType",
              "in": "path",
              "name": "WalletType",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ExistResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Check if wallet exist for given customer id",
          "description": "Check if wallet exist for given customer id"
        }
      },
      "/{CustomerId}/{WalletType}/transaction/commit": {
        "post": {
          "x-codegen-request-body-name": "CommitTransactionRequest",
          "description": "Commit a Transaction Using Txn Ref Id",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Customer Id",
              "in": "path",
              "name": "CustomerId",
              "required": true
            },
            {
              "description": "Tenant",
              "in": "path",
              "name": "Tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "WalletType",
              "in": "path",
              "name": "WalletType",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/validator.CommitTransactionRequest"
                }
              }
            },
            "description": "Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.CommitTransactionResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Commit a Transaction"
        }
      },
      "/{CustomerId}/bal": {
        "get": {
          "parameters": [
            {
              "description": "Customer Id",
              "in": "path",
              "name": "CustomerId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path",
              "name": "Tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.GetBalancesResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Unauthorized"
            }
          },
          "summary": "Get balances for all or given wallet type of customer",
          "description": "Get balances for all or given wallet type of customer"
        }
      },
      "/{CustomerId}/init": {
        "put": {
          "description": "Initialize a wallet of given wallet type",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Customer Id",
              "in": "path",
              "name": "CustomerId",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path",
              "name": "Tenant"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/validator.WalletInitRequest"
                }
              }
            },
            "description": "Payload"
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.InitWalletResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "409": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/validator.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Initialize a wallet of given wallet type",
          "x-codegen-request-body-name": "WalletInitRequest"
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebad"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/{CustomerId}/transaction/initiate",
      "method": "GET"
    },
    {
      "endptRegex": "/{CustomerId}/{WalletType}/exist",
      "method": "GET"
    },
    {
      "endptRegex": "/{CustomerId}/{WalletType}/transaction/commit",
      "method": "POST"
    },
    {
      "endptRegex": "/{CustomerId}/bal",
      "method": "GET"
    },
    {
      "endptRegex": "/{CustomerId}/init",
      "method": "PATCH"
    },
    {
      "endptRegex": "/{CustomerId}/ledger/{WalletType}",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357836"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357836"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebb0"
  },
  "swaggerSpec": {
    "components": {
      "schemas": {
        "model.SearchSubCategoryResponseModel": {
          "properties": {
            "category_id": {
              "type": "string"
            },
            "category_name": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.Trigger": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "triggerType": {
              "type": "string"
            }
          }
        },
        "model.CreateLimitRequestModel": {
          "properties": {
            "country": {
              "type": "string"
            },
            "monthly_limit": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "per_waiver_limit": {
              "type": "number"
            },
            "type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.Button": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "actionType": {
              "type": "string"
            },
            "actionValue": {
              "type": "string"
            }
          }
        },
        "response.HttpResponseBody": {
          "properties": {
            "success": {
              "type": "boolean"
            },
            "debug": {
              "properties": {
                "requestId": {
                  "type": "string"
                },
                "responseTime": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "failure": {
              "properties": {
                "code": {
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                },
                "problems": {
                  "additionalProperties": {
                    "swagger_ref": "#/components/schemas/response.Problem"
                  },
                  "type": "object"
                },
                "title": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "result": {
              "properties": {
                "ackId": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "model.CreateSubCategoryResponseModel": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "subcategory": {
              "swagger_ref": "#/components/schemas/model.CreateSubCategoryRequestModel"
            }
          }
        },
        "queue.MNOMWHeader": {
          "type": "object",
          "properties": {
            "externalRefId": {
              "type": "string"
            },
            "roamingType": {
              "type": "string"
            },
            "serviceRoutingKey": {
              "type": "string"
            },
            "settingType": {
              "type": "string"
            },
            "correlationId": {
              "type": "string"
            },
            "operation": {
              "type": "string"
            },
            "requestId": {
              "type": "string"
            },
            "accountNumber": {
              "type": "string"
            },
            "ackRoutingKey": {
              "type": "string"
            },
            "srDate": {
              "type": "string"
            },
            "MSISDN": {
              "type": "string"
            }
          }
        },
        "request.PlanChangeEligibilityParams": {
          "properties": {
            "account_number": {
              "type": "string"
            },
            "destination_plan_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "queue.MHLRVASMaintenanceRequestMessage": {
          "type": "object",
          "properties": {
            "header": {
              "swagger_ref": "#/components/schemas/queue.MNOMWHeader"
            },
            "message": {
              "swagger_ref": "#/components/schemas/queue.MHLRVASMaintenanceRequestBody"
            }
          }
        },
        "model.CreateLevelRequestModel": {
          "properties": {
            "country": {
              "type": "string"
            },
            "limit_id": {
              "type": "string"
            },
            "max_waiver_amount": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "next_level": {
              "type": "string"
            },
            "waived_amount": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "request.SetRoamingOptionRequestModel": {
          "properties": {
            "sin": {
              "type": "string"
            },
            "iccid": {
              "type": "string"
            },
            "imsi": {
              "type": "string"
            },
            "override": {
              "type": "string"
            },
            "phoneNumber": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "productId": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.DropDownField": {
          "properties": {
            "id": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.CreateCountryApproverResponseModel": {
          "type": "object",
          "properties": {
            "country_approver": {
              "swagger_ref": "#/components/schemas/model.CreateCountryApproverRequestModel"
            },
            "id": {
              "type": "string"
            }
          }
        },
        "response.NotificationsLogsResult": {
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/mongo.NotificationLogResponseModel"
              }
            },
            "total": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "datastore.CustomerAccountRequestModel": {
          "properties": {
            "requestId": {
              "type": "string"
            },
            "requestPayload": {
              "swagger_ref": "#/components/schemas/bson.M"
            },
            "accountNumber": {
              "type": "string"
            },
            "attributeId": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "operationId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "updatedAt": {
              "type": "string"
            },
            "executeAt": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "datastore.AuditLogModel": {
          "properties": {
            "updatedAt": {
              "type": "string"
            },
            "actions": {
              "items": {
                "swagger_ref": "#/components/schemas/datastore.Action"
              },
              "type": "array"
            },
            "accountDetails": {
              "properties": {},
              "type": "object"
            },
            "createdAt": {
              "type": "string"
            },
            "destinationIdentifier": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "subStatus": {
              "type": "string"
            },
            "requestType": {
              "type": "string"
            },
            "requestId": {
              "type": "string"
            },
            "errorId": {
              "type": "string"
            },
            "sourceIdentifier": {
              "type": "string"
            },
            "msisdn": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "accountNumber": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.SearchCategoryResponseModel": {
          "type": "object",
          "properties": {
            "waived_amount": {
              "type": "number"
            },
            "country": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "limit_id": {
              "type": "string"
            },
            "monthly_limit": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "per_waiver_limit": {
              "type": "number"
            }
          }
        },
        "request.AccountStateChangeEligibilityParams": {
          "properties": {
            "accountNumber": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.Survey": {
          "properties": {
            "customerClass": {
              "type": "string"
            },
            "latestComponentId": {
              "type": "integer"
            },
            "notifyCustomerPercent": {
              "type": "integer"
            },
            "exit": {
              "swagger_ref": "#/components/schemas/response.Section"
            },
            "id": {
              "type": "string"
            },
            "sections": {
              "items": {
                "swagger_ref": "#/components/schemas/response.Section"
              },
              "type": "array"
            },
            "triggers": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/response.Trigger"
              }
            },
            "end": {
              "swagger_ref": "#/components/schemas/response.Section"
            },
            "required": {
              "type": "boolean"
            },
            "start": {
              "swagger_ref": "#/components/schemas/response.Section"
            }
          },
          "type": "object"
        },
        "response.Footer": {
          "properties": {
            "dismissButton": {
              "swagger_ref": "#/components/schemas/response.Button"
            },
            "text": {
              "type": "string"
            },
            "actionButton": {
              "swagger_ref": "#/components/schemas/response.Button"
            },
            "backButton": {
              "swagger_ref": "#/components/schemas/response.Button"
            },
            "buttons": {
              "items": {
                "swagger_ref": "#/components/schemas/response.Button"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "response.RequestAcknowledgementResponse": {
          "type": "object",
          "properties": {
            "publishId": {
              "type": "string"
            },
            "scheduleId": {
              "type": "string"
            },
            "traceId": {
              "type": "string"
            }
          }
        },
        "response.GetRoamingLogItemResponseModel": {
          "properties": {
            "params": {
              "swagger_ref": "#/components/schemas/queue.MHLRVASMaintenanceRequestMessage"
            },
            "requestId": {
              "type": "string"
            },
            "serviceInstanceNumber": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "trace": {
              "properties": {},
              "type": "object"
            },
            "ts": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            },
            "_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.Problem": {
          "properties": {
            "message": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "key": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.CreateCountryBudgetRequestModel": {
          "properties": {
            "country": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "monthly_limit": {
              "type": "number"
            },
            "waived_amount": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "request.DownloadProtectedFileModel": {
          "type": "object",
          "properties": {
            "password": {
              "type": "string"
            }
          }
        },
        "crespwriter.SwaggerDocErrorResponse": {
          "properties": {
            "success": {
              "example": false,
              "type": "boolean"
            },
            "result": {
              "swagger_ref": "#/components/schemas/crespwriter.ErrorDetails"
            }
          },
          "type": "object"
        },
        "response.ActiveSurvey": {
          "properties": {
            "survey": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "type": "object"
        },
        "response.AccountCreateResponse": {
          "properties": {
            "customerId": {
              "type": "string"
            },
            "isdCode": {
              "type": "string"
            },
            "msisdn": {
              "type": "string"
            },
            "parentId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "subStatus": {
              "type": "string"
            },
            "accountId": {
              "type": "string"
            },
            "bdom": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.CreateCategoryResponseModel": {
          "properties": {
            "category": {
              "swagger_ref": "#/components/schemas/model.CreateCategoryRequestModel"
            },
            "id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.CreateCategoryRequestModel": {
          "properties": {
            "country": {
              "type": "string"
            },
            "limit_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "waived_amount": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "request.Addon": {
          "properties": {
            "end_time": {
              "type": "string"
            },
            "product_id": {
              "type": "string"
            },
            "start_time": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.RequestLogs": {
          "properties": {
            "data": {
              "items": {
                "swagger_ref": "#/components/schemas/datastore.CustomerAccountRequestModel"
              },
              "type": "array"
            },
            "total": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.ErrorResponse": {
          "properties": {
            "code": {
              "example": 400,
              "type": "integer"
            },
            "message": {
              "example": "status bad request",
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.CreateWaiverRequestModel": {
          "properties": {
            "customer_status": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "total_value": {
              "type": "number"
            },
            "description": {
              "type": "string"
            },
            "created_agent_id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "notify_customer": {
              "type": "boolean"
            },
            "updated_agent_id": {
              "type": "string"
            },
            "category_id": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "billing_account_name": {
              "type": "string"
            },
            "end_date": {
              "type": "integer"
            },
            "ban": {
              "type": "string"
            },
            "start_date": {
              "type": "integer"
            },
            "email": {
              "type": "string"
            },
            "customer_number": {
              "type": "string"
            },
            "sub_category_id": {
              "type": "string"
            },
            "value": {
              "type": "number"
            },
            "sin": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.Header": {
          "properties": {
            "dismissButton": {
              "swagger_ref": "#/components/schemas/response.Button"
            },
            "text": {
              "type": "string"
            },
            "actionButton": {
              "swagger_ref": "#/components/schemas/response.Button"
            },
            "backButton": {
              "swagger_ref": "#/components/schemas/response.Button"
            },
            "buttons": {
              "items": {
                "swagger_ref": "#/components/schemas/response.Button"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "response.StaticField": {
          "properties": {
            "selected": {
              "type": "boolean"
            },
            "value": {
              "type": "string"
            },
            "actionTask": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "mediaUrls": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/response.MediaUrl"
              }
            },
            "onSelect": {
              "swagger_ref": "#/components/schemas/response.Question"
            }
          },
          "type": "object"
        },
        "model.CreateLevelResponseModel": {
          "properties": {
            "id": {
              "type": "string"
            },
            "level": {
              "swagger_ref": "#/components/schemas/model.CreateLevelRequestModel"
            }
          },
          "type": "object"
        },
        "model.CreateWaiverResponseModel": {
          "properties": {
            "id": {
              "type": "string"
            },
            "waiver": {
              "swagger_ref": "#/components/schemas/model.CreateWaiverRequestModel"
            }
          },
          "type": "object"
        },
        "model.GetLimitResponseModel": {
          "properties": {
            "type": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "monthly_limit": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "per_waiver_limit": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "response.GetRoamingLogResponseModel": {
          "properties": {
            "total_count": {
              "type": "integer"
            },
            "items": {
              "items": {
                "swagger_ref": "#/components/schemas/response.GetRoamingLogItemResponseModel"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "request.BillingAddressData": {
          "type": "object",
          "properties": {
            "street": {
              "type": "string"
            },
            "zip": {
              "type": "string"
            },
            "floor": {
              "type": "string"
            },
            "buildingNo": {
              "type": "string"
            },
            "district": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "buildingName": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "country": {
              "type": "string"
            }
          }
        },
        "request.SetSettingRequestModel": {
          "properties": {
            "account_number": {
              "type": "string"
            },
            "details": {
              "type": "object",
              "properties": {}
            },
            "msisdn": {
              "type": "string"
            },
            "override": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "setting": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "queue.MHLRVASMaintenanceRequestBody": {
          "properties": {
            "iccid": {
              "type": "string"
            },
            "serviceInstanceNumber": {
              "type": "string"
            },
            "IMSINo": {
              "type": "string"
            },
            "MSISDN": {
              "type": "string"
            },
            "action": {
              "type": "string"
            },
            "externalRefId": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.QuestionData": {
          "properties": {
            "textArea": {
              "swagger_ref": "#/components/schemas/response.TextFieldData"
            },
            "textBox": {
              "swagger_ref": "#/components/schemas/response.TextFieldData"
            },
            "checkbox": {
              "swagger_ref": "#/components/schemas/response.StaticFieldData"
            },
            "dropdown": {
              "swagger_ref": "#/components/schemas/response.DropdownData"
            },
            "radioGroup": {
              "swagger_ref": "#/components/schemas/response.StaticFieldData"
            },
            "range": {
              "swagger_ref": "#/components/schemas/response.RangeFieldData"
            }
          },
          "type": "object"
        },
        "bson.M": {
          "type": "object"
        },
        "model.CreateLimitResponseModel": {
          "properties": {
            "id": {
              "type": "string"
            },
            "limit": {
              "swagger_ref": "#/components/schemas/model.CreateLimitRequestModel"
            }
          },
          "type": "object"
        },
        "request.AccountStateChangeRequestParams": {
          "properties": {
            "accountNumber": {
              "type": "string"
            },
            "effective": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "statusType": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.NotificationLogsResponse": {
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/response.NotificationsLogsResult"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.CreateSubCategoryRequestModel": {
          "properties": {
            "name": {
              "type": "string"
            },
            "category_id": {
              "type": "string"
            },
            "country": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.AccountDetails": {
          "properties": {
            "accountId": {
              "type": "string"
            },
            "emailId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "bdom": {
              "type": "integer"
            },
            "msisdn": {
              "type": "string"
            },
            "planId": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "billingAddress": {
              "swagger_ref": "#/components/schemas/request.BillingAddressData"
            },
            "parentId": {
              "type": "string"
            },
            "isdCode": {
              "type": "string"
            },
            "imsi": {
              "type": "string"
            },
            "activatedAt": {
              "type": "string"
            },
            "customerId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "subStatus": {
              "type": "string"
            },
            "iccid": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.AccountDetailsResponse": {
          "properties": {
            "accountId": {
              "type": "string"
            },
            "activatedAt": {
              "type": "string"
            },
            "emailId": {
              "type": "string"
            },
            "iccid": {
              "type": "string"
            },
            "msisdn": {
              "type": "string"
            },
            "customerId": {
              "type": "string"
            },
            "bdom": {
              "type": "integer"
            },
            "subStatus": {
              "type": "string"
            },
            "isdCode": {
              "type": "string"
            },
            "imsi": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "parentId": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "planId": {
              "type": "string"
            },
            "billingAddress": {
              "swagger_ref": "#/components/schemas/request.BillingAddressData"
            },
            "createdAt": {
              "type": "string"
            },
            "linkedAccounts": {
              "items": {
                "swagger_ref": "#/components/schemas/response.AccountDetails"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "datastore.Action": {
          "properties": {
            "result": {
              "items": {
                "swagger_ref": "#/components/schemas/bson.M"
              },
              "type": "array"
            },
            "status": {
              "type": "string"
            },
            "taskId": {
              "type": "string"
            },
            "trigger": {
              "type": "string"
            },
            "error": {
              "properties": {},
              "type": "object"
            },
            "filters": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "meta": {
              "properties": {},
              "type": "object"
            },
            "priority": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.SearchLevelResponseModel": {
          "properties": {
            "id": {
              "type": "string"
            },
            "limit_id": {
              "type": "string"
            },
            "per_waiver_limit": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "next_level": {
              "type": "string"
            },
            "waived_amount": {
              "type": "number"
            },
            "max_waiver_amount": {
              "type": "number"
            },
            "next_level_name": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "monthly_limit": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "model.CreateAgentRequestModel": {
          "properties": {
            "email": {
              "type": "string"
            },
            "level_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "waived_amount": {
              "type": "number"
            },
            "country": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.UpdateWaiverResponseModel": {
          "properties": {
            "status": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.StdResponse": {
          "properties": {
            "debug": {
              "type": "object",
              "properties": {}
            },
            "failure": {
              "swagger_ref": "#/components/schemas/response.ErrorResponse"
            },
            "result": {
              "properties": {},
              "type": "object"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.HealthStatus": {
          "properties": {
            "environment": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "request.AccountCreateRequestParams": {
          "type": "object",
          "properties": {
            "isdCode": {
              "type": "string"
            },
            "msisdn": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "planId": {
              "type": "string"
            },
            "bdom": {
              "type": "integer"
            },
            "billingAddress": {
              "swagger_ref": "#/components/schemas/request.BillingAddressData"
            },
            "customerId": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "model.CreateCountryApproverRequestModel": {
          "properties": {
            "agent_id": {
              "type": "string"
            },
            "country": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.SearchWaiverResponseModel": {
          "properties": {
            "description": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "approval_level": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "customer_email": {
              "type": "string"
            },
            "waiver_type": {
              "type": "string"
            },
            "created_agent_email": {
              "type": "string"
            },
            "notify_customer": {
              "type": "boolean"
            },
            "updated_agent_email": {
              "type": "string"
            },
            "end_date": {
              "type": "integer"
            },
            "sub_category_id": {
              "type": "string"
            },
            "update_reason": {
              "type": "string"
            },
            "reference": {
              "type": "string"
            },
            "sin": {
              "type": "string"
            },
            "created_agent_id": {
              "type": "string"
            },
            "pending_reason": {
              "type": "string"
            },
            "category_name": {
              "type": "string"
            },
            "start_date": {
              "type": "integer"
            },
            "updated_agent_id": {
              "type": "string"
            },
            "total_value": {
              "type": "number"
            },
            "ban": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "billing_full_name": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "sub_category_name": {
              "type": "string"
            },
            "value": {
              "type": "number"
            },
            "customer_status": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "category_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "request.PlanChangeRequestParams": {
          "properties": {
            "source_plan_id": {
              "type": "string"
            },
            "account_details": {
              "properties": {},
              "type": "object"
            },
            "account_linking_enabled": {
              "type": "boolean"
            },
            "account_number": {
              "type": "string"
            },
            "addons": {
              "items": {
                "swagger_ref": "#/components/schemas/request.Addon"
              },
              "type": "array"
            },
            "destination_plan_id": {
              "type": "string"
            },
            "effective": {
              "type": "string"
            },
            "number": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.SearchCountryBudgetResponseModel": {
          "properties": {
            "waived_amount": {
              "type": "number"
            },
            "country": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "monthly_limit": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "response.FileManagementUploadResponseModel": {
          "properties": {
            "success": {
              "type": "boolean"
            },
            "result": {
              "properties": {
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "response.FileDownloadResponseModel": {
          "properties": {
            "result": {
              "properties": {
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "response.RangeFieldData": {
          "properties": {
            "default": {
              "type": "string"
            },
            "fieldsPlacement": {
              "type": "string"
            },
            "groupSize": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "maxRange": {
              "type": "integer"
            },
            "minRange": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "response.AuditLogs": {
          "properties": {
            "total": {
              "type": "integer"
            },
            "data": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/datastore.AuditLogModel"
              }
            }
          },
          "type": "object"
        },
        "crespwriter.ErrorDetails": {
          "type": "object",
          "properties": {
            "title": {
              "example": "Validation error!",
              "type": "string"
            },
            "code": {
              "example": 400001,
              "type": "integer"
            },
            "description": {
              "type": "string",
              "example": "Password should be 8 to 13 character long"
            },
            "message": {
              "example": "Invalid password",
              "type": "string"
            }
          }
        },
        "response.Question": {
          "properties": {
            "errorMsg": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "mediaUrls": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/response.MediaUrl"
              }
            },
            "required": {
              "type": "boolean"
            },
            "title": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "data": {
              "swagger_ref": "#/components/schemas/response.QuestionData"
            },
            "description": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "crespwriter.SuccessResponse": {
          "properties": {
            "result": {
              "properties": {},
              "type": "object"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "response.ErrorResponse": {
          "properties": {
            "title": {
              "example": "400",
              "type": "string"
            },
            "code": {
              "example": 400,
              "type": "integer"
            },
            "message": {
              "example": "status bad request",
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.SetRoamingOptionResponseModel": {
          "properties": {
            "remarks": {
              "type": "string"
            },
            "roamingOption": {
              "swagger_ref": "#/components/schemas/request.SetRoamingOptionRequestModel"
            },
            "status": {
              "description": "ExternalRefIds []ExternalRefModel           `json:\"externalRefIds\"`",
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.SearchCountryApproverResponseModel": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "level": {
              "type": "string"
            },
            "monthly_limit": {
              "type": "number"
            },
            "agent_id": {
              "type": "string"
            },
            "per_waiver_limit": {
              "type": "number"
            },
            "country": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "waived_amount": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          }
        },
        "response.TextFieldData": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "maxLength": {
              "type": "integer"
            },
            "minLength": {
              "type": "integer"
            },
            "regex": {
              "type": "string"
            },
            "default": {
              "type": "string"
            }
          }
        },
        "response.Section": {
          "properties": {
            "mediaUrls": {
              "items": {
                "swagger_ref": "#/components/schemas/response.MediaUrl"
              },
              "type": "array"
            },
            "type": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "errorMsg": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "footer": {
              "swagger_ref": "#/components/schemas/response.Footer"
            },
            "header": {
              "swagger_ref": "#/components/schemas/response.Header"
            },
            "id": {
              "type": "string"
            },
            "questions": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/response.Question"
              }
            }
          },
          "type": "object"
        },
        "model.UpdateWaiverRequestModel": {
          "properties": {
            "reason": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "mongo.NotificationLogResponseModel": {
          "properties": {
            "number": {
              "type": "string"
            },
            "nns_notification_id": {
              "type": "string"
            },
            "error": {
              "type": "string"
            },
            "host_name": {
              "type": "string"
            },
            "nns_activity": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "original_activity": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "nns_notification_payload": {
              "properties": {},
              "type": "object"
            },
            "status": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "brm_notification_payload": {
              "type": "object",
              "properties": {}
            },
            "correlation_id": {
              "type": "string"
            },
            "retry_count": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "request.InventoryChangeEligibilityParams": {
          "properties": {
            "accountNumber": {
              "type": "string"
            },
            "inventoryType": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.MediaUrl": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "request.InventoryChangeRequestParams": {
          "properties": {
            "inventoryType": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "accountNumber": {
              "type": "string"
            },
            "effective": {
              "type": "string"
            },
            "inventoryDetails": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "response.DropdownData": {
          "type": "object",
          "properties": {
            "fields": {
              "items": {
                "swagger_ref": "#/components/schemas/response.DropDownField"
              },
              "type": "array"
            },
            "fieldsPlacement": {
              "type": "string"
            },
            "groupSize": {
              "type": "integer"
            },
            "default": {
              "type": "string"
            }
          }
        },
        "response.StaticFieldData": {
          "properties": {
            "fields": {
              "items": {
                "swagger_ref": "#/components/schemas/response.StaticField"
              },
              "type": "array"
            },
            "fieldsPlacement": {
              "type": "string"
            },
            "groupSize": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "response.RequestValidityResponse": {
          "properties": {
            "metadata": {
              "properties": {},
              "type": "object"
            },
            "reason": {
              "example": "user already exist with account LW08888832",
              "type": "string"
            },
            "valid": {
              "example": false,
              "type": "boolean"
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "contact": {
        "name": "API Support",
        "email": "circles-telco-dev@circles.asia"
      },
      "description": "",
      "title": "Telco",
      "version": "v2"
    },
    "openapi": "3.0.1",
    "paths": {
      "/{version}/{country}/{locale}/{tenant}/accounts": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.AccountCreateRequestParams"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.AccountCreateResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Request for telco account creation",
          "tags": [
            "Account Management"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "create customer's telco accounts",
          "parameters": [
            {
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en"
            },
            {
              "description": "Example: circles",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/subcategories": {
        "get": {
          "summary": "get sub category",
          "tags": [
            "Telco Waiver Service"
          ],
          "description": "get sub category",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.SearchSubCategoryResponseModel"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/health/db": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.HealthStatus"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "health check db",
          "tags": [
            "Application Health"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/status/eligibility/{action_id}": {
        "get": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.AccountStateChangeEligibilityParams"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      },
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Validate telco account status change request eligibility",
          "tags": [
            "Account Orchestrator"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Query if a requested account status operation is performable on mentioned customer account number",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: circles",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Possible operations: terminate/suspend/reactivate",
              "in": "path",
              "name": "action_id",
              "required": true
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/status/{action_id}": {
        "post": {
          "requestBody": {
            "description": "Request Payload",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.AccountStateChangeRequestParams"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestAcknowledgementResponse"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Request for telco account status change",
          "tags": [
            "Account Orchestrator"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Account state change ranging from account creation, suspension, reactivation or termination current state",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: circles",
              "in": "path"
            },
            {
              "description": "Possible operations: terminate/suspend/reactivate",
              "in": "path",
              "name": "action_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/v1/roaming/logs": {
        "get": {
          "tags": [
            "Telco Settings"
          ],
          "description": "search roaming logs",
          "parameters": [
            {
              "description": "startTime",
              "in": "query",
              "name": "startTime",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "endTime",
              "in": "query",
              "name": "endTime",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "searchKey",
              "in": "query",
              "name": "searchKey"
            },
            {
              "description": "searchValue",
              "in": "query",
              "name": "searchValue",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "limit",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "limit"
            },
            {
              "description": "offset",
              "in": "query",
              "name": "offset",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.GetRoamingLogResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "search roaming logs"
        }
      },
      "/v1/{country}/{locale}/{tenant}/formsvc/surveys/{surveyId}/actions/{action}": {
        "post": {
          "tags": [
            "Survey Service"
          ],
          "description": "add view/quit/submit action for the survey",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "auth token",
              "in": "header"
            },
            {
              "in": "header",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "user id -> set from api gateway"
            },
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "locale",
              "in": "path"
            },
            {
              "description": "tenant",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "surveyId",
              "in": "path",
              "name": "surveyId",
              "required": true
            },
            {
              "description": "actionId",
              "in": "path",
              "name": "action",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {},
              "description": ""
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "client side error"
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "add user action for survey"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/budget/search": {
        "get": {
          "summary": "get budget",
          "tags": [
            "Telco Waiver Service"
          ],
          "description": "get budget",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.SearchCountryBudgetResponseModel"
                    }
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/level": {
        "post": {
          "summary": "Create Agent limit",
          "tags": [
            "Telco Waiver Service"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Create waiver agent.",
          "requestBody": {
            "description": "per_waiver_limit, phoneNumber, productId should not be blank.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreateAgentRequestModel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.CreateLevelResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/logs": {
        "get": {
          "description": "Get all account change logs with certain query params",
          "parameters": [
            {
              "name": "start",
              "schema": {
                "type": "string"
              },
              "description": "start time",
              "in": "query"
            },
            {
              "name": "end",
              "schema": {
                "type": "string"
              },
              "description": "end time",
              "in": "query"
            },
            {
              "in": "query",
              "name": "number",
              "schema": {
                "type": "string"
              },
              "description": "customer number"
            },
            {
              "in": "query",
              "name": "accountNumber",
              "schema": {
                "type": "string"
              },
              "description": "account number"
            },
            {
              "description": "request id",
              "in": "query",
              "name": "requestId",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "requestType",
              "schema": {
                "type": "string"
              },
              "description": "request type"
            },
            {
              "description": "request status",
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "orderBy",
              "schema": {
                "type": "string"
              },
              "description": "order logs by a particular field"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "or logs desc or ass",
              "in": "query",
              "name": "order"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "limit number of results",
              "in": "query",
              "name": "limit"
            },
            {
              "name": "offset",
              "schema": {
                "type": "string"
              },
              "description": "offset for results",
              "in": "query"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "country",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "locale",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "tenant"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.AuditLogs"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "client side error"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    }
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "summary": "Get account operation logs",
          "tags": [
            "Account Orchestrator"
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/fms/{access_level}/upload": {
        "post": {
          "description": "upload a file",
          "parameters": [
            {
              "name": "Service-Id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Service Id",
              "in": "header"
            },
            {
              "in": "header",
              "name": "File-TTL",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "File TTL"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "description": "Access Level",
              "in": "path",
              "name": "access_level",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "password": {
                      "description": "File Password",
                      "type": "string"
                    },
                    "uploadFile": {
                      "description": "File to upload",
                      "format": "binary",
                      "type": "string"
                    }
                  },
                  "required": [
                    "uploadFile"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.FileManagementUploadResponseModel"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "client side error",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    }
                  }
                }
              },
              "description": "client side error"
            },
            "424": {
              "description": "dependency error",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "upload file",
          "tags": [
            "File Management Service (FMS)"
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/limit/search": {
        "get": {
          "summary": "get category",
          "tags": [
            "Telco Waiver Service"
          ],
          "description": "get category",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.SearchCategoryResponseModel"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/v1/{country}/{locale}/{tenant}/fms/{access_level}/{file_id}": {
        "get": {
          "description": "download a file",
          "parameters": [
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Access Level",
              "in": "path",
              "name": "access_level"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "File Id",
              "in": "path",
              "name": "file_id"
            }
          ],
          "responses": {
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "client side error"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "client side error"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    }
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "summary": "get file",
          "tags": [
            "File Management Service (FMS)"
          ]
        },
        "post": {
          "description": "download a file with password",
          "parameters": [
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "description": "Access Level",
              "in": "path",
              "name": "access_level",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "File Id",
              "in": "path",
              "name": "file_id"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.DownloadProtectedFileModel"
                }
              }
            },
            "description": "File Password"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.FileDownloadResponseModel"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    }
                  }
                }
              },
              "description": "client side error"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "client side error"
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "get file with password",
          "tags": [
            "File Management Service (FMS)"
          ],
          "x-codegen-request-body-name": "password"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/categories/{category_id}/subcategories": {
        "post": {
          "requestBody": {
            "description": "category_id, name, country should not be blank.",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreateSubCategoryRequestModel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.CreateSubCategoryResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Create Sub Category",
          "tags": [
            "Telco Waiver Service"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Create Sub Category."
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/plan/{action_id}": {
        "post": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Possible operations: create/activate/switch",
              "in": "path",
              "name": "action_id",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.PlanChangeRequestParams"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestAcknowledgementResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Request for telco account plan change",
          "tags": [
            "Account Orchestrator"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Plan change ranging from plan creation, activation or switch from current plan"
        }
      },
      "/v1/{country}/{locale}/{tenant}/formsvc/surveys/{surveyId}": {
        "get": {
          "description": "get survey for the user for given surveyId",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "auth token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "description": "user id -> set from api gateway",
              "in": "header",
              "name": "userId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "locale",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "tenant",
              "in": "path",
              "name": "tenant"
            },
            {
              "in": "path",
              "name": "surveyId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "surveyId"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.Survey"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "client side error"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "summary": "get survey",
          "tags": [
            "Survey Service"
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco_settings/settings": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "set a telco setting",
          "tags": [
            "Telco Settings"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "set a telco setting: roaming off / data, voice & sms / voice & sms / enable IDD etc",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.SetSettingRequestModel"
                }
              }
            },
            "description": "value should not be blank.",
            "required": true
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/plan/eligibility/{destination_plan}": {
        "get": {
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.PlanChangeEligibilityParams"
                }
              }
            },
            "description": "Request Payload"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      },
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Validate telco account plan change request eligibility",
          "tags": [
            "Account Orchestrator"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Query if a desired plan change is allowed on mentioned customer account number",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: circles"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: PRD00401",
              "in": "path",
              "name": "destination_plan",
              "required": true
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/:accountId": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version"
            },
            {
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: circles",
              "in": "path"
            },
            {
              "in": "path",
              "name": "accountId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: AMS219791729"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.AccountDetailsResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Request to get telco account details along with inventory and profile",
          "tags": [
            "Account Management"
          ],
          "description": "get customer's telco account details"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/level/search": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.SearchLevelResponseModel"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "get agent",
          "tags": [
            "Telco Waiver Service"
          ],
          "description": "get agent"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco_settings/settings/{setting}": {
        "get": {
          "summary": "get a setting",
          "tags": [
            "Telco Settings"
          ],
          "description": "get a settings: roaming / IDD / VoiceAndSMS etc.",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: telco",
              "in": "path",
              "name": "tenant"
            },
            {
              "in": "query",
              "name": "account_number",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "account number"
            },
            {
              "description": "setting type",
              "in": "path",
              "name": "setting",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/rules": {
        "get": {
          "tags": [
            "Account Orchestrator"
          ],
          "description": "Get all account level transition configurations",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.AuditLogs"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "client side error"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    }
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "summary": "Get account level transition rules"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/approver": {
        "post": {
          "x-codegen-request-body-name": "payload",
          "description": "Create country approver.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreateCountryApproverRequestModel"
                }
              }
            },
            "description": "per_waiver_limit, phoneNumber, productId should not be blank.",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.CreateCountryApproverResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Create country approver",
          "tags": [
            "Telco Waiver Service"
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/approver/search": {
        "get": {
          "description": "get country approvers",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.SearchCountryApproverResponseModel"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "get country approvers",
          "tags": [
            "Telco Waiver Service"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/inventory/eligibility/{action_id}": {
        "get": {
          "tags": [
            "Account Orchestrator"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Query if a requested inventory operation is applicable on mentioned customer account number",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: circles",
              "in": "path"
            },
            {
              "name": "inventoryType",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sim",
              "in": "query"
            },
            {
              "description": "Example: pair, modify",
              "in": "path",
              "name": "actionId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.InventoryChangeEligibilityParams"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      },
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Validate inventory change eligibility"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/limit": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.CreateCategoryResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Create Category limit",
          "tags": [
            "Telco Waiver Service"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Create waiver limit.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreateLimitRequestModel"
                }
              }
            },
            "description": "per_waiver_limit, phoneNumber, productId should not be blank.",
            "required": true
          }
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco-notifications/logs": {
        "get": {
          "description": "get all telco notification logs with certain query params",
          "parameters": [
            {
              "in": "query",
              "name": "start",
              "schema": {
                "type": "string"
              },
              "description": "start time"
            },
            {
              "description": "end time",
              "in": "query",
              "name": "end",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "customer number",
              "in": "query",
              "name": "number",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "correlationId",
              "schema": {
                "type": "string"
              },
              "description": "brm correlation id",
              "in": "query"
            },
            {
              "name": "type",
              "schema": {
                "type": "string"
              },
              "description": "notification type",
              "in": "query"
            },
            {
              "in": "query",
              "name": "originalActivity",
              "schema": {
                "type": "string"
              },
              "description": "brm notification activity"
            },
            {
              "description": "notification status",
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "nnsActivity",
              "schema": {
                "type": "string"
              },
              "description": "customer notification activity",
              "in": "query"
            },
            {
              "name": "nnsNotificationId",
              "schema": {
                "type": "string"
              },
              "description": "nns notification id",
              "in": "query"
            },
            {
              "description": "order logs by a particular field",
              "in": "query",
              "name": "orderBy",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "order",
              "schema": {
                "type": "string"
              },
              "description": "or logs desc or ass"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "limit number of results",
              "in": "query",
              "name": "limit"
            },
            {
              "description": "offset for results",
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path",
              "name": "locale"
            },
            {
              "description": "Tenant",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.NotificationLogsResponse"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "client side error",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "summary": "get telco notification logs",
          "tags": [
            "Telco Notifications"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/requests": {
        "get": {
          "summary": "Get customer requests",
          "tags": [
            "Account Orchestrator"
          ],
          "description": "Get all customer requests for account operations with certain query params",
          "parameters": [
            {
              "name": "start",
              "schema": {
                "type": "string"
              },
              "description": "start time",
              "in": "query"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "end time",
              "in": "query",
              "name": "end"
            },
            {
              "description": "customer number",
              "in": "query",
              "name": "number",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "accountNumber",
              "schema": {
                "type": "string"
              },
              "description": "account number"
            },
            {
              "in": "query",
              "name": "requestId",
              "schema": {
                "type": "string"
              },
              "description": "request id"
            },
            {
              "name": "requestType",
              "schema": {
                "type": "string"
              },
              "description": "request type",
              "in": "query"
            },
            {
              "description": "request status",
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "order logs by a particular field",
              "in": "query",
              "name": "orderBy"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "or logs desc or ass",
              "in": "query",
              "name": "order"
            },
            {
              "description": "limit number of results",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "offset for results",
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "country",
              "in": "path",
              "name": "country"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "locale",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "description": "tenant",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestLogs"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    }
                  }
                }
              },
              "description": "client side error"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "internal server error"
            }
          }
        }
      },
      "/v1/{country}/{locale}/{tenant}/chatsvc/chats": {
        "post": {
          "description": "Create user chat session, or append message to same session, if it exists",
          "parameters": [
            {
              "description": "auth token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "user id -> set from api gateway",
              "in": "header",
              "name": "userId",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country"
            },
            {
              "description": "locale",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "tenant",
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "204": {
              "content": {},
              "description": ""
            },
            "400": {
              "description": "client side error",
              "content": {
                "*/*": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "*/*": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "summary": "add user message to chat session",
          "tags": [
            "Chat Controller"
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/budget": {
        "post": {
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreateCountryBudgetRequestModel"
                }
              }
            },
            "description": "per_waiver_limit, phoneNumber, productId should not be blank."
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.CreateLevelResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Create country budget",
          "tags": [
            "Telco Waiver Service"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Create country budget."
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/recover/{transaction_id}": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Request for recovering stuck request",
          "tags": [
            "Account Orchestrator"
          ],
          "description": "Retry stuck transaction for end to end execution",
          "parameters": [
            {
              "description": "transaction id",
              "in": "path",
              "name": "transaction_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account-workflows/inventory/{action_id}": {
        "post": {
          "tags": [
            "Account Orchestrator"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Inventory change applicable for imsi/iccid and sim current inventory",
          "parameters": [
            {
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale"
            },
            {
              "description": "Example: circles",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "action_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: pair, modify",
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.InventoryChangeRequestParams"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestAcknowledgementResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Request for telco account inventory change"
        }
      },
      "/v1/{country}/{locale}/{tenant}/roaming/options": {
        "get": {
          "description": "get roaming option status: roaming off / data, voice & sms / voice & sms.",
          "parameters": [
            {
              "in": "query",
              "name": "number",
              "schema": {
                "type": "string"
              },
              "description": "customer phone number"
            },
            {
              "name": "sin",
              "schema": {
                "type": "string"
              },
              "description": "service instance number",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "application type",
              "in": "query",
              "name": "appType"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.SetRoamingOptionResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "get roaming option",
          "tags": [
            "Telco Settings"
          ]
        },
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.SetRoamingOptionResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "set roaming option",
          "tags": [
            "Telco Settings"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "set roaming option: roaming off / data, voice & sms / voice & sms.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.SetRoamingOptionRequestModel"
                }
              }
            },
            "description": "prefix, phoneNumber, productId should not be blank.",
            "required": true
          }
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco_settings/admin/logs": {
        "get": {
          "summary": "search setting logs",
          "tags": [
            "Telco Settings"
          ],
          "description": "search setting logs",
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "startTime",
              "in": "query",
              "name": "startTime"
            },
            {
              "name": "endTime",
              "schema": {
                "type": "string"
              },
              "description": "endTime",
              "in": "query"
            },
            {
              "in": "query",
              "name": "searchKey",
              "schema": {
                "type": "string"
              },
              "description": "searchKey"
            },
            {
              "in": "query",
              "name": "searchValue",
              "schema": {
                "type": "string"
              },
              "description": "searchValue"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "limit",
              "in": "query",
              "name": "limit"
            },
            {
              "name": "offset",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.HttpResponseBody"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/health": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.HealthStatus"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "health check",
          "tags": [
            "Application Health"
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/formsvc/surveys/active": {
        "get": {
          "tags": [
            "Survey Service"
          ],
          "description": "get survey applicable for a user based on tags (support for tag will be in future)",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "auth token"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "auth token",
              "in": "header",
              "name": "User-Id"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "description": "locale",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "tenant",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "tags",
              "in": "query",
              "name": "tage",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.ActiveSurvey"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "client side error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "failure": {
                        "swagger_ref": "#/components/schemas/response.ErrorResponse"
                      },
                      "response.StdResponse": {
                        "swagger_ref": "#/components/schemas/response.StdResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "summary": "get survey by tag"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/agent/waiver/search": {
        "get": {
          "tags": [
            "Telco Waiver Service"
          ],
          "description": "find waivers",
          "parameters": [
            {
              "description": "startTime",
              "in": "query",
              "name": "startTime",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "endTime",
              "in": "query",
              "name": "endTime",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "searchKey",
              "schema": {
                "type": "string"
              },
              "description": "searchKey"
            },
            {
              "in": "query",
              "name": "searchValue",
              "schema": {
                "type": "string"
              },
              "description": "searchValue"
            },
            {
              "name": "limit",
              "schema": {
                "type": "integer"
              },
              "description": "limit",
              "in": "query"
            },
            {
              "name": "offset",
              "schema": {
                "type": "integer"
              },
              "description": "offset",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.SearchWaiverResponseModel"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "find waivers"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/agent/request": {
        "post": {
          "description": "Create waiver limit.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreateWaiverRequestModel"
                }
              }
            },
            "description": "per_waiver_limit, phoneNumber, productId should not be blank.",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.CreateWaiverResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Create waiver limit",
          "tags": [
            "Telco Waiver Service"
          ],
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v1/{country}/{locale}/{tenant}/telco/waiver/agent/approve": {
        "post": {
          "tags": [
            "Telco Waiver Service"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Update waiver.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UpdateWaiverRequestModel"
                }
              }
            },
            "description": "Query parameters",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UpdateWaiverResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update waiver"
        }
      }
    },
    "servers": [
      {
        "url": "http://qsg-telco.circles.life"
      }
    ],
    "tags": null
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebaf"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco_settings/admin/logs",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/accounts",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/formsvc/surveys/active",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/approver",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/categories/{category_id}/subcategories",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/level/search",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/agent/request",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/:accountId",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/plan/eligibility/{destination_plan}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco_settings/settings",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/recover/{transaction_id}",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/inventory/eligibility/{action_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/fms/{access_level}/{file_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/fms/{access_level}/{file_id}",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/subcategories",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/agent/approve",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/rules",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/status/{action_id}",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/roaming/logs",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/formsvc/surveys/{surveyId}/actions/{action}",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/budget",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/budget/search",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/inventory/{action_id}",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/limit/search",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/agent/waiver/search",
      "method": "GET"
    },
    {
      "endptRegex": "/health/db",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/fms/{access_level}/upload",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/roaming/options",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/roaming/options",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/approver/search",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/level",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco/waiver/admin/limit",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco_settings/settings/{setting}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/logs",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/status/eligibility/{action_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/health",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/chatsvc/chats",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/formsvc/surveys/{surveyId}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/telco-notifications/logs",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/admin/requests",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account-workflows/plan/{action_id}",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357839"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357839"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebb2"
  },
  "swaggerSpec": {
    "info": {
      "title": "TMF621-Trouble Ticket",
      "version": "4.0.0",
      "description": "**TMF API Reference : TMF - 621 Trouble Ticket**\n\n**Release : 19.0 - June 2019**\n\nThe Trouble Ticket API provides a standardized client interface to Trouble Ticket Management Systems for creating, tracking and managing trouble tickets as a result of an issue or problem identified by a customer or another system. \nExamples of Trouble Ticket API originators (clients) include CRM applications, network management or fault management systems, or other Trouble Ticket management systems (e.g. B2B).\n\nThe API supports the ability to send requests to create a new trouble ticket specifying the nature and severity of the trouble or issue as well as all necessary related information. The API also includes mechanisms to search for and update existing trouble tickets. Notifications are defined to provide information when a trouble ticket has been updated, including status changes. A basic set of states of a trouble ticket has been specified (as an example) to handle trouble ticket lifecycle management.\nTrouble Ticketing API manages trouble ticket resource:\n\n  -\tA trouble ticket represents a record, or an issue raised by requestor that need to be solved, used for reporting and managing the resolution of problems, incidents or request -\tMain trouble ticket attributes are its description, severity, type, related dates (creation, expected resolution, resolution), state and related information (change reason and change date), related parties (originator, owner, reviser, etc.), related entities (product, product order, customer bill) and notes Trouble Ticket API performs the following operations on trouble ticket -\tRetrieval of a trouble ticket or a collection of trouble ticket depending on filter criteria -\tPartial update of a trouble ticket -\tCreation of a trouble ticket -\tNotification of events on trouble ticket: o\tTrouble ticket state change o\tTrouble ticket change o\tTrouble ticket resoled o\tTrouble ticket created o\tTrouble ticket Information required\n\n\n\nCopyright © TM Forum 2019. All Rights Reserved\n\n\n"
    },
    "openapi": "3.0.1",
    "paths": {
      "/listener/troubleTicketResolvedEvent": {
        "post": {
          "operationId": "listenToTroubleTicketResolvedEvent",
          "requestBody": {
            "description": "The event data",
            "required": true,
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicketResolvedEvent"
                }
              }
            }
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity TroubleTicketResolvedEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification TroubleTicketResolvedEvent"
        }
      },
      "/listener/troubleTicketAttributeValueChangeEvent": {
        "post": {
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification TroubleTicketAttributeValueChangeEvent",
          "operationId": "listenToTroubleTicketAttributeValueChangeEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicketAttributeValueChangeEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "summary": "Client listener for entity TroubleTicketAttributeValueChangeEvent",
          "tags": [
            "notification listeners (client side)"
          ]
        }
      },
      "/hub/{id}": {
        "delete": {
          "tags": [
            "events subscription"
          ],
          "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
          "operationId": "unregisterListener",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "The id of the registered listener",
              "in": "path",
              "name": "id",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Unregister a listener"
        }
      },
      "/troubleTicket/{id}": {
        "delete": {
          "description": "This operation deletes a TroubleTicket entity.",
          "operationId": "deleteTroubleTicket",
          "parameters": [
            {
              "description": "Identifier of the TroubleTicket",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "content": {},
              "description": "Deleted"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "summary": "Deletes a TroubleTicket",
          "tags": [
            "troubleTicket"
          ]
        },
        "get": {
          "parameters": [
            {
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the TroubleTicket",
              "in": "path"
            },
            {
              "description": "Comma-separated properties to provide in response",
              "in": "query",
              "name": "fields",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/TroubleTicket"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Retrieves a TroubleTicket by ID",
          "tags": [
            "troubleTicket"
          ],
          "description": "This operation retrieves a TroubleTicket entity. Attribute selection is enabled for all first level attributes.",
          "operationId": "retrieveTroubleTicket"
        },
        "patch": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the TroubleTicket",
              "in": "path",
              "name": "id"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicket_Update"
                }
              }
            },
            "description": "The TroubleTicket to be updated"
          },
          "responses": {
            "200": {
              "description": "Updated",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/TroubleTicket"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Updates partially a TroubleTicket",
          "tags": [
            "troubleTicket"
          ],
          "x-codegen-request-body-name": "troubleTicket",
          "description": "This operation updates partially a TroubleTicket entity.",
          "operationId": "patchTroubleTicket"
        }
      },
      "/hub": {
        "post": {
          "operationId": "registerListener",
          "requestBody": {
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/EventSubscriptionInput"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Subscribed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Register a listener",
          "tags": [
            "events subscription"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics."
        }
      },
      "/listener/troubleTicketCreateEvent": {
        "post": {
          "operationId": "listenToTroubleTicketCreateEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicketCreateEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity TroubleTicketCreateEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification TroubleTicketCreateEvent"
        }
      },
      "/listener/troubleTicketDeleteEvent": {
        "post": {
          "description": "Example of a client listener for receiving the notification TroubleTicketDeleteEvent",
          "operationId": "listenToTroubleTicketDeleteEvent",
          "requestBody": {
            "required": true,
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicketDeleteEvent"
                }
              }
            },
            "description": "The event data"
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity TroubleTicketDeleteEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data"
        }
      },
      "/listener/troubleTicketStatusChangeEvent": {
        "post": {
          "operationId": "listenToTroubleTicketStatusChangeEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicketStatusChangeEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity TroubleTicketStatusChangeEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification TroubleTicketStatusChangeEvent"
        }
      },
      "/listener/troubleTicketInformationRequiredEvent": {
        "post": {
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicketInformationRequiredEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Notified",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity TroubleTicketInformationRequiredEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification TroubleTicketInformationRequiredEvent",
          "operationId": "listenToTroubleTicketInformationRequiredEvent"
        }
      },
      "/troubleTicket": {
        "get": {
          "parameters": [
            {
              "description": "Comma-separated properties to be provided in response",
              "in": "query",
              "name": "fields",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Requested index for start of resources to be provided in response",
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Requested number of resources to be provided in response",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/TroubleTicket"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "Success",
              "headers": {
                "X-Total-Count": {
                  "description": "Total number of items matching criteria",
                  "schema": {
                    "type": "integer"
                  }
                },
                "X-Result-Count": {
                  "description": "Actual number of items returned in the response body",
                  "schema": {
                    "type": "integer"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "List or find TroubleTicket objects",
          "tags": [
            "troubleTicket"
          ],
          "description": "This operation list or find TroubleTicket entities",
          "operationId": "listTroubleTicket"
        },
        "post": {
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/TroubleTicket"
                  }
                }
              },
              "description": "Created"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Creates a TroubleTicket",
          "tags": [
            "troubleTicket"
          ],
          "x-codegen-request-body-name": "troubleTicket",
          "description": "This operation creates a TroubleTicket entity.",
          "operationId": "createTroubleTicket",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TroubleTicket_Create"
                }
              }
            },
            "description": "The TroubleTicket to be created",
            "required": true
          }
        }
      }
    },
    "servers": [
      {
        "url": "https://http://localhost:3000/tmf-api/troubleTicket/v4"
      }
    ],
    "tags": [
      {
        "name": "troubleTicket"
      },
      {
        "name": "notification listeners (client side)"
      },
      {
        "name": "events subscription"
      }
    ],
    "components": {
      "schemas": {
        "TroubleTicketCreateEvent": {
          "description": "The notification data structure",
          "properties": {
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            },
            "id": {
              "description": "Identifier of the Process flow",
              "type": "string"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "timeOcurred": {
              "type": "string",
              "description": "The time the event occured.",
              "format": "date-time"
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            },
            "href": {
              "description": "Reference of the ProcessFlow",
              "type": "string"
            },
            "correlationId": {
              "type": "string",
              "description": "The correlation id for this event."
            },
            "description": {
              "description": "An explnatory of the event.",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/TroubleTicketCreateEventPayload"
            },
            "eventTime": {
              "format": "date-time",
              "type": "string",
              "description": "Time of the event occurrence."
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TroubleTicketResolvedEventPayload": {
          "type": "object",
          "description": "The event data structure",
          "properties": {
            "troubleTicket": {
              "swagger_ref": "#/components/schemas/TroubleTicket"
            }
          }
        },
        "EventSubscription": {
          "type": "object",
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
          "properties": {
            "callback": {
              "type": "string",
              "description": "The callback being registered."
            },
            "id": {
              "description": "Id of the listener",
              "type": "string"
            },
            "query": {
              "description": "additional data to be passed",
              "type": "string"
            }
          },
          "required": [
            "callback",
            "id"
          ]
        },
        "TroubleTicketInformationRequiredEventPayload": {
          "description": "The event data structure",
          "properties": {
            "troubleTicket": {
              "swagger_ref": "#/components/schemas/TroubleTicket"
            }
          },
          "type": "object"
        },
        "Error": {
          "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
          "properties": {
            "code": {
              "description": "Application relevant detail, defined in the API or a common list.",
              "type": "string"
            },
            "message": {
              "type": "string",
              "description": "More details and corrective actions related to the error which can be shown to a client user."
            },
            "reason": {
              "description": "Explanation of the reason for the error which can be shown to a client user.",
              "type": "string"
            },
            "referenceError": {
              "format": "uri",
              "type": "string",
              "description": "URI of documentation describing the error."
            },
            "status": {
              "description": "HTTP Error code extension",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class."
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name.",
              "type": "string"
            }
          },
          "required": [
            "code",
            "reason"
          ],
          "type": "object"
        },
        "RelatedParty": {
          "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
          "properties": {
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "role": {
              "description": "Role played by the related party",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "href": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            }
          },
          "required": [
            "@referredType",
            "id"
          ],
          "type": "object"
        },
        "TroubleTicketStatusType": {
          "description": "Possible values for the status of the trouble ticket",
          "enum": [
            "acknowledged",
            "rejected",
            "pending",
            "held",
            "inProgress",
            "cancelled",
            "closed",
            "resolved"
          ],
          "type": "string"
        },
        "TroubleTicket_Update": {
          "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system\nSkipped properties: id,href,creationDate,lastUpdate,statusChange,statusChangeDate",
          "properties": {
            "expectedResolutionDate": {
              "format": "date-time",
              "type": "string",
              "description": "The expected resolution date determined by the trouble ticket system"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "relatedEntity": {
              "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedEntity"
              },
              "type": "array"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "troubleTicketRelationship": {
              "items": {
                "swagger_ref": "#/components/schemas/TroubleTicketRelationship"
              },
              "type": "array",
              "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets"
            },
            "status": {
              "swagger_ref": "#/components/schemas/TroubleTicketStatusType"
            },
            "note": {
              "type": "array",
              "description": "The note(s) that are associated to the ticket.",
              "items": {
                "swagger_ref": "#/components/schemas/Note"
              }
            },
            "resolutionDate": {
              "description": "The date and time the trouble ticket was resolved",
              "format": "date-time",
              "type": "string"
            },
            "statusChangeReason": {
              "type": "string",
              "description": "The reason for changing the status"
            },
            "ticketType": {
              "description": "represent a business type of the trouble ticket e.g. incident, complain, request",
              "type": "string"
            },
            "requestedResolutionDate": {
              "description": "The resolution date requested by the user",
              "format": "date-time",
              "type": "string"
            },
            "channel": {
              "swagger_ref": "#/components/schemas/ChannelRef"
            },
            "description": {
              "type": "string",
              "description": "Description of the trouble or issue"
            },
            "attachment": {
              "type": "array",
              "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge",
              "items": {
                "swagger_ref": "#/components/schemas/AttachmentRefOrValue"
              }
            },
            "relatedParty": {
              "type": "array",
              "description": "The related party(ies) that are associated to the ticket.",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              }
            },
            "severity": {
              "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor",
              "type": "string"
            },
            "name": {
              "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket",
              "type": "string"
            },
            "priority": {
              "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc...",
              "type": "string"
            },
            "externalId": {
              "description": "Additional identifier coming from an external system",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            }
          },
          "type": "object"
        },
        "TroubleTicketAttributeValueChangeEvent": {
          "type": "object",
          "description": "The notification data structure",
          "properties": {
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "fieldPath": {
              "description": "The path identifying the object field concerned by this notification.",
              "type": "string"
            },
            "timeOcurred": {
              "description": "The time the event occured.",
              "format": "date-time",
              "type": "string"
            },
            "description": {
              "description": "An explnatory of the event.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/TroubleTicketAttributeValueChangeEventPayload"
            },
            "eventTime": {
              "type": "string",
              "description": "Time of the event occurrence.",
              "format": "date-time"
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            }
          }
        },
        "TroubleTicketRelationship": {
          "description": "Represents a relationship between trouble Trouble Tickets",
          "properties": {
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "href": {
              "type": "string",
              "description": "Reference of the Trouble Ticket"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the Trouble Ticket"
            },
            "name": {
              "type": "string",
              "description": "Name of the Trouble Ticket"
            },
            "relationshipType": {
              "description": "Type of the  Trouble Ticket relationship can be isChiled, dependent etc...",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TroubleTicketDeleteEventPayload": {
          "properties": {
            "troubleTicket": {
              "swagger_ref": "#/components/schemas/TroubleTicket"
            }
          },
          "type": "object",
          "description": "The event data structure"
        },
        "TroubleTicketDeleteEvent": {
          "description": "The notification data structure",
          "properties": {
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "description": {
              "description": "An explnatory of the event.",
              "type": "string"
            },
            "id": {
              "description": "Identifier of the Process flow",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "eventTime": {
              "description": "Time of the event occurrence.",
              "format": "date-time",
              "type": "string"
            },
            "href": {
              "description": "Reference of the ProcessFlow",
              "type": "string"
            },
            "timeOcurred": {
              "format": "date-time",
              "type": "string",
              "description": "The time the event occured."
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/TroubleTicketDeleteEventPayload"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TroubleTicketResolvedEvent": {
          "description": "The notification data structure",
          "properties": {
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the Process flow"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "description": {
              "description": "An explnatory of the event.",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/TroubleTicketResolvedEventPayload"
            },
            "eventTime": {
              "type": "string",
              "description": "Time of the event occurrence.",
              "format": "date-time"
            },
            "href": {
              "description": "Reference of the ProcessFlow",
              "type": "string"
            },
            "timeOcurred": {
              "description": "The time the event occured.",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "RelatedEntity": {
          "description": "A reference to an entity, where the type of the entity is not known in advance.",
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "href": {
              "description": "Reference of the related entity.",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "role": {
              "description": "The role of an entity.",
              "type": "string"
            }
          },
          "required": [
            "@referredType",
            "id",
            "role"
          ],
          "type": "object"
        },
        "TimePeriod": {
          "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
          "properties": {
            "endDateTime": {
              "format": "date-time",
              "type": "string",
              "description": "End of the time period, using IETC-RFC-3339 format"
            },
            "startDateTime": {
              "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TroubleTicketStatusChangeEventPayload": {
          "type": "object",
          "description": "The event data structure",
          "properties": {
            "troubleTicket": {
              "swagger_ref": "#/components/schemas/TroubleTicket"
            }
          }
        },
        "AttachmentRefOrValue": {
          "type": "object",
          "description": "An attachment by value or by reference. For AttachmentRefOrValue, the attribute type,schemaLocation and referredType are related to the contained entity and not to AttchmentRefOrValue itself",
          "properties": {
            "description": {
              "type": "string",
              "description": "A narrative text describing the content of the attachment"
            },
            "size": {
              "swagger_ref": "#/components/schemas/Quantity"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "attachmentType": {
              "description": "Attachment type such as video, picture",
              "type": "string"
            },
            "mimeType": {
              "description": "Attachment mime type such as extension file for video, picture and document",
              "type": "string"
            },
            "url": {
              "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "URI for this Attachment",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "id": {
              "type": "string",
              "description": "Unique identifier for this particular attachment"
            },
            "content": {
              "description": "The actual contents of the attachment object, if embedded, encoded as base64",
              "type": "string"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "name": {
              "type": "string",
              "description": "The name of the attachment"
            }
          }
        },
        "EntityRef": {
          "type": "object",
          "description": "Entity reference schema to be use for all entityRef class.",
          "properties": {
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "Reference of the related entity.",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "Attachment": {
          "properties": {
            "description": {
              "description": "A narrative text describing the content of the attachment",
              "type": "string"
            },
            "mimeType": {
              "description": "Attachment mime type such as extension file for video, picture and document",
              "type": "string"
            },
            "name": {
              "description": "The name of the attachment",
              "type": "string"
            },
            "url": {
              "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "content": {
              "description": "The actual contents of the attachment object, if embedded, encoded as base64",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "attachmentType": {
              "type": "string",
              "description": "Attachment type such as video, picture"
            },
            "href": {
              "description": "URI for this Attachment",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier for this particular attachment",
              "type": "string"
            },
            "size": {
              "swagger_ref": "#/components/schemas/Quantity"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            }
          },
          "type": "object",
          "description": "Complements the description of an element (for instance a product) through video, pictures..."
        },
        "AttachmentRef": {
          "type": "object",
          "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "id": {
              "description": "Unique-Identifier for this attachment",
              "type": "string"
            },
            "url": {
              "description": "Link to the attachment media/content",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "href": {
              "description": "URL serving as reference for the attachment resource",
              "type": "string"
            },
            "description": {
              "description": "A narrative text describing the content of the attachment",
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "TroubleTicketStatusChangeEvent": {
          "description": "The notification data structure",
          "properties": {
            "eventTime": {
              "description": "Time of the event occurrence.",
              "format": "date-time",
              "type": "string"
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            },
            "href": {
              "description": "Reference of the ProcessFlow",
              "type": "string"
            },
            "id": {
              "description": "Identifier of the Process flow",
              "type": "string"
            },
            "timeOcurred": {
              "description": "The time the event occured.",
              "format": "date-time",
              "type": "string"
            },
            "description": {
              "type": "string",
              "description": "An explnatory of the event."
            },
            "event": {
              "swagger_ref": "#/components/schemas/TroubleTicketStatusChangeEventPayload"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ChannelRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
          "properties": {
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "type": "string",
              "description": "Reference of the related entity."
            },
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            },
            "name": {
              "description": "Name of the channel.",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            }
          }
        },
        "Note": {
          "description": "Extra information about a given entity",
          "properties": {
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "author": {
              "description": "Author of the note",
              "type": "string"
            },
            "date": {
              "format": "date-time",
              "type": "string",
              "description": "Date of the note"
            },
            "id": {
              "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)",
              "type": "string"
            },
            "text": {
              "description": "Text of the note",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TroubleTicketAttributeValueChangeEventPayload": {
          "properties": {
            "troubleTicket": {
              "swagger_ref": "#/components/schemas/TroubleTicket"
            }
          },
          "type": "object",
          "description": "The event data structure"
        },
        "TroubleTicketInformationRequiredEvent": {
          "type": "object",
          "description": "The notification data structure",
          "properties": {
            "eventType": {
              "type": "string",
              "description": "The type of the notification."
            },
            "correlationId": {
              "type": "string",
              "description": "The correlation id for this event."
            },
            "eventTime": {
              "type": "string",
              "description": "Time of the event occurrence.",
              "format": "date-time"
            },
            "fieldPath": {
              "description": "The path identifying the object field concerned by this notification.",
              "type": "string"
            },
            "timeOcurred": {
              "format": "date-time",
              "type": "string",
              "description": "The time the event occured."
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "description": {
              "type": "string",
              "description": "An explnatory of the event."
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/TroubleTicketInformationRequiredEventPayload"
            },
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            }
          }
        },
        "TroubleTicket_Create": {
          "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system\nSkipped properties: id,href",
          "properties": {
            "relatedEntity": {
              "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedEntity"
              },
              "type": "array"
            },
            "severity": {
              "type": "string",
              "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor"
            },
            "expectedResolutionDate": {
              "format": "date-time",
              "type": "string",
              "description": "The expected resolution date determined by the trouble ticket system"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "statusChangeReason": {
              "description": "The reason for changing the status",
              "type": "string"
            },
            "description": {
              "type": "string",
              "description": "Description of the trouble or issue"
            },
            "externalId": {
              "description": "Additional identifier coming from an external system",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "statusChange": {
              "type": "array",
              "description": "The status change history that are associated to the ticket.Populated by the server",
              "items": {
                "swagger_ref": "#/components/schemas/StatusChange"
              }
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "name": {
              "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket",
              "type": "string"
            },
            "creationDate": {
              "type": "string",
              "description": "The date on which the trouble ticket was created",
              "format": "date-time"
            },
            "attachment": {
              "items": {
                "swagger_ref": "#/components/schemas/AttachmentRefOrValue"
              },
              "type": "array",
              "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge"
            },
            "priority": {
              "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc...",
              "type": "string"
            },
            "troubleTicketRelationship": {
              "type": "array",
              "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets",
              "items": {
                "swagger_ref": "#/components/schemas/TroubleTicketRelationship"
              }
            },
            "channel": {
              "swagger_ref": "#/components/schemas/ChannelRef"
            },
            "status": {
              "swagger_ref": "#/components/schemas/TroubleTicketStatusType"
            },
            "resolutionDate": {
              "description": "The date and time the trouble ticket was resolved",
              "format": "date-time",
              "type": "string"
            },
            "relatedParty": {
              "description": "The related party(ies) that are associated to the ticket.",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              },
              "type": "array"
            },
            "requestedResolutionDate": {
              "description": "The resolution date requested by the user",
              "format": "date-time",
              "type": "string"
            },
            "ticketType": {
              "description": "represent a business type of the trouble ticket e.g. incident, complain, request",
              "type": "string"
            },
            "statusChangeDate": {
              "description": "The date and time the status changed.",
              "format": "date-time",
              "type": "string"
            },
            "lastUpdate": {
              "description": "The date and time that the trouble ticked was last updated",
              "format": "date-time",
              "type": "string"
            },
            "note": {
              "items": {
                "swagger_ref": "#/components/schemas/Note"
              },
              "type": "array",
              "description": "The note(s) that are associated to the ticket."
            }
          },
          "required": [
            "description",
            "severity",
            "ticketType"
          ],
          "type": "object"
        },
        "TroubleTicket": {
          "type": "object",
          "description": "A trouble ticket is a record of an issue that is created, tracked, and managed by a trouble ticket management system",
          "properties": {
            "troubleTicketRelationship": {
              "description": "A list of trouble ticket relationships (TroubleTicketRelationship [*]). Represents a relationship between trouble tickets",
              "items": {
                "swagger_ref": "#/components/schemas/TroubleTicketRelationship"
              },
              "type": "array"
            },
            "externalId": {
              "type": "string",
              "description": "Additional identifier coming from an external system"
            },
            "name": {
              "description": "Name of the trouble ticket, typically a short description provided by the user that create the ticket",
              "type": "string"
            },
            "attachment": {
              "type": "array",
              "description": "File(s) attached to the trouble ticket. e.g. pictur of broken device, scaning of a bill or charge",
              "items": {
                "swagger_ref": "#/components/schemas/AttachmentRefOrValue"
              }
            },
            "resolutionDate": {
              "description": "The date and time the trouble ticket was resolved",
              "format": "date-time",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of the trouble ticket",
              "type": "string"
            },
            "note": {
              "description": "The note(s) that are associated to the ticket.",
              "items": {
                "swagger_ref": "#/components/schemas/Note"
              },
              "type": "array"
            },
            "expectedResolutionDate": {
              "description": "The expected resolution date determined by the trouble ticket system",
              "format": "date-time",
              "type": "string"
            },
            "severity": {
              "type": "string",
              "description": "The severity of the issue. Indicate the implication of the issue on the expected functionality e.g. of a system, application, service etc.. \nSeverity values can be for example : Critical, Major, Minor"
            },
            "statusChangeDate": {
              "description": "The date and time the status changed.",
              "format": "date-time",
              "type": "string"
            },
            "relatedParty": {
              "description": "The related party(ies) that are associated to the ticket.",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              },
              "type": "array"
            },
            "creationDate": {
              "type": "string",
              "description": "The date on which the trouble ticket was created",
              "format": "date-time"
            },
            "relatedEntity": {
              "description": "An entity that is related to the ticket such as a bill, a product, etc. The entity against which the ticket is associated.",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedEntity"
              },
              "type": "array"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "lastUpdate": {
              "description": "The date and time that the trouble ticked was last updated",
              "format": "date-time",
              "type": "string"
            },
            "statusChangeReason": {
              "description": "The reason for changing the status",
              "type": "string"
            },
            "priority": {
              "description": "The priority of the trouble ticket and how quickly the issue should be resolved. Example: Critical, High, Medium, Low. The value is set by the ticket management system considering the severity, ticket type etc...",
              "type": "string"
            },
            "requestedResolutionDate": {
              "description": "The resolution date requested by the user",
              "format": "date-time",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "ticketType": {
              "description": "represent a business type of the trouble ticket e.g. incident, complain, request",
              "type": "string"
            },
            "statusChange": {
              "items": {
                "swagger_ref": "#/components/schemas/StatusChange"
              },
              "type": "array",
              "description": "The status change history that are associated to the ticket.Populated by the server"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "channel": {
              "swagger_ref": "#/components/schemas/ChannelRef"
            },
            "href": {
              "description": "Hyperlink, a reference to the trouble ticket entity",
              "type": "string"
            },
            "status": {
              "swagger_ref": "#/components/schemas/TroubleTicketStatusType"
            },
            "description": {
              "description": "Description of the trouble or issue",
              "type": "string"
            }
          }
        },
        "EventSubscriptionInput": {
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
          "properties": {
            "callback": {
              "description": "The callback being registered.",
              "type": "string"
            },
            "query": {
              "type": "string",
              "description": "additional data to be passed"
            }
          },
          "required": [
            "callback"
          ],
          "type": "object"
        },
        "StatusChange": {
          "properties": {
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "changeDate": {
              "type": "string",
              "description": "The date and time the status changed.",
              "format": "date-time"
            },
            "changeReason": {
              "description": "The reason why the status changed.",
              "type": "string"
            },
            "status": {
              "description": "The status of the trouble ticket",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            }
          },
          "type": "object",
          "description": "Holds the status notification reasons and associated date the status changed, populated by the server"
        },
        "Quantity": {
          "type": "object",
          "description": "An amount in a given unit",
          "properties": {
            "units": {
              "type": "string",
              "description": "Unit"
            },
            "amount": {
              "type": "number",
              "default": 1,
              "description": "Numeric value in a given unit",
              "format": "float"
            }
          }
        },
        "TroubleTicketCreateEventPayload": {
          "description": "The event data structure",
          "properties": {
            "troubleTicket": {
              "swagger_ref": "#/components/schemas/TroubleTicket"
            }
          },
          "type": "object"
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebb1"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/troubleTicket/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/troubleTicket/{id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/troubleTicket/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/hub",
      "method": "POST"
    },
    {
      "endptRegex": "/hub/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/listener/troubleTicketCreateEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/troubleTicketStatusChangeEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/troubleTicket",
      "method": "GET"
    },
    {
      "endptRegex": "/troubleTicket",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/troubleTicketAttributeValueChangeEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/troubleTicketDeleteEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/troubleTicketInformationRequiredEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/troubleTicketResolvedEvent",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357853"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357853"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebb4"
  },
  "swaggerSpec": {
    "servers": [
      {
        "url": "http://qsg-inventory.circles.life/v1/postman"
      }
    ],
    "tags": null,
    "components": {
      "schemas": {
        "category.Tuple": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "id": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "code": {
              "type": "string"
            }
          },
          "required": [
            "code",
            "id",
            "name"
          ]
        },
        "country.Tuple": {
          "properties": {
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "id": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "name": {
              "type": "string"
            },
            "currency_code": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "currency_prefix": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "code": {
              "type": "string"
            }
          },
          "required": [
            "code",
            "id",
            "name"
          ],
          "type": "object"
        },
        "responses.APILocationResponse": {
          "properties": {
            "address_line_3": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "email": {
              "type": "string"
            },
            "zipcode": {
              "type": "string"
            },
            "address_line_1": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "phone_number": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "website": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "address_line_2": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "name_map": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "subcategory.Tuple": {
          "properties": {
            "updated_at": {
              "type": "string"
            },
            "category_code": {
              "type": "string",
              "description": "NON DB FIELDS"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "name": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "priority": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            },
            "category_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "created_at": {
              "type": "string"
            },
            "products": {
              "items": {
                "swagger_ref": "#/components/schemas/product.Tuple"
              },
              "type": "array"
            }
          },
          "required": [
            "category_code",
            "code",
            "id",
            "name"
          ],
          "type": "object"
        },
        "location.Tuple": {
          "properties": {
            "zipcode": {
              "type": "string"
            },
            "address_line_3": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "country_code": {
              "type": "string",
              "description": "Non DB Fields"
            },
            "id": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "phone_number": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "source_type": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "website": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "name_map": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "email": {
              "type": "string"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "address_line_2": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "address_line_1": {
              "type": "string"
            },
            "country_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "source_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "updated_at": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "name_map",
            "source_type",
            "title",
            "zipcode"
          ],
          "type": "object"
        },
        "responses.APIProductVariantIdentifierResponse": {
          "properties": {
            "created_at": {
              "type": "integer"
            },
            "identifier_key1": {
              "type": "string"
            },
            "deleted_at": {
              "type": "integer"
            },
            "subcategory_code": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "expire_at": {
              "type": "integer"
            },
            "product_variant_sku": {
              "type": "string"
            },
            "warehouse_location_name_map": {
              "type": "string"
            },
            "enabled_at": {
              "type": "integer"
            },
            "identifier_key2": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "external_key": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "external_rules": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.APIRuleMapResponse"
              },
              "type": "array"
            },
            "identifier_val1": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/responses.APIPriceResponse"
            },
            "purchase_order_ref": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "id": {
              "type": "string"
            },
            "identifier_val2": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            }
          },
          "type": "object"
        },
        "sqlnullable.NullInt64": {
          "type": "object"
        },
        "sqlnullable.NullString": {
          "type": "object"
        },
        "externalrulemap.Tuple": {
          "properties": {
            "created_at": {
              "type": "string"
            },
            "external_rule_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "warehouse_location_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "source_type": {
              "description": "Non Db Fields",
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "external_rule_val": {
              "type": "string"
            },
            "product_variant_sku": {
              "type": "string"
            },
            "source_id": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "country_code": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "external_rule_type": {
              "type": "string"
            }
          },
          "required": [
            "external_rule_type",
            "external_rule_val",
            "id",
            "product_variant_sku",
            "source_type"
          ],
          "type": "object"
        },
        "responses.APIExternalRuleResponse": {
          "properties": {
            "external_type": {
              "type": "string"
            },
            "external_val": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "productvariantidentifier.Tuple": {
          "type": "object",
          "properties": {
            "currency_code": {
              "type": "string"
            },
            "product_variant_sku": {
              "type": "string"
            },
            "unique_identifier_key_2": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "subcategory_code": {
              "type": "string"
            },
            "id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "identifier_key1": {
              "type": "string"
            },
            "unique_identifier_value_1": {
              "type": "string"
            },
            "unlock_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "new_external_key": {
              "type": "string"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "test": {
              "type": "boolean"
            },
            "product_variant_code": {
              "description": "NON DB FIELDS",
              "type": "string"
            },
            "warehouse_location_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "external_key": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "purchase_order_id": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "status": {
              "type": "string"
            },
            "warehouse_location_name_map": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "price": {
              "type": "number"
            },
            "keep_lock": {
              "type": "boolean"
            },
            "identifier_val1": {
              "type": "string"
            },
            "expire_at": {
              "type": "integer",
              "description": "Body optional Parameteters"
            },
            "updated_at": {
              "type": "string"
            },
            "unique_identifier_key_1": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "unique_identifier_value_2": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "country_product_variant_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "externalRules": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/externalrulemap.Tuple"
              }
            },
            "country_code": {
              "type": "string"
            },
            "currency_prefix": {
              "type": "string"
            },
            "sku": {
              "type": "string"
            }
          }
        },
        "responses.APIProductResponse": {
          "properties": {
            "id": {
              "type": "string"
            },
            "sku": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "priority": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            },
            "code": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "specs": {
              "type": "string"
            },
            "variants": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.APIProductVariantResponse"
              },
              "type": "array"
            },
            "attachments": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.AttachmentResponse"
              },
              "type": "array"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "subcategory_code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "iccids.LockIccidByFiltersParam": {
          "properties": {
            "warehouse_location_name_map": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "expire_at": {
              "type": "integer"
            },
            "external_key": {
              "type": "string"
            },
            "rules": {
              "items": {
                "swagger_ref": "#/components/schemas/iccids.ExternalRuleParam"
              },
              "type": "array"
            }
          },
          "required": [
            "expire_at",
            "external_key"
          ],
          "type": "object"
        },
        "responses.APICountryResponse": {
          "properties": {
            "code": {
              "type": "string"
            },
            "currency_code": {
              "type": "string"
            },
            "currency_prefix": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "iccids.LockAndConsumeIccidByFiltersParam": {
          "properties": {
            "enabled_at": {
              "type": "integer"
            },
            "external_key": {
              "type": "string"
            },
            "rules": {
              "items": {
                "swagger_ref": "#/components/schemas/iccids.ExternalRuleParam"
              },
              "type": "array"
            },
            "warehouse_location_name_map": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "external_key"
          ],
          "type": "object"
        },
        "responses.APIPVWResponse": {
          "properties": {
            "id": {
              "type": "string"
            },
            "product_variant_sku": {
              "type": "string"
            },
            "warehouse_location_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "productvariantwarehouse.Tuple": {
          "properties": {
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "warehouse_location_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "product_variant_sku": {
              "description": "Non Db Fields",
              "type": "string"
            },
            "id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "product_variant_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "updated_at": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "product_variant_code": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "product_variant_sku",
            "warehouse_location_id"
          ],
          "type": "object"
        },
        "externalrule.Tuple": {
          "required": [
            "external_type",
            "external_val",
            "id"
          ],
          "type": "object",
          "properties": {
            "external_type": {
              "type": "string"
            },
            "external_val": {
              "type": "string"
            },
            "id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "updated_at": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            }
          }
        },
        "responses.APIConsumerNumbersResponse": {
          "properties": {
            "general": {
              "swagger_ref": "#/components/schemas/responses.CategoryResponse"
            },
            "special": {
              "swagger_ref": "#/components/schemas/responses.CategoryResponse"
            }
          },
          "type": "object"
        },
        "appresponse.Response": {
          "properties": {
            "result": {
              "properties": {},
              "type": "object"
            },
            "code": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "responses.APIProductVariantResponse": {
          "properties": {
            "tags": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "disclaimer": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "sku": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "attachments": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.AttachmentResponse"
              },
              "type": "array"
            },
            "product_code": {
              "type": "string"
            },
            "product_name": {
              "type": "string"
            },
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "available_quantity": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            },
            "price": {
              "swagger_ref": "#/components/schemas/responses.APIPriceResponse"
            },
            "sub_title": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "external_rules": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.APIRuleMapResponse"
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "images": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "term": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "specs": {
              "type": "string"
            },
            "priority": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            }
          },
          "type": "object"
        },
        "transition.Tuple": {
          "properties": {
            "updated_at": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "destination_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "id": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "product_variants": {
              "properties": {},
              "type": "object"
            },
            "source_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "source_type": {
              "description": "Non Db Fields",
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "required": [
            "destination_id",
            "id",
            "source_id",
            "source_type"
          ],
          "type": "object"
        },
        "responses.APIWarehouseProviderResponse": {
          "properties": {
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "name_map": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "responses.APIPriceResponse": {
          "properties": {
            "currency": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "productvariant.Tuple": {
          "required": [
            "code",
            "id",
            "price",
            "sku",
            "title"
          ],
          "type": "object",
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "created_at": {
              "type": "string"
            },
            "externalRules": {
              "items": {
                "swagger_ref": "#/components/schemas/externalrulemap.Tuple"
              },
              "type": "array"
            },
            "product_name": {
              "type": "string"
            },
            "priority": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            },
            "sub_title": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "updated_at": {
              "type": "string"
            },
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "currency_code": {
              "type": "string"
            },
            "attachments": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.AttachmentResponse"
              },
              "type": "array"
            },
            "product_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "specs": {
              "type": "string"
            },
            "price": {
              "type": "number"
            },
            "sku": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "images": {
              "type": "string"
            },
            "term": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "code": {
              "type": "string"
            },
            "disclaimer": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "product_code": {
              "description": "NON DB FIELDS",
              "type": "string"
            },
            "currency_prefix": {
              "type": "string"
            },
            "available_quantity": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            },
            "country_code": {
              "description": "REMOVE later - used in createCountryProductVariant",
              "type": "string"
            }
          }
        },
        "product.Tuple": {
          "required": [
            "code",
            "id",
            "name",
            "subcategory_code"
          ],
          "type": "object",
          "properties": {
            "subcategory_code": {
              "description": "NON DB FIELDS",
              "type": "string"
            },
            "subcategory_id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "created_at": {
              "type": "string"
            },
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "name": {
              "type": "string"
            },
            "id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "priority": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            },
            "attachments": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/responses.AttachmentResponse"
              }
            },
            "specs": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "variants": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.APIProductVariantResponse"
              },
              "type": "array"
            },
            "code": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            }
          }
        },
        "responses.APICategoryResponse": {
          "properties": {
            "code": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "subcategories": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/responses.APISubcategoryResponse"
              }
            }
          },
          "type": "object"
        },
        "responses.APISubcategoryResponse": {
          "properties": {
            "code": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "priority": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullInt64"
            },
            "products": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.APIProductResponse"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "warehouseprovider.Tuple": {
          "required": [
            "id",
            "name",
            "name_map"
          ],
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "deleted_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "description": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            },
            "enabled_at": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullTime"
            },
            "id": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "name": {
              "type": "string"
            },
            "name_map": {
              "type": "string"
            }
          }
        },
        "numbers.BulkReleaseNumberParam": {
          "properties": {
            "external_key": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "responses.APIRuleMapResponse": {
          "properties": {
            "external_val": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "product_variant_sku": {
              "type": "string"
            },
            "source_id": {
              "type": "string"
            },
            "external_rule_id": {
              "type": "string"
            },
            "external_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "responses.AttachmentResponse": {
          "properties": {
            "url": {
              "type": "string"
            },
            "content_type": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "identifier_type": {
              "type": "string"
            },
            "parent_id": {
              "type": "string"
            },
            "size": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "sqlnullable.NullTime": {
          "type": "object"
        },
        "iccids.ExternalRuleParam": {
          "properties": {
            "val": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "responses.CategoryResponse": {
          "properties": {
            "selected_number": {
              "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
            },
            "series": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "numbers": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
              }
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "contact": {},
      "description": "Documentation of the Inventory Management System",
      "license": {},
      "title": "Inventory Management System"
    },
    "openapi": "3.0.1",
    "paths": {
      "/external_rules/{id}": {
        "delete": {
          "description": "soft delete a country",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "External Rule id"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Soft delete a country"
        },
        "get": {
          "description": "return the data for warehouse provider",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "External Rule Id",
              "in": "path",
              "name": "id",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIExternalRuleResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Return the data for Warehouse Provider"
        },
        "put": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/externalrule.Tuple"
                }
              }
            },
            "description": "Update external_type, external_val",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a category",
          "x-codegen-request-body-name": "externalrule",
          "description": "update a category",
          "parameters": [
            {
              "description": "External Rule Id",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/numbers/{number}": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Find the number based of idf key, val in the number skus",
          "description": "find the number based of idf key, val in the number skus\nif not available return error",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "number",
              "in": "path",
              "name": "number"
            }
          ]
        }
      },
      "/subcategories": {
        "post": {
          "description": "store subcategory in database if params are valid",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/subcategory.Tuple"
                }
              }
            },
            "description": "Name, Code and Category Code are mandatory"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APISubcategoryResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store subcategory in database if params are valid",
          "x-codegen-request-body-name": "subcategory"
        },
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filtering",
              "in": "path",
              "name": "filters"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APISubcategoryResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all subcategories",
          "description": "list all subcategories"
        }
      },
      "/locations/{source_type}/{id}": {
        "get": {
          "summary": "Return the data for Warehouse Location",
          "description": "return the data for warehouse location",
          "parameters": [
            {
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Warehouse Location source_type",
              "in": "path"
            },
            {
              "description": "Warehouse Location id",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APILocationResponse"
                  }
                }
              },
              "description": "OK"
            }
          }
        },
        "put": {
          "description": "update a warehouse location",
          "parameters": [
            {
              "description": "Warehouse Location source_type",
              "in": "path",
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Warehouse Location id",
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/location.Tuple"
                }
              }
            },
            "description": "Update title, description, name_map, address_line_1, address_line_2, address_line_3, zipcode, phone_number, website and email",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a warehouse location",
          "x-codegen-request-body-name": "location"
        },
        "delete": {
          "description": "soft delete a warehouse location",
          "parameters": [
            {
              "description": "Warehouse location source type",
              "in": "path",
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Warehouse location id",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Soft delete a warehouse location"
        }
      },
      "/product_variant_identifiers/{id}/direct_consume": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Consume a particular product variant identity based on given ID and external_key",
          "x-codegen-request-body-name": "productvariantidentifier",
          "description": "consume a particular product variant identity based on given ID and external_key",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product Variant Identifier id",
              "in": "path",
              "name": "id"
            }
          ],
          "requestBody": {
            "description": "external_key, new_external_key and status are mandatory",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            }
          }
        }
      },
      "/iccids/{iccid}": {
        "get": {
          "description": "fetch iccid",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "ICCID",
              "in": "path",
              "name": "iccid"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Fetch ICCID"
        }
      },
      "/crons/number_sync": {
        "get": {
          "summary": "NumberSync syncs number from RC",
          "description": "numbersync syncs number from RC",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      },
      "/catalog/{categoryCode}": {
        "get": {
          "description": "list catalog",
          "parameters": [
            {
              "in": "path",
              "name": "categoryCode",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "category code"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APICategoryResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List a catalog"
        }
      },
      "/product_variant_warehouses/{id}": {
        "delete": {
          "description": "soft delete a product variant warehouse",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product Variant Warehouse is"
            }
          ],
          "summary": "Soft delete a Product Varian Warehouse"
        },
        "get": {
          "description": "return the data for product variant warehouse",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product Variant Warehouse id"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIPVWResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Return the data for Product Variant Warehouse"
        }
      },
      "/iccids/{iccid}/lock_and_consume": {
        "post": {
          "description": "lock and consume iccid",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "ICCID",
              "in": "path",
              "name": "iccid",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "ICCIDS",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lock and Consume ICCID",
          "x-codegen-request-body-name": "iccids"
        }
      },
      "/product_variants/{identifier}": {
        "delete": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Soft delete a Product Variant",
          "description": "soft delete a product variant",
          "parameters": [
            {
              "in": "path",
              "name": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product Variant identifier"
            }
          ]
        },
        "get": {
          "description": "take a code and return the data for that category",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Product Variant identifier",
              "in": "path",
              "name": "identifier",
              "required": true
            }
          ],
          "summary": "Take a code and return the data for that category"
        },
        "put": {
          "description": "update a product variant",
          "parameters": [
            {
              "description": "Product Variant identifier",
              "in": "path",
              "name": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariant.Tuple"
                }
              }
            },
            "description": "Update name, code",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a Product Variant",
          "x-codegen-request-body-name": "productvariant"
        }
      },
      "/warehouses": {
        "get": {
          "summary": "List all Warehouse Providers",
          "description": "list all warehouse provider",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIWarehouseProviderResponse"
                  }
                }
              },
              "description": "OK"
            }
          }
        },
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/warehouseprovider.Tuple"
                }
              }
            },
            "description": "name, description and name_map are mandatory",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIWarehouseProviderResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store Warehouse Provider in database if params are valid",
          "x-codegen-request-body-name": "warehouseprovider",
          "description": "store warehouse provider in database if params are valid"
        }
      },
      "/external_rules": {
        "get": {
          "description": "list all categories",
          "parameters": [
            {
              "description": "filtering",
              "in": "path",
              "name": "filters",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APIExternalRuleResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all categories"
        },
        "post": {
          "x-codegen-request-body-name": "externalrule",
          "description": "store category in database if params are valid",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/externalrule.Tuple"
                }
              }
            },
            "description": "external_val and external_type are mandatory"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIExternalRuleResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store category in database if params are valid"
        }
      },
      "/numbers/{number}/consume": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "Numbers",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Find the number based on idf key, val in the number skus",
          "x-codegen-request-body-name": "numbers",
          "description": "find the number based on idf key, val in the number skus\nif not available return error",
          "parameters": [
            {
              "description": "Number",
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/products/{code}": {
        "delete": {
          "description": "soft delete a product",
          "parameters": [
            {
              "description": "Product Code",
              "in": "path",
              "name": "code",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Soft delete a product"
        },
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductResponse"
                  }
                }
              }
            }
          },
          "summary": "Take a code and return the data for that product",
          "description": "take a code and return the data for that product",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product Code",
              "in": "path",
              "name": "code"
            }
          ]
        },
        "put": {
          "x-codegen-request-body-name": "product",
          "description": "update a product",
          "parameters": [
            {
              "name": "code",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product code",
              "in": "path"
            }
          ],
          "requestBody": {
            "description": "Update name, code, specs",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/product.Tuple"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              }
            }
          },
          "summary": "Update a product"
        }
      },
      "/product_variants/{sku}/block": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lock a particular product variant identity based on given pv sku",
          "x-codegen-request-body-name": "productvariantidentifier",
          "description": "lock a particular product variant identity based on given pv sku",
          "parameters": [
            {
              "name": "sku",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product Variant Identifier sku",
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "expire_at, external_key and test are mandatory",
            "required": true
          }
        }
      },
      "/subcategories/{code}": {
        "delete": {
          "description": "soft delete a subcategory",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Subcategory Code",
              "in": "path",
              "name": "code"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Soft delete a subcategory"
        },
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APISubcategoryResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Take a code and return the data for that subcategory",
          "description": "take a code and return the data for that subcategory",
          "parameters": [
            {
              "description": "Subcategory code",
              "in": "path",
              "name": "code",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "put": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a subcategory",
          "x-codegen-request-body-name": "subcategory",
          "description": "update a subcategory",
          "parameters": [
            {
              "description": "Subcategory code",
              "in": "path",
              "name": "code",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Update name, code",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/subcategory.Tuple"
                }
              }
            }
          }
        }
      },
      "/crons/telco_hierarchy_sync": {
        "get": {
          "description": "syncs the plans, addond",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Syncs the plans, addons"
        }
      },
      "/iccids/random_lock_and_consume": {
        "post": {
          "description": "lock and consume iccid by filter",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/iccids.LockAndConsumeIccidByFiltersParam"
                }
              }
            },
            "description": "ICCIDS",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lock and Consume ICCID by filter",
          "x-codegen-request-body-name": "iccids"
        }
      },
      "/numbers/{number}/change_number_lock": {
        "post": {
          "x-codegen-request-body-name": "numbers",
          "description": "from one external key to another",
          "parameters": [
            {
              "description": "Number",
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "numbers",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              }
            }
          },
          "summary": "From one external key to another"
        }
      },
      "/transitions/{source_type}": {
        "post": {
          "x-codegen-request-body-name": "transition",
          "description": "store transition in database if params are valid",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Transition source type",
              "in": "path",
              "name": "source_type",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/transition.Tuple"
                }
              }
            },
            "description": "source_id, destination_id and product_variants are mandatory",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store transition in database if params are valid"
        }
      },
      "/categories": {
        "post": {
          "description": "create a category\n{code: 0, result: {}}",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/category.Tuple"
                }
              }
            },
            "description": "Code, Name are mandatory"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APICategoryResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create category",
          "x-codegen-request-body-name": "category"
        },
        "get": {
          "summary": "List categories",
          "description": "list all categories\n{code: 0, result: []}",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APICategoryResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      },
      "/categories/{code}": {
        "get": {
          "description": "get category by code\n{code: 0, result: {}}",
          "parameters": [
            {
              "description": "Category Code",
              "in": "path",
              "name": "code",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APICategoryResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Show a category"
        },
        "put": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/category.Tuple"
                }
              }
            },
            "description": "Update Name, Code",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update category",
          "x-codegen-request-body-name": "category",
          "description": "update a category",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Category Code",
              "in": "path",
              "name": "code",
              "required": true
            }
          ]
        },
        "delete": {
          "description": "delete a category",
          "parameters": [
            {
              "description": "Category Code",
              "in": "path",
              "name": "code",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Delete category"
        }
      },
      "/numbers/count": {
        "get": {
          "summary": "Return count based on general special categories",
          "description": "return count based on general special categories",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              }
            }
          }
        }
      },
      "/crons/number_series_sync": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Syncs the top available number_series for each sku to redis",
          "description": "syncs the top available number_series for each sku to redis"
        }
      },
      "/product_variant_warehouses": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APIPVWResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all Product Variant Warehouse",
          "description": "list all product variant warehouse",
          "parameters": [
            {
              "description": "filtering",
              "in": "path",
              "name": "filters",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "post": {
          "description": "store product variant warehouse in databse if params are valid",
          "requestBody": {
            "description": "warehouse_location_id and product_variant_sku are mandatory",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantwarehouse.Tuple"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIPVWResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store Product Variant Warehouse in database if params are valid",
          "x-codegen-request-body-name": "productvariantwarehouse"
        }
      },
      "/external_rule_maps/{source_type}/{id}": {
        "delete": {
          "summary": "Soft delete a Country Product Variant Rule",
          "description": "soft delete a country product variant rule",
          "parameters": [
            {
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "External Rule Map source type",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "External Rule Map id",
              "in": "path",
              "name": "id",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          }
        },
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIRuleMapResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Return the data for External Rule Map",
          "description": "return the data for external rule map",
          "parameters": [
            {
              "in": "path",
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "External Rule Map source type"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "External Rule Map id",
              "in": "path",
              "name": "id",
              "required": true
            }
          ]
        }
      },
      "/products": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store product in database if params are valid",
          "x-codegen-request-body-name": "product",
          "description": "store product in database if params are valid",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/product.Tuple"
                }
              }
            },
            "description": "Code, Name, Specs and Subcategory Code are mandatory",
            "required": true
          }
        },
        "get": {
          "summary": "List all products",
          "description": "list all products",
          "parameters": [
            {
              "in": "path",
              "name": "filters",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "filtering"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APIProductResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      },
      "/numbers/{number}/release": {
        "post": {
          "summary": "Release an already locked number based on idf key and val in the number skus",
          "x-codegen-request-body-name": "numbers",
          "description": "release an already locked number based on idf key and val in the number skus",
          "parameters": [
            {
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Number"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "Numbers",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      },
      "/product_variant_identifiers/{id}/consume": {
        "post": {
          "parameters": [
            {
              "description": "Product Variant Identifier id",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "external_key and new_external_key are mandatory",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Consume a particular product variant identity based on given ID and external_key",
          "x-codegen-request-body-name": "productvariantidentifier",
          "description": "consume a particular product variant identity based on given ID and external_key"
        }
      },
      "/file_uploads/product_variants": {
        "post": {
          "description": "creating product variants from CSV",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "creating product variants from CSV"
        }
      },
      "/crons/flush_numbers": {
        "get": {
          "summary": "set deleted_at on numbers is Damaged on EC",
          "description": "set deleted_at on numbers is damaged on EC",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              }
            }
          }
        }
      },
      "/countries": {
        "get": {
          "summary": "List all countries",
          "description": "list all countris",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APICountryResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          }
        },
        "post": {
          "summary": "Create country",
          "x-codegen-request-body-name": "country",
          "description": "create country",
          "requestBody": {
            "description": "Code, Currency Prefix, Currency Code and Name are mandatory",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/country.Tuple"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APICountryResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/product_variant_identifiers/count": {
        "get": {
          "summary": "Count all variant_identifiers",
          "description": "count all variant_identifiers",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "filtering",
              "in": "path",
              "name": "filters",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      },
      "/product_variants": {
        "get": {
          "description": "list all variants",
          "parameters": [
            {
              "description": "filtering",
              "in": "path",
              "name": "filters",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APIProductVariantResponse"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "summary": "List all variants"
        },
        "post": {
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariant.Tuple"
                }
              }
            },
            "description": "Name, code and category code are mandatory"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Create a record",
          "x-codegen-request-body-name": "productvariant",
          "description": "create a record"
        }
      },
      "/warehouses/{id}": {
        "get": {
          "description": "return the data for warehouse provider",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Warehouse Provider id",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIWarehouseProviderResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Return the data for Warehouse Provider"
        },
        "put": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a Warehouse Provider",
          "x-codegen-request-body-name": "warehouseprovider",
          "description": "update a warehouse provider",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Warehouse Provider id",
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/warehouseprovider.Tuple"
                }
              }
            },
            "description": "Update name, description, name_map",
            "required": true
          }
        },
        "delete": {
          "parameters": [
            {
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Warehouse Provider id",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Soft delete a Warehouse Provider",
          "description": "soft delete a warehouse provider"
        }
      },
      "/numbers/{number}/lock": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "Numbers",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Release older locks for that external_key",
          "x-codegen-request-body-name": "numbers",
          "description": "release older locks for that external_key,\nlock the number for the corresponding id\nif not available return error",
          "parameters": [
            {
              "description": "Number",
              "in": "path",
              "name": "number",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/external_rule_maps/{source_type}": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APIRuleMapResponse"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all Country Product Variant Rule",
          "description": "list all country product variant rule",
          "parameters": [
            {
              "in": "path",
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "External Rule Map source type"
            }
          ]
        },
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIRuleMapResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store External Rule Map in database if params are valid",
          "x-codegen-request-body-name": "externalrulemap",
          "description": "store external rule map in database if params are valid",
          "parameters": [
            {
              "description": "External Rule Map id",
              "in": "path",
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/externalrulemap.Tuple"
                }
              }
            },
            "description": "source_type, product_variant_sku, external_rule_val, external_rule_type and warehouse_location_id are mandatory",
            "required": true
          }
        }
      },
      "/locations/{source_type}": {
        "get": {
          "description": "list all warehouse location",
          "parameters": [
            {
              "in": "path",
              "name": "source_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Warehouse location source type"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APILocationResponse"
                    }
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all Warehouse Location"
        },
        "post": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Warehouse Location Source Type",
              "in": "path",
              "name": "source_type"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/location.Tuple"
                }
              }
            },
            "description": "title, source_id, description, name_map, address_line_1, address_line_2, address_line_3, zipcode, phone_number, website, and email are mandatory",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APILocationResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Store warehouse location in database if params are valid",
          "x-codegen-request-body-name": "location",
          "description": "store warehouse location in databse if params are valid"
        }
      },
      "/iccids/random_lock": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lock ICCID by filter",
          "x-codegen-request-body-name": "iccids",
          "description": "lock iccid by filter",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/iccids.LockIccidByFiltersParam"
                }
              }
            },
            "description": "ICCIDS"
          }
        }
      },
      "/product_variant_identifiers/{id}/unblock": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Lock a particular product variant identity based on given sku",
          "x-codegen-request-body-name": "productvariantidentifier",
          "description": "lock a particular product variant identity based on given sku",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product Variant Identifier id",
              "in": "path",
              "name": "id"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "external_key and keep_lock are mandatory",
            "required": true
          }
        }
      },
      "/product_variant_identifiers/{id}/block": {
        "post": {
          "description": "lock a particular product variant identity based on given id",
          "parameters": [
            {
              "description": "Product Variant Identifier id",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "expire_at, external_key and test are mandatory"
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              }
            }
          },
          "summary": "Lock a particular product variant identity based on gived id",
          "x-codegen-request-body-name": "productvariantidentifier"
        }
      },
      "/file_uploads/product_variant_identifiers": {
        "post": {
          "summary": "creating product variants identifiers from CSV",
          "description": "creating product variants identifiers from CSV",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              }
            }
          }
        }
      },
      "/numbers/random_lock": {
        "post": {
          "summary": "Lock random number",
          "x-codegen-request-body-name": "numbers",
          "description": "lock random number",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/productvariantidentifier.Tuple"
                }
              }
            },
            "description": "Numbers",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      },
      "/countries/{code}": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Country Code",
              "in": "path",
              "name": "code",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APICountryResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Fetch a country by ID or code",
          "description": "fetch a country by ID or code"
        },
        "put": {
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/country.Tuple"
                }
              }
            },
            "description": "Update name, currency_prefix, currency_code, code"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update a country",
          "x-codegen-request-body-name": "country",
          "description": "update a country",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country Code",
              "in": "path",
              "name": "code"
            }
          ]
        },
        "delete": {
          "summary": "Soft delete a country",
          "description": "soft delete a country",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country Code",
              "in": "path",
              "name": "code"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      },
      "/numbers/bulk_release": {
        "post": {
          "x-codegen-request-body-name": "numbers",
          "description": "update all the given numbers state to available",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/numbers.BulkReleaseNumberParam"
                }
              }
            },
            "description": "Numbers",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/appresponse.Response"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Update all the given numbers state to available"
        }
      },
      "/product_variant_identifiers": {
        "get": {
          "description": "list all variant_identifiers",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "filtering",
              "in": "path",
              "name": "filters",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "List all variant_identifiers"
        }
      },
      "/numbers": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "External key",
              "in": "path",
              "name": "external_key",
              "required": true
            },
            {
              "in": "path",
              "name": "test",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Test"
            },
            {
              "description": "Expire At",
              "in": "path",
              "name": "expire_at",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIConsumerNumbersResponse"
                  }
                }
              }
            }
          },
          "summary": "Numbers random order",
          "description": "numbers random order"
        }
      },
      "/iccids/{iccid}/consume": {
        "post": {
          "x-codegen-request-body-name": "external_key",
          "description": "find the number based on idf key, val in the number skus\nif not available return error",
          "parameters": [
            {
              "description": "Iccid",
              "in": "path",
              "name": "iccid",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/String"
                }
              }
            },
            "description": "external_key",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.APIProductVariantIdentifierResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Consume PVI based on ICCID number and old external key."
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebb3"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/numbers/bulk_release",
      "method": "POST"
    },
    {
      "endptRegex": "/products",
      "method": "GET"
    },
    {
      "endptRegex": "/products",
      "method": "POST"
    },
    {
      "endptRegex": "/categories/{code}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/categories/{code}",
      "method": "GET"
    },
    {
      "endptRegex": "/categories/{code}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/external_rules/{id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/external_rules/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/external_rules/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/file_uploads/product_variants",
      "method": "POST"
    },
    {
      "endptRegex": "/locations/{source_type}",
      "method": "GET"
    },
    {
      "endptRegex": "/locations/{source_type}",
      "method": "POST"
    },
    {
      "endptRegex": "/iccids/{iccid}/lock_and_consume",
      "method": "POST"
    },
    {
      "endptRegex": "/numbers/count",
      "method": "GET"
    },
    {
      "endptRegex": "/external_rule_maps/{source_type}",
      "method": "GET"
    },
    {
      "endptRegex": "/external_rule_maps/{source_type}",
      "method": "POST"
    },
    {
      "endptRegex": "/external_rules",
      "method": "GET"
    },
    {
      "endptRegex": "/external_rules",
      "method": "POST"
    },
    {
      "endptRegex": "/file_uploads/product_variant_identifiers",
      "method": "POST"
    },
    {
      "endptRegex": "/iccids/{iccid}",
      "method": "GET"
    },
    {
      "endptRegex": "/subcategories",
      "method": "GET"
    },
    {
      "endptRegex": "/subcategories",
      "method": "POST"
    },
    {
      "endptRegex": "/numbers/random_lock",
      "method": "POST"
    },
    {
      "endptRegex": "/numbers/{number}",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variant_identifiers",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variant_identifiers/{id}/unblock",
      "method": "POST"
    },
    {
      "endptRegex": "/locations/{source_type}/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/locations/{source_type}/{id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/locations/{source_type}/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/numbers/{number}/lock",
      "method": "POST"
    },
    {
      "endptRegex": "/product_variant_identifiers/{id}/block",
      "method": "POST"
    },
    {
      "endptRegex": "/subcategories/{code}",
      "method": "GET"
    },
    {
      "endptRegex": "/subcategories/{code}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/subcategories/{code}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/catalog/{categoryCode}",
      "method": "GET"
    },
    {
      "endptRegex": "/countries/{code}",
      "method": "GET"
    },
    {
      "endptRegex": "/countries/{code}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/countries/{code}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/iccids/random_lock_and_consume",
      "method": "POST"
    },
    {
      "endptRegex": "/iccids/{iccid}/consume",
      "method": "POST"
    },
    {
      "endptRegex": "/countries",
      "method": "GET"
    },
    {
      "endptRegex": "/countries",
      "method": "POST"
    },
    {
      "endptRegex": "/numbers/{number}/consume",
      "method": "POST"
    },
    {
      "endptRegex": "/product_variant_identifiers/{id}/consume",
      "method": "POST"
    },
    {
      "endptRegex": "/numbers/{number}/change_number_lock",
      "method": "POST"
    },
    {
      "endptRegex": "/product_variants",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variants",
      "method": "POST"
    },
    {
      "endptRegex": "/warehouses",
      "method": "GET"
    },
    {
      "endptRegex": "/warehouses",
      "method": "POST"
    },
    {
      "endptRegex": "/categories",
      "method": "GET"
    },
    {
      "endptRegex": "/categories",
      "method": "POST"
    },
    {
      "endptRegex": "/crons/number_sync",
      "method": "GET"
    },
    {
      "endptRegex": "/external_rule_maps/{source_type}/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/external_rule_maps/{source_type}/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/numbers",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variant_warehouses/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variant_warehouses/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/products/{code}",
      "method": "GET"
    },
    {
      "endptRegex": "/products/{code}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/products/{code}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/warehouses/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/warehouses/{id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/warehouses/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/crons/flush_numbers",
      "method": "GET"
    },
    {
      "endptRegex": "/crons/number_series_sync",
      "method": "GET"
    },
    {
      "endptRegex": "/iccids/random_lock",
      "method": "POST"
    },
    {
      "endptRegex": "/numbers/{number}/release",
      "method": "POST"
    },
    {
      "endptRegex": "/product_variants/{identifier}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/product_variants/{identifier}",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variants/{identifier}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/product_variants/{sku}/block",
      "method": "POST"
    },
    {
      "endptRegex": "/transitions/{source_type}",
      "method": "POST"
    },
    {
      "endptRegex": "/crons/telco_hierarchy_sync",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variant_identifiers/count",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variant_identifiers/{id}/direct_consume",
      "method": "POST"
    },
    {
      "endptRegex": "/product_variant_warehouses",
      "method": "GET"
    },
    {
      "endptRegex": "/product_variant_warehouses",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357867"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357867"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebb6"
  },
  "swaggerSpec": {
    "info": {
      "version": "1.0.0",
      "description": "",
      "title": "Mobile-API Backend Documentation"
    },
    "openapi": "3.0.1",
    "paths": {
      "/{version}/{country}/{locale}/{tenant}/links/:linkId": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "refNum",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "customer_account",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "linkId",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CreditCardTempLinkUpdate"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Credit Card Temp Link Update (DEPRECATED)",
          "tags": [
            "Link"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/rewards/referral/link": {
        "get": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetReferralLinkResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Referral Link",
          "tags": [
            "Rewards"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/telco/dashboard": {
        "post": {
          "tags": [
            "Layout"
          ],
          "x-codegen-request-body-name": "body",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/TelcoDashBoardRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Telco Dashboard"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/usage/plan/get/": {
        "get": {
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PlanUsage"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Get Plan Usage"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/portin/request/add/": {
        "post": {
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "donor_network_code": {
                      "type": "number"
                    },
                    "porting_number": {
                      "type": "number"
                    },
                    "start_date": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "donor_network_code",
                    "porting_number",
                    "start_date",
                    "token"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PortinAddNumberResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Add Port-in Number Request"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/details/set/": {
        "post": {
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "nickname": {
                      "type": "string"
                    },
                    "first_name": {
                      "type": "string"
                    },
                    "last_name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Profile Details",
          "tags": [
            "Profile"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/details/get/": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/ProfileDetailsResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Profile Details",
          "tags": [
            "Profile"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/rewards/promotion/:promotion_id": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetPromotionResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Promotion",
          "tags": [
            "Rewards"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "number"
              },
              "in": "path",
              "name": "promotion_id",
              "required": true
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/mktplace/list/{type}/": {
        "get": {
          "summary": "List Rewards",
          "tags": [
            "MarketPlace"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            },
            {
              "in": "path",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/MktPlaceListResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/zendeskTickets/ticketDetails?ticketId={ticketId}": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "ticketId",
              "required": true,
              "schema": {
                "type": "number"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      },
                      "error": {
                        "type": "string"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/ZendeskTicketDetails"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Help section",
          "tags": [
            "Zendesk"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/plan/rates/{iso}": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PlanListResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Plan List By ISO",
          "tags": [
            "Plan"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            },
            {
              "in": "path",
              "name": "iso",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/analytics/nps/get": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "description": "application specific response code",
                        "type": "integer"
                      },
                      "creation_date": {
                        "description": "SurveryResponse.creation_date, YYYY-MM-DD HH:mm:ss",
                        "type": "string"
                      },
                      "question": {
                        "type": "string",
                        "description": "SurveyDefinition.question"
                      },
                      "question_comment": {
                        "description": "SurveryDefintion.comment",
                        "type": "string"
                      },
                      "question_id": {
                        "description": "SurveryDefinition.id",
                        "type": "integer"
                      },
                      "trigger": {
                        "description": "SurveryDefinition.triggerType, 'app_install'|'time_based'|'port_in'",
                        "type": "string"
                      },
                      "type": {
                        "description": "net_promoter_score",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "getSurvey",
          "tags": [
            "Analytics"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/rewards/winback/promotion": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "reward_purpose",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetWinbackResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Winback Promotion",
          "tags": [
            "Rewards"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/rewards/winback/claim": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/AllocateWinbackRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/AllocateWinbackResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Allocate Winback Reward",
          "tags": [
            "Rewards"
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/partners/subscription/": {
        "get": {
          "summary": "Get Partner Subscriptions",
          "tags": [
            "Bonus"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PartnerSubscription"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/plan/get/countries/list": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CountriesListResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Available Countries List",
          "tags": [
            "Plan"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/location/get": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            },
            {
              "in": "query",
              "name": "latitude",
              "schema": {
                "type": "number"
              }
            },
            {
              "in": "query",
              "name": "longitude",
              "schema": {
                "type": "number"
              }
            },
            {
              "schema": {
                "type": "number"
              },
              "in": "query",
              "name": "radius"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetLocationResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Location",
          "tags": [
            "Promotion"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/settings/option/set": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/SettingsSetResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Settings",
          "tags": [
            "Settings"
          ],
          "x-codegen-request-body-name": "body",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/SettingsSetRequest"
                }
              }
            },
            "required": false
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/zendeskTickets/ticket": {
        "post": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CreateZendeskTicketsResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Create Zendesk Tickets",
          "tags": [
            "Zendesk"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/plan/id": {
        "post": {
          "summary": "Get Plan ID",
          "tags": [
            "Plan"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PlanIdResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/details/isBetaUser/": {
        "get": {
          "summary": "Get Beta User Details",
          "tags": [
            "Profile"
          ],
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/BetaUserDetailsResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/addon/extra/all/get": {
        "get": {
          "summary": "Get All Extra Addons",
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "calls": {
                        "swagger_ref": "#/components/schemas/ExtraAddonArray"
                      },
                      "calls_disabled": {
                        "type": "boolean"
                      },
                      "data_visible": {
                        "type": "boolean"
                      },
                      "sms_visible": {
                        "type": "boolean"
                      },
                      "sms_disabled": {
                        "type": "boolean"
                      },
                      "data_disabled_message": {
                        "type": "string"
                      },
                      "sms_disabled_message": {
                        "type": "string"
                      },
                      "calls_disabled_message": {
                        "type": "string"
                      },
                      "data": {
                        "swagger_ref": "#/components/schemas/ExtraAddonArray"
                      },
                      "data_disabled": {
                        "type": "boolean"
                      },
                      "sms": {
                        "swagger_ref": "#/components/schemas/ExtraAddonArray"
                      },
                      "calls_visible": {
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/layout/bills/info": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "outstanding_bill": {
                        "swagger_ref": "#/components/schemas/OustandingBillView"
                      },
                      "past_bills": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "payment_method": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "banner": {
                        "swagger_ref": "#/components/schemas/BillsBannerView"
                      },
                      "code": {
                        "type": "string"
                      },
                      "credit_cap": {
                        "swagger_ref": "#/components/schemas/CreditCapView"
                      },
                      "email": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Bills Section",
          "tags": [
            "Layout"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/availed/get/": {
        "get": {
          "summary": "Get Availed Bonus",
          "tags": [
            "Bonus"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/AvailedBonusResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/location/set/": {
        "post": {
          "summary": "Set Location",
          "tags": [
            "Bonus"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "bonus_id": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "bonus_id"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/location/set": {
        "post": {
          "summary": "Set Location",
          "tags": [
            "Promotion"
          ],
          "x-codegen-request-body-name": "body",
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/SetLocationRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/SetLocationResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/general/update/set/": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GeneralAddonUpdateResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Plus addon purchase",
          "tags": [
            "Telco Subscriptions"
          ],
          "x-codegen-request-body-name": "requestBody",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/GeneralAddounUpdateRequest"
                }
              }
            },
            "required": true
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/plan/{planname}/{operation}/details/get/": {
        "get": {
          "summary": "Get Upgrade Details For The Plan",
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "planname",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "operation"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PlanChangeDetails"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/details": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetDashBoardPromosResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Promotions Details",
          "tags": [
            "Promotion"
          ],
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/addon/topup/all/get/": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/TopUpAddon"
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get All Top-up Addons",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/links/verify/profile/:type": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/html": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "successful operation"
            },
            "500": {
              "content": {
                "text/html": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Verify Profile",
          "tags": [
            "Link"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/registration/deactivate": {
        "post": {
          "responses": {
            "200": {
              "content": {}
            }
          },
          "summary": "Customer Logout",
          "tags": [
            "User Management"
          ],
          "x-codegen-request-body-name": "uuid",
          "parameters": [
            {
              "in": "path",
              "name": "user_key",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "signature",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "required": true
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/address/billing/set/": {
        "post": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "floor_no": {
                      "type": "string"
                    },
                    "hse_blk_tower": {
                      "type": "string"
                    },
                    "street_building_name": {
                      "type": "string"
                    },
                    "token": {
                      "type": "string"
                    },
                    "unit_no": {
                      "type": "string"
                    },
                    "zip_code": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Billing Address",
          "tags": [
            "Profile"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/code/set": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/SetCodeRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/SetCodeResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Code",
          "tags": [
            "Promotion"
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/image/set/": {
        "post": {
          "summary": "Set Profile Image",
          "tags": [
            "Profile"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "content": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/billing/payments/autodebit": {
        "put": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "past_bills": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "payment_method": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "banner": {
                        "swagger_ref": "#/components/schemas/BillsBannerView"
                      },
                      "credit_cap": {
                        "swagger_ref": "#/components/schemas/CreditCapView"
                      },
                      "email": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "outstanding_bill": {
                        "swagger_ref": "#/components/schemas/OustandingBillView"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Email invoice to registered email id",
          "tags": [
            "Bills Section"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/location/promo/dialog/get": {
        "get": {
          "tags": [
            "Promotion"
          ],
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "number"
              },
              "in": "query",
              "name": "promoId"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetLocationPromoDialogResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Get Location Promotion Dialog"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/location/promo/set": {
        "post": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/SetPromotionResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Promotion",
          "tags": [
            "Promotion"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/app/issue/{type}/": {
        "post": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "App Issue Data",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/layout/bonus/info": {
        "post": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "bonus": {
                        "swagger_ref": "#/components/schemas/YourReferralInfo"
                      },
                      "code": {
                        "type": "string"
                      },
                      "referral": {
                        "swagger_ref": "#/components/schemas/BaseReferralInfo"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Bonus Section",
          "tags": [
            "Layout"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/location/nearby_branches": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "in": "query",
              "name": "latitude",
              "schema": {
                "type": "number"
              }
            },
            {
              "schema": {
                "type": "number"
              },
              "in": "query",
              "name": "longitude"
            },
            {
              "schema": {
                "type": "number"
              },
              "in": "query",
              "name": "providerId"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetNearbyBranchResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Nearby Branch",
          "tags": [
            "Promotion"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/dashboard": {
        "get": {
          "summary": "Get Dashboard Promotions",
          "tags": [
            "Promotion"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetDashBoardPromosResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notification/history/get/": {
        "get": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/NotificationHistoryResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Notification History",
          "tags": [
            "Notification"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/terminate/immediate": {
        "post": {
          "summary": "Terminate account effectively",
          "tags": [
            "Terminate account effectively."
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "BSSMW failed to terminate."
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/referral/code/get/": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/ReferralCodeView"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Referral Code",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/usage/data/get/": {
        "get": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/DataUsage"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Data Usage",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/billing/bills/resend": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "credit_cap": {
                        "swagger_ref": "#/components/schemas/CreditCapView"
                      },
                      "email": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "outstanding_bill": {
                        "swagger_ref": "#/components/schemas/OustandingBillView"
                      },
                      "past_bills": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "payment_method": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "banner": {
                        "swagger_ref": "#/components/schemas/BillsBannerView"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Email invoice to registered email id",
          "tags": [
            "Bills Section"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/registration/register": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "description": "application response code",
                        "type": "integer"
                      },
                      "hash": {
                        "type": "string",
                        "description": "user service generated acknowledgment when requested for login otp"
                      },
                      "prefix": {
                        "type": "string",
                        "description": "63"
                      },
                      "user_type": {
                        "type": "string",
                        "description": "base plan of the customer"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Customer Registration",
          "tags": [
            "User Management"
          ],
          "x-codegen-request-body-name": "body",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "app_type",
                    "country_code",
                    "device_id",
                    "phone_number",
                    "version_key"
                  ],
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "description": "alphanumeric string request identifier by client",
                      "type": "string"
                    },
                    "version_key": {
                      "type": "string"
                    },
                    "app_type": {
                      "type": "string"
                    },
                    "callblock": {
                      "type": "string"
                    },
                    "country_code": {
                      "description": "ISO code",
                      "type": "string"
                    },
                    "device_id": {
                      "type": "string",
                      "description": "application device identifier"
                    },
                    "phone_number": {
                      "description": "customers' login identifier",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "required": true
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/addon/extra/update/batch/set/": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/ExtraAddonBatchSetRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "swagger_ref": "#/definitions/ExtraAddonBatchSetResponse"
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Extra Addon Batch Set",
          "tags": [
            "Telco Subscriptions"
          ],
          "x-codegen-request-body-name": "requestBody",
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/billing/bills/get": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "payment_method": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "banner": {
                        "swagger_ref": "#/components/schemas/BillsBannerView"
                      },
                      "credit_cap": {
                        "swagger_ref": "#/components/schemas/CreditCapView"
                      },
                      "email": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "outstanding_bill": {
                        "swagger_ref": "#/components/schemas/OustandingBillView"
                      },
                      "past_bills": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Customer invoices list",
          "tags": [
            "Bills Section"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/verify/{type}/": {
        "get": {
          "tags": [
            "Profile"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "identification type (id, nric or dob)",
              "in": "path",
              "name": "type"
            },
            {
              "description": "required if type=dob",
              "in": "query",
              "name": "year_of_birth",
              "schema": {
                "type": "integer"
              }
            },
            {
              "schema": {
                "type": "integer"
              },
              "description": "required if type=dob",
              "in": "query",
              "name": "month_of_birth"
            },
            {
              "description": "required if type=dob",
              "in": "query",
              "name": "day_of_birth",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/IdentificationVerificationResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Verify Identity"
        },
        "post": {
          "requestBody": {
            "description": "required if type=dob",
            "required": false,
            "content": {
              "*/*": {}
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/IdentificationVerificationResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Verify Identity",
          "tags": [
            "Profile"
          ],
          "x-codegen-request-body-name": "day_of_birth",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "identification type (id, nric or dob)",
              "in": "path",
              "name": "type",
              "required": true
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/layout/profile/info": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "payment_details": {
                        "swagger_ref": "#/components/schemas/ProfilePaymentDetails"
                      },
                      "personal_details": {
                        "swagger_ref": "#/components/schemas/ProfilePersonalDetails"
                      },
                      "purchase_device": {
                        "swagger_ref": "#/components/schemas/ProfilePurchaseDeviceDetails"
                      },
                      "billing_address": {
                        "swagger_ref": "#/components/schemas/ProfileBillingAddressDetails"
                      },
                      "code": {
                        "type": "string"
                      },
                      "insurance_details": {
                        "swagger_ref": "#/components/schemas/ProfileInsuranceDetails"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Profile Section",
          "tags": [
            "Layout"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/partners/subscription/": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PartnerSubscription"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Get Partner Subscriptions",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/notification/readstatus/update/set/": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "ids": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ids"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Notification Read Status",
          "tags": [
            "Notification"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/addon/general/all/get/": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/GeneralAddon"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get All General Addons",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/telco/profile": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/ProfileDetailsResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Telco Profile Details",
          "tags": [
            "Layout"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/billing/usage/get": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "email": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "outstanding_bill": {
                        "swagger_ref": "#/components/schemas/OustandingBillView"
                      },
                      "past_bills": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "payment_method": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "banner": {
                        "swagger_ref": "#/components/schemas/BillsBannerView"
                      },
                      "credit_cap": {
                        "swagger_ref": "#/components/schemas/CreditCapView"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Customers estimated upcoming bill based on current bill cycle usage",
          "tags": [
            "Bills Section"
          ],
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/insurance/{policyId}/products": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "policyId",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Policy Product Details",
          "tags": [
            "Insurance"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/plan/details/get/": {
        "get": {
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PlanDetails"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Plan Details"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/history/get/": {
        "get": {
          "tags": [
            "Bonus"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/BonusHistoryResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Bonus History"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/portin/request/cancel/": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "porting_number": {
                      "type": "number"
                    },
                    "token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "porting_number",
                    "token"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PortinRequestCancelResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Cancel Port-in Number Request",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/billing/bills/download/{billId}": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "payment_method": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "banner": {
                        "swagger_ref": "#/components/schemas/BillsBannerView"
                      },
                      "credit_cap": {
                        "swagger_ref": "#/components/schemas/CreditCapView"
                      },
                      "email": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "outstanding_bill": {
                        "swagger_ref": "#/components/schemas/OustandingBillView"
                      },
                      "past_bills": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Invoice download",
          "tags": [
            "Bills Section"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/topup/update/set/": {
        "post": {
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "payment": {
                      "type": "string"
                    },
                    "action": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "action",
                    "id",
                    "payment"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Boost purchase"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/rewards/redeem/:voucher_id": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/RedeemVoucherResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Redeem Voucher",
          "tags": [
            "Rewards"
          ],
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "in": "path",
              "name": "voucher_id",
              "required": true,
              "schema": {
                "type": "number"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/rewards/vouchers": {
        "get": {
          "summary": "Get Vouchers",
          "tags": [
            "Rewards"
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetVouchersResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/doc/{fileType}/set/": {
        "post": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "in": "path",
              "name": "fileType",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "content": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Profile Doc",
          "tags": [
            "Profile"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/telco/plan/offerings": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/ProfileDetailsResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Telco Profile Details",
          "tags": [
            "Layout"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/registration/auth": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "integer"
                      },
                      "firstReg": {
                        "type": "string"
                      },
                      "haptik_pass": {
                        "type": "string"
                      },
                      "pass": {
                        "type": "string"
                      },
                      "session_key": {
                        "type": "string"
                      },
                      "user_key": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Customer Authentication",
          "tags": [
            "User Management"
          ],
          "x-codegen-request-body-name": "body",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "hash",
                    "uuid"
                  ],
                  "type": "object",
                  "properties": {
                    "phone_number": {
                      "type": "string"
                    },
                    "pin_code": {
                      "type": "string"
                    },
                    "country_code": {
                      "type": "string"
                    },
                    "device_id": {
                      "type": "string"
                    },
                    "hash": {
                      "type": "string"
                    },
                    "iso_code": {
                      "description": "iso code",
                      "type": "string"
                    },
                    "uuid": {
                      "type": "string"
                    },
                    "version_key": {
                      "type": "string"
                    },
                    "app_type": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "required": true
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/cap/roaming/set/": {
        "post": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "limit": {
                      "type": "number"
                    },
                    "token": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "limit",
                    "token"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Roaming Cap",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/image/del/": {
        "post": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Delete Profile Image",
          "tags": [
            "Profile"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/plan/{planname}/{operation}/": {
        "post": {
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "start_date": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "start_date"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/ChangePlanResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Add Port-in Number Request",
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "name": "planname",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/profile/boosts/get/": {
        "get": {
          "summary": "Get Profile Boosts",
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/ProfileBoost"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/settings/support/details/get": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/SupportGetResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Support Details",
          "tags": [
            "Settings"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/creditcard/update/": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "text/html": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "HTML response - redirection to the credit card update page"
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "text/html": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Get Credit Card Update Page",
          "tags": [
            "Profile"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/usage/data/details/get/": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/DataUsage"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Data Usage",
          "tags": [
            "Telco Subscriptions"
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/special/get/{addon_type}/": {
        "get": {
          "tags": [
            "Bonus"
          ],
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "addon_type",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/SpecialAddonResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Special Addon"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/billing/bills/payment/set": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "banner": {
                        "swagger_ref": "#/components/schemas/BillsBannerView"
                      },
                      "credit_cap": {
                        "swagger_ref": "#/components/schemas/CreditCapView"
                      },
                      "email": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "outstanding_bill": {
                        "swagger_ref": "#/components/schemas/OustandingBillView"
                      },
                      "past_bills": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      },
                      "payment_method": {
                        "swagger_ref": "#/components/schemas/GenericLayoutView"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Invoice payment via app",
          "tags": [
            "Bills Section"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/registration/refresh": {
        "post": {
          "x-codegen-request-body-name": "body",
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "header",
              "name": "X-AUTH"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "user_key"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "integer"
                      },
                      "session_key": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Session Refresh",
          "tags": [
            "User Management"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/zendeskTickets": {
        "get": {
          "summary": "Get Zendesk Tickets",
          "tags": [
            "Zendesk"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/ZendeskTicketsResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/insurance/policies": {
        "get": {
          "tags": [
            "Insurance"
          ],
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Policies"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/zendeskTickets/isValidTime": {
        "get": {
          "tags": [
            "Zendesk"
          ],
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/ZendeskTicketsIsValidTimeResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Is Zendesk Tickets Valid Time"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/links/update/creditcard/status/:type/:refNum/:customer_account/:linkId": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CreditCardStatusUpdate"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Credit Card Status Update",
          "tags": [
            "Link"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "refNum",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "customer_account",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "linkId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/profile/email/set/": {
        "post": {
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "email": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Set Email Address",
          "tags": [
            "Profile"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/promotions/payment/url/get": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/GetPaymentURLResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Payment URL",
          "tags": [
            "Promotion"
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/analytics/nps/set": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "local"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/AnalyticsSetSurveyFields"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "creation_date": {
                        "description": "YYYY-MM-DD HH:mm:ss",
                        "type": "string"
                      },
                      "question": {
                        "type": "string"
                      },
                      "question_comment": {
                        "type": "string"
                      },
                      "question_id": {
                        "type": "integer"
                      },
                      "trigger": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "code": {
                        "description": "application specific response code",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "content": {},
              "description": "Invalid/Missing parameters in the request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "setSurvey",
          "tags": [
            "Analytics"
          ],
          "x-codegen-request-body-name": "fields"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/insurance/:policyId/policies": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "policyId",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Policy Details",
          "tags": [
            "Insurance"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/insurance/{productId}/purchase": {
        "post": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "productId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Purchase Product",
          "tags": [
            "Insurance"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/available/use/": {
        "post": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "bonus_id": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "bonus_id"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Use Available Bonus",
          "tags": [
            "Bonus"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/account/portin/request/active/": {
        "get": {
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/PortinRequestActive"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Active Port-in Requests",
          "tags": [
            "Telco Subscriptions"
          ]
        }
      },
      "ChangePlanResponse": {},
      "/{version}/{country}/{locale}/{tenant}/settings/option/list/get": {
        "get": {
          "tags": [
            "Settings"
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "option_id",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "uuid",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "app_type",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/SettingsItem"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Settings List"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/leaderboard/get/": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/LeaderBoardResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Bonus Leader Board",
          "tags": [
            "Bonus"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/telco/settings": {
        "get": {
          "tags": [
            "Layout"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/GetSettingsResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Telco Settings"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/wallet/balance": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/WalletBalanceResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Wallet Balance",
          "tags": [
            "Wallet"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/wallet/ledger": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/WalletLedgerResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Get Wallet Ledger",
          "tags": [
            "Wallet"
          ],
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/addon/bonus/available/get/": {
        "get": {
          "tags": [
            "Bonus"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/AvailableBonusResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Invalid/Missing parameters in the request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "summary": "Get Available Bonus"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/registration/{type}/set": {
        "post": {
          "summary": "Push Set",
          "tags": [
            "User Management"
          ],
          "x-codegen-request-body-name": "body",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "locale"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "type",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/PushRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "code": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/telco/dashboard/{card_id}/{operation}": {
        "post": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path"
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "card_id"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "path",
              "name": "operation",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "request": {
                        "swagger_ref": "#/components/schemas/DashBoardCardOperationApiDetails"
                      },
                      "statusCode": {
                        "type": "number"
                      },
                      "body": {
                        "type": "string"
                      },
                      "headers": {
                        "swagger_ref": "#/components/schemas/DashBoardCardOperationHeaderDetails"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Invalid/Missing parameters in the request"
            }
          },
          "summary": "Perform operation on dashboard cards",
          "tags": [
            "Layout"
          ]
        }
      }
    },
    "servers": [
      {
        "url": "https://http://qsg-mobkdapp.circles.asia:6080"
      },
      {
        "url": "http://http://qsg-mobkdapp.circles.asia:6080"
      }
    ],
    "tags": [],
    "components": {
      "schemas": {
        "SetCodeRequest": {
          "properties": {
            "code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "BillsBannerView": {
          "type": "object",
          "properties": {
            "button": {
              "properties": {
                "title": {
                  "type": "string"
                },
                "action": {
                  "swagger_ref": "#/components/schemas/Action"
                }
              },
              "type": "object"
            },
            "title": {
              "type": "string"
            }
          }
        },
        "UpdateSettingsResponse": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "value_type": {
              "type": "string"
            },
            "option_id": {
              "type": "string"
            }
          }
        },
        "ProfilePaymentDetails": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "can_edit": {
                  "type": "string"
                },
                "card_type": {
                  "type": "string"
                },
                "icon_url": {
                  "type": "string"
                },
                "last_four_digits": {
                  "type": "string"
                }
              }
            },
            "header": {
              "type": "string"
            },
            "order": {
              "type": "integer"
            }
          }
        },
        "ReferralCodeView": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "data": {
              "properties": {
                "discountAmount": {
                  "type": "number"
                },
                "waiverJoineeCents": {
                  "type": "number"
                },
                "waiverReferrerCents": {
                  "type": "number"
                },
                "extraReferralBonusKb": {
                  "type": "number"
                },
                "firstBonus": {
                  "properties": {
                    "bonusKb": {
                      "type": "number"
                    },
                    "bonusRecurrent": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "bonusKb": {
                  "type": "number"
                },
                "bonusRecurrent": {
                  "type": "boolean"
                },
                "code": {
                  "type": "string"
                },
                "extraReferrerMonths": {
                  "type": "integer"
                },
                "extraJoineeBonusKb": {
                  "type": "number"
                },
                "extraJoineeMonths": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "share": {
              "properties": {
                "permission_popup_description": {
                  "type": "string"
                },
                "permission_popup_title": {
                  "type": "string"
                },
                "remind_body": {
                  "type": "string"
                },
                "banner_text": {
                  "type": "string"
                },
                "banner_title": {
                  "type": "string"
                },
                "facebook_body": {
                  "type": "string"
                },
                "facebook_title": {
                  "type": "string"
                },
                "message_body": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PlanDetails": {
          "properties": {
            "bill": {
              "properties": {
                "due_by_date": {
                  "type": "string"
                },
                "price": {
                  "swagger_ref": "#/components/schemas/SimplePrice"
                }
              },
              "type": "object"
            },
            "billing_cycle": {
              "properties": {
                "end_date": {
                  "type": "string"
                },
                "start_date": {
                  "type": "string"
                },
                "current_date": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "devices": {
              "type": "array",
              "items": {
                "properties": {},
                "type": "object"
              }
            },
            "addons_subscribed": {
              "properties": {
                "general": {
                  "items": {
                    "swagger_ref": "#/components/schemas/PlanDetailsGeneralAddon"
                  },
                  "type": "array"
                },
                "topup": {
                  "type": "array",
                  "items": {
                    "swagger_ref": "#/components/schemas/TopupDetail"
                  }
                },
                "bonus": {
                  "properties": {
                    "total": {
                      "type": "object",
                      "properties": {
                        "used": {
                          "type": "number"
                        },
                        "left": {
                          "type": "number"
                        },
                        "section": {
                          "type": "string"
                        },
                        "unit": {
                          "type": "string"
                        }
                      }
                    },
                    "calls": {
                      "items": {
                        "swagger_ref": "#/components/schemas/PlanDetailsExtraAddon"
                      },
                      "type": "array"
                    },
                    "data": {
                      "items": {
                        "swagger_ref": "#/components/schemas/PlanDetailsExtraAddon"
                      },
                      "type": "array"
                    },
                    "sms": {
                      "type": "array",
                      "items": {
                        "swagger_ref": "#/components/schemas/PlanDetailsExtraAddon"
                      }
                    }
                  },
                  "type": "object"
                },
                "extra": {
                  "properties": {
                    "sms": {
                      "swagger_ref": "#/components/schemas/PlanDetailsExtraAddon"
                    },
                    "data": {
                      "swagger_ref": "#/components/schemas/PlanDetailsExtraAddon"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "basic_plan": {
              "properties": {
                "unlimited_calls_incoming": {
                  "type": "boolean"
                },
                "unlimited_data_boost": {
                  "properties": {
                    "expiry_date": {
                      "type": "string"
                    },
                    "start_date": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "price": {
                  "swagger_ref": "#/components/schemas/SimplePrice"
                },
                "sms": {
                  "swagger_ref": "#/components/schemas/SimpleAmount"
                },
                "unlimited_calls_outgoing": {
                  "type": "boolean"
                },
                "data": {
                  "swagger_ref": "#/components/schemas/SimpleAmount"
                },
                "calls": {
                  "swagger_ref": "#/components/schemas/SimpleAmount"
                },
                "components_changed": {
                  "type": "boolean"
                },
                "unlimited_data": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PlanListResponse": {
          "properties": {
            "idd021": {
              "properties": {
                "subtitle": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "list": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "rate_list": {
                        "items": {
                          "swagger_ref": "#/components/schemas/RateItem"
                        },
                        "type": "array"
                      },
                      "title": {
                        "type": "string"
                      },
                      "prefix": {
                        "type": "number"
                      }
                    }
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "roaming": {
              "properties": {
                "list": {
                  "items": {
                    "properties": {
                      "calls": {
                        "type": "object",
                        "properties": {
                          "rate_list": {
                            "items": {
                              "swagger_ref": "#/components/schemas/RateItem"
                            },
                            "type": "array"
                          },
                          "title": {
                            "type": "string"
                          }
                        }
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "price": {
                            "swagger_ref": "#/components/schemas/Price"
                          },
                          "title": {
                            "type": "string"
                          }
                        }
                      },
                      "data_roamer": {
                        "properties": {
                          "mccmnc": {
                            "items": {
                              "swagger_ref": "#/components/schemas/MccMnc"
                            },
                            "type": "array"
                          },
                          "preferred": {
                            "type": "string"
                          },
                          "price": {
                            "swagger_ref": "#/components/schemas/Price"
                          },
                          "subtitle": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "prefix": {
                        "type": "number"
                      },
                      "sms": {
                        "properties": {
                          "rate_list": {
                            "type": "array",
                            "items": {
                              "swagger_ref": "#/components/schemas/RateItem"
                            }
                          },
                          "title": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "title": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardImageBanners": {
          "properties": {
            "summary": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "object"
        },
        "PortinRequestCancelResponse": {
          "properties": {
            "promotion": {
              "properties": {
                "result": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "update": {
              "type": "boolean"
            },
            "deactivation": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "notification": {
              "properties": {
                "result": {
                  "properties": {
                    "variables": {
                      "properties": {
                        "number_selected": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "number": {
                          "type": "string"
                        },
                        "start_date": {
                          "type": "string"
                        },
                        "priority": {
                          "type": "string"
                        },
                        "activity": {
                          "type": "string"
                        },
                        "prefix": {
                          "type": "string"
                        },
                        "teamID": {
                          "type": "string"
                        },
                        "notificationKey": {
                          "type": "string"
                        },
                        "reason": {
                          "type": "string"
                        },
                        "donor_network": {
                          "type": "string"
                        },
                        "porting_number": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "activity": {
                      "type": "string"
                    },
                    "result": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PlanUsage": {
          "properties": {
            "other": {
              "properties": {
                "basic": {
                  "properties": {
                    "sms": {
                      "properties": {
                        "unit_type": {
                          "type": "string"
                        },
                        "used": {
                          "type": "number"
                        },
                        "base_left": {
                          "type": "number"
                        },
                        "base_used": {
                          "type": "number"
                        },
                        "extra_left": {
                          "type": "number"
                        },
                        "extra_used": {
                          "type": "number"
                        },
                        "left": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "calls": {
                      "properties": {
                        "prorated_mins": {
                          "type": "number"
                        },
                        "unit_type": {
                          "type": "string"
                        },
                        "prorated_mins_left": {
                          "type": "number"
                        },
                        "used": {
                          "type": "number"
                        },
                        "base_left": {
                          "type": "number"
                        },
                        "left": {
                          "type": "number"
                        },
                        "base_used": {
                          "type": "number"
                        },
                        "extra_left": {
                          "type": "number"
                        },
                        "extra_used": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "boost": {
                  "properties": {
                    "calls": {
                      "properties": {
                        "left": {
                          "type": "number"
                        },
                        "unit_type": {
                          "type": "string"
                        },
                        "used": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "sms": {
                      "properties": {
                        "left": {
                          "type": "number"
                        },
                        "unit_type": {
                          "type": "string"
                        },
                        "used": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "pay_as_you_go": {
                  "properties": {
                    "sms_idd": {
                      "swagger_ref": "#/components/schemas/IDDSMS"
                    },
                    "sms_roam": {
                      "swagger_ref": "#/components/schemas/RoamingSMS"
                    },
                    "calls": {
                      "type": "object",
                      "properties": {
                        "inciming": {
                          "swagger_ref": "#/components/schemas/PaygUsageView"
                        },
                        "outgoing": {
                          "swagger_ref": "#/components/schemas/PaygUsageView"
                        },
                        "total": {
                          "swagger_ref": "#/components/schemas/TotalWithPerUnit"
                        },
                        "visible": {
                          "type": "boolean"
                        }
                      }
                    },
                    "calls_idd": {
                      "swagger_ref": "#/components/schemas/IDDCalls"
                    },
                    "calls_roam": {
                      "swagger_ref": "#/components/schemas/RoamingCalls"
                    },
                    "data_roam": {
                      "swagger_ref": "#/components/schemas/RoamingData"
                    },
                    "sms": {
                      "properties": {
                        "total": {
                          "swagger_ref": "#/components/schemas/TotalWithPerUnit"
                        },
                        "visible": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "roamingIdd": {
              "properties": {
                "type": {
                  "type": "string"
                },
                "boost": {
                  "properties": {
                    "data_roam": {
                      "items": {
                        "properties": {},
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "payg": {
                  "properties": {
                    "calls_roam": {
                      "swagger_ref": "#/components/schemas/RoamingCalls"
                    },
                    "data_roam": {
                      "swagger_ref": "#/components/schemas/RoamingData"
                    },
                    "sms_idd": {
                      "swagger_ref": "#/components/schemas/IDDSMS"
                    },
                    "sms_roam": {
                      "swagger_ref": "#/components/schemas/RoamingSMS"
                    },
                    "calls_idd": {
                      "swagger_ref": "#/components/schemas/IDDCalls"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "data": {
              "swagger_ref": "#/components/schemas/DataUsage"
            }
          },
          "type": "object"
        },
        "SimpleAmount": {
          "properties": {
            "unit": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "GeneralAddonUnSubscribed": {
          "properties": {
            "responseMessage": {
              "type": "string"
            },
            "unSubScribeAddOnPlans": {
              "items": {
                "type": "object",
                "properties": {
                  "packageHistoryId": {
                    "type": "string"
                  },
                  "unSubscribedAddOnPlanName": {
                    "type": "string"
                  }
                }
              },
              "type": "array"
            },
            "responseCode": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "GeneralAddonSubscribed": {
          "properties": {
            "packageHistoryId": {
              "type": "string"
            },
            "successAddOnPlanName": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "RoamingCalls": {
          "properties": {
            "outgoing": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            },
            "total": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            },
            "visible": {
              "type": "boolean"
            },
            "inciming": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            }
          },
          "type": "object"
        },
        "PlanDetailsExtraAddon": {
          "properties": {
            "unit": {
              "type": "string"
            },
            "value": {
              "type": "number"
            },
            "date": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "payment": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/SimplePrice"
            },
            "type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "CreditCardStatusUpdate": {
          "properties": {
            "paytype": {
              "type": "string"
            },
            "tm_cc_last4_digit": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "VerifyProfileResponse": {
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "SetLocationResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "number"
            }
          }
        },
        "WalletLedgerResponse": {
          "properties": {
            "balance": {
              "properties": {
                "available_bal": {
                  "type": "number"
                },
                "currency_symbol": {
                  "type": "string"
                },
                "expired_bal": {
                  "type": "number"
                },
                "redeemable_bal": {
                  "type": "number"
                },
                "wallet_type": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "customer_id": {
              "type": "string"
            },
            "wallet_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardBoost": {
          "properties": {
            "summary": {
              "properties": {
                "boosts": {
                  "items": {
                    "properties": {
                      "enabled": {
                        "type": "boolean"
                      },
                      "id": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "order_id": {
                        "type": "integer"
                      },
                      "popup_subtitle": {
                        "type": "string"
                      },
                      "popup_description": {
                        "type": "string"
                      },
                      "subtitle": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "popup_title": {
                        "type": "string"
                      },
                      "price": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "SubDetails": {
          "properties": {
            "effect": {
              "type": "number"
            },
            "product_id": {
              "type": "string"
            },
            "recurrent": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "BaseError": {
          "properties": {
            "error": {
              "type": "object",
              "properties": {
                "action": {
                  "swagger_ref": "#/components/schemas/Action"
                },
                "description": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          },
          "type": "object"
        },
        "TelcoDashBoarBirthdayBonus": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "NotificationHistoryResponse": {
          "properties": {
            "id": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "read": {
              "type": "boolean"
            },
            "title": {
              "type": "string"
            },
            "date": {
              "type": "string"
            },
            "mime_type": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "anchor": {
              "type": "string"
            },
            "content": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "AvailedBonusResponse": {
          "properties": {
            "bonus_banner_data": {
              "type": "object",
              "properties": {
                "earned_data": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "unit": {
                      "type": "string"
                    }
                  }
                },
                "joined_date": {
                  "type": "string"
                }
              }
            }
          },
          "type": "object"
        },
        "StringLayout": {
          "properties": {
            "meta": {
              "swagger_ref": "#/components/schemas/Meta"
            },
            "value": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "ApplicationCode": {
          "description": "application specific response code",
          "title": "code",
          "type": "string"
        },
        "DashBoardCardOperationHeaderDetails": {
          "type": "object",
          "properties": {
            "x-powered-by": {
              "type": "string"
            },
            "connection": {
              "type": "string"
            },
            "content-length": {
              "type": "string"
            },
            "content-type": {
              "type": "string"
            },
            "date": {
              "type": "string"
            },
            "etag": {
              "type": "string"
            }
          }
        },
        "DataUsage": {
          "properties": {
            "type": {
              "type": "string"
            },
            "basic": {
              "swagger_ref": "#/components/schemas/UsageView"
            },
            "bonus": {
              "properties": {
                "left": {
                  "type": "number"
                },
                "section": {
                  "type": "string"
                },
                "unit": {
                  "type": "string"
                },
                "used": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            "boost": {
              "properties": {
                "left": {
                  "type": "number"
                },
                "section": {
                  "type": "string"
                },
                "section_min_value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string"
                },
                "used": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            "extra": {
              "swagger_ref": "#/components/schemas/UsageView"
            },
            "plus": {
              "swagger_ref": "#/components/schemas/UsageView"
            },
            "promotion_text": {
              "properties": {
                "line1": {
                  "type": "string"
                },
                "line2": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "GetReferralLinkResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "result": {
              "properties": {
                "referral_banner": {
                  "type": "string"
                },
                "referral_text": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardRequest": {
          "properties": {
            "plan_renewal": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "plus": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "base": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "outstanding_bill": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "plan_duration": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "image_banners": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "rating": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "credit_cap_bill": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "golden_circle": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "plus_options": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "bill": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "roaming_card": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "birthday_bonus": {
              "swagger_ref": "#/components/schemas/BaseCard"
            },
            "others": {
              "swagger_ref": "#/components/schemas/BaseCard"
            }
          },
          "type": "object"
        },
        "UpdateSettingsRequest": {
          "properties": {
            "option_id": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "value_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "ZendeskTicketResult": {
          "properties": {
            "satisfaction_probability": {
              "type": "number"
            },
            "organization_id": {
              "type": "number"
            },
            "group_id": {
              "type": "number"
            },
            "created_at": {
              "type": "string"
            },
            "collaborator_ids": {
              "type": "string"
            },
            "external_id": {
              "type": "number"
            },
            "has_incidents": {
              "type": "boolean"
            },
            "requester_id": {
              "type": "number"
            },
            "url": {
              "type": "string"
            },
            "allow_channelback": {
              "type": "boolean"
            },
            "forum_topic_id": {
              "type": "string"
            },
            "allow_attachments": {
              "type": "boolean"
            },
            "description": {
              "type": "string"
            },
            "email_cc_ids": {
              "type": "string"
            },
            "ticket_form_id": {
              "type": "number"
            },
            "sharing_agreement_ids": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "followup_ids": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "result_type": {
              "type": "string"
            },
            "brand_id": {
              "type": "number"
            },
            "custom_fields": {
              "items": {
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "due_at": {
              "type": "string"
            },
            "via": {
              "properties": {
                "source": {
                  "properties": {
                    "from": {
                      "type": "string"
                    },
                    "rel": {
                      "type": "string"
                    },
                    "to": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "channel": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "satisfaction_rating": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "string"
                }
              }
            },
            "recipient": {
              "type": "string"
            },
            "assignee_id": {
              "type": "number"
            },
            "raw_subject": {
              "type": "string"
            },
            "id": {
              "type": "number"
            },
            "problem_id": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            },
            "priority": {
              "type": "string"
            },
            "is_public": {
              "type": "boolean"
            },
            "fields": {
              "type": "array",
              "items": {
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "follower_ids": {
              "type": "string"
            },
            "submitter_id": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "GetDashBoardPromosResponse": {
          "properties": {
            "name": {
              "type": "string"
            },
            "order_nb": {
              "type": "string"
            },
            "popup_image_url": {
              "type": "string"
            },
            "supported_beta": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "bg_url": {
              "type": "string"
            },
            "deeplink": {
              "properties": {
                "android": {
                  "properties": {
                    "app_link": {
                      "type": "string"
                    },
                    "store_link": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "ios": {
                  "type": "object",
                  "properties": {
                    "store_link": {
                      "type": "string"
                    },
                    "app_link": {
                      "type": "string"
                    }
                  }
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PaygUsageView": {
          "properties": {
            "price_total": {
              "swagger_ref": "#/components/schemas/SimplePrice"
            },
            "unit_type": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "GetWinbackResponse": {
          "properties": {
            "result": {
              "properties": {
                "header": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "RedeemVoucherResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "number"
            }
          }
        },
        "IdentificationVerificationResponse": {
          "properties": {
            "dob_valid": {
              "type": "boolean"
            },
            "valid": {
              "type": "boolean"
            },
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "IDDSMS": {
          "properties": {
            "total": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            },
            "visible": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "TotalWithPerUnit": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            },
            "price_per_unit": {
              "swagger_ref": "#/components/schemas/SimplePrice"
            },
            "price_total": {
              "swagger_ref": "#/components/schemas/SimplePrice"
            },
            "unit_type": {
              "type": "string"
            }
          }
        },
        "YourReferralInfo": {
          "properties": {
            "header": {
              "type": "string"
            },
            "order": {
              "type": "integer"
            },
            "fill_card": {
              "properties": {
                "list": {
                  "items": {
                    "properties": {
                      "details": {
                        "swagger_ref": "#/components/schemas/YourReferrals"
                      },
                      "subtitle": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "SupportGetResponse": {
          "type": "object",
          "properties": {
            "whatsapp": {
              "type": "string"
            },
            "code": {
              "type": "number"
            },
            "email": {
              "type": "string"
            },
            "faq_category": {
              "type": "string"
            },
            "faq_section": {
              "type": "string"
            }
          }
        },
        "SimplePrice": {
          "properties": {
            "prefix": {
              "type": "string"
            },
            "value": {
              "type": "number"
            },
            "postfix": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "YourReferrals": {
          "type": "object",
          "properties": {
            "list": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string"
                  },
                  "subtitle": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "SettingsItem": {
          "properties": {
            "value_type": {
              "type": "string"
            },
            "option_id": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "RoamingSMS": {
          "properties": {
            "total": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            },
            "visible": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "BonusEntry": {
          "properties": {
            "added_date": {
              "type": "string"
            },
            "id": {
              "type": "number"
            },
            "product_id": {
              "type": "string"
            },
            "product_kb": {
              "type": "number"
            },
            "product_name": {
              "type": "string"
            },
            "valid_until": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "AvailableBonusResponse": {
          "properties": {
            "birthday": {
              "items": {
                "swagger_ref": "#/components/schemas/BonusEntry"
              },
              "type": "array"
            },
            "surprise": {
              "items": {
                "swagger_ref": "#/components/schemas/BonusEntry"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "PartnerSubscription": {
          "properties": {
            "status": {
              "type": "string"
            },
            "statusCode": {
              "type": "integer"
            },
            "code": {
              "type": "integer"
            },
            "result": {
              "items": {
                "properties": {},
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "LeaderBoardListItem": {
          "properties": {
            "bonusDataGb": {
              "type": "number"
            },
            "peopleCount": {
              "type": "integer"
            },
            "position": {
              "type": "integer"
            },
            "serviceInstanceNumbers": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "users": {
              "items": {
                "properties": {
                  "picture": {
                    "type": "string"
                  },
                  "serviceInstanceNumber": {
                    "type": "string"
                  },
                  "nickname": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ProfileInsuranceDetails": {
          "properties": {
            "header": {
              "type": "string"
            },
            "order": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TopupDetail": {
          "properties": {
            "payment": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/SimplePrice"
            },
            "type": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "value": {
              "type": "number"
            },
            "date": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "order_id": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "PlanIdResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "number"
            },
            "group": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "LeaderBoardResponse": {
          "type": "object",
          "properties": {
            "leaderboard": {
              "properties": {
                "goldenCircle": {
                  "items": {
                    "swagger_ref": "#/components/schemas/LeaderBoardListItem"
                  },
                  "type": "array"
                },
                "list": {
                  "items": {
                    "swagger_ref": "#/components/schemas/LeaderBoardListItem"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            }
          }
        },
        "Country": {
          "properties": {
            "alpha2code": {
              "type": "string"
            },
            "countryname": {
              "type": "string"
            },
            "countryprefix": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "PlanChangeDetails": {
          "properties": {
            "code": {
              "type": "string"
            },
            "result": {
              "type": "object",
              "properties": {
                "button_title": {
                  "type": "string"
                },
                "no_card_error_header": {
                  "type": "string"
                },
                "no_card_error_message": {
                  "type": "string"
                },
                "subtitle": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "banner_image_url": {
                  "type": "string"
                }
              }
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "GetPromotionResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "result": {
              "properties": {
                "header": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "PortinRequestActive": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "result": {
              "properties": {
                "start_dates": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "date": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "status": {
                  "type": "string"
                },
                "auth_form_url": {
                  "type": "string"
                },
                "country_code": {
                  "type": "integer"
                },
                "donor_networks": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "code": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "type": "object"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "PortinAddNumberResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer"
            },
            "result": {
              "properties": {
                "requestId": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            "status": {
              "type": "string"
            }
          }
        },
        "TelcoDashBoardCreditCapBill": {
          "properties": {
            "summary": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "GeneralAddonUpdateResponse": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "result": {
              "properties": {
                "unsub": {
                  "swagger_ref": "#/components/schemas/UnSubDetails"
                },
                "args": {
                  "properties": {
                    "msisdn": {
                      "type": "string"
                    },
                    "serviceInstanceNumber": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "result": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                },
                "sub": {
                  "swagger_ref": "#/components/schemas/SubDetails"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "SpecialAddonResponse": {
          "properties": {
            "basePlanBonus": {
              "properties": {
                "calls": {
                  "swagger_ref": "#/components/schemas/SimpleAmount"
                },
                "data": {
                  "swagger_ref": "#/components/schemas/SimpleAmount"
                },
                "sms": {
                  "swagger_ref": "#/components/schemas/SimpleAmount"
                }
              },
              "type": "object"
            },
            "expiry": {
              "type": "string"
            },
            "addonDetails": {
              "properties": {
                "price": {
                  "swagger_ref": "#/components/schemas/Price"
                },
                "disclaimer": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "enabled": {
                  "type": "number"
                },
                "descriptionFull": {
                  "type": "string"
                },
                "description_full": {
                  "type": "string"
                },
                "freePackage": {
                  "type": "string"
                },
                "subtitle": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "orderId": {
                  "type": "number"
                },
                "unsub_effect": {
                  "type": "number"
                },
                "beta": {
                  "type": "number"
                },
                "descriptionShort": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "kb": {
                  "type": "number"
                },
                "sub_effect": {
                  "type": "number"
                },
                "action": {
                  "type": "number"
                },
                "id": {
                  "type": "string"
                },
                "description_short": {
                  "type": "string"
                },
                "recurrent": {
                  "type": "boolean"
                },
                "betaGroup": {
                  "type": "string"
                },
                "order_id": {
                  "type": "number"
                },
                "free_package": {
                  "type": "string"
                },
                "advanced_payment": {
                  "type": "number"
                },
                "advancedPayment": {
                  "type": "number"
                },
                "app": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "durationString": {
              "type": "string"
            },
            "premiumMembershipAddonId": {
              "type": "string"
            },
            "affectedAddonDetails": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "addon_id": {
                    "type": "string"
                  },
                  "deeplink": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            },
            "affectedAddons": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "addonID": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "perks": {
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ProfileBillingAddressDetails": {
          "properties": {
            "order": {
              "type": "integer"
            },
            "data": {
              "properties": {
                "street_building_name": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "district": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "header": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "LoginError": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "details": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "CreateZendeskTicketsResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "result": {
              "properties": {
                "ticket_id": {
                  "type": "number"
                },
                "ticket_url": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ZendeskTicketsResponse": {
          "properties": {
            "result": {
              "items": {
                "swagger_ref": "#/components/schemas/ZendeskTicketResult"
              },
              "type": "array"
            },
            "status": {
              "type": "string"
            },
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "ExtraAddon": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "payment": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "recurrent": {
              "type": "boolean"
            },
            "unit": {
              "type": "string"
            },
            "value": {
              "type": "integer"
            }
          }
        },
        "AnalyticsSetSurveyFields": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "action": {
              "type": "string"
            },
            "creation_date": {
              "type": "string"
            },
            "igNoreStatus": {
              "type": "boolean"
            },
            "trigger": {
              "type": "string"
            }
          }
        },
        "BonusHistoryResponse": {
          "properties": {
            "history": {
              "properties": {
                "list": {
                  "items": {
                    "properties": {
                      "product_kb_pretty": {
                        "type": "number"
                      },
                      "product_sub_type": {
                        "type": "string"
                      },
                      "active": {
                        "type": "boolean"
                      },
                      "product_type": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "leaderboard_included": {
                        "type": "boolean"
                      },
                      "added_date": {
                        "type": "string"
                      },
                      "deactivated": {
                        "type": "integer"
                      },
                      "imageId": {
                        "type": "string"
                      },
                      "product_kb": {
                        "type": "number"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "rating": {
              "type": "object",
              "properties": {
                "dataGb": {
                  "type": "number"
                },
                "rating": {
                  "properties": {
                    "count": {
                      "type": "number"
                    },
                    "needToReachGb": {
                      "type": "number"
                    },
                    "position": {
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "type": "object"
        },
        "Action": {
          "properties": {
            "data": {
              "additionalProperties": {
                "properties": {
                  "type": {
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "object"
            },
            "type": {
              "enum": [
                "web_view",
                "zendesk",
                "popup",
                "imagebanner",
                "deeplink",
                "overlay_screen"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        "GetLocationResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "list": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "BetaUserDetailsResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "number"
            },
            "result": {
              "type": "object",
              "properties": {
                "grpActive": {
                  "type": "boolean"
                },
                "msg": {
                  "type": "string"
                }
              }
            }
          }
        },
        "CountriesListResponse": {
          "properties": {
            "list": {
              "items": {
                "swagger_ref": "#/components/schemas/Country"
              },
              "type": "array"
            },
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "CreditCapView": {
          "type": "object"
        },
        "TelcoDashBoardPlusOptions": {
          "properties": {
            "summary": {
              "properties": {
                "addons": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "popup_footer": {
                        "type": "string"
                      },
                      "subtitle": {
                        "type": "string"
                      },
                      "description": {
                        "swagger_ref": "#/components/schemas/StringLayout"
                      },
                      "id": {
                        "type": "string"
                      },
                      "addon_type": {
                        "type": "string"
                      },
                      "popup_description": {
                        "type": "string"
                      },
                      "popup_subtitle": {
                        "type": "string"
                      },
                      "popup_title": {
                        "type": "string"
                      },
                      "price": {
                        "type": "string"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "title": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "header": {
                  "swagger_ref": "#/components/schemas/StringLayout"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "BaseCard": {
          "properties": {
            "md5": {
              "type": "string"
            },
            "summary": {
              "properties": {
                "priority": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "details": {
              "properties": {
                "priority": {
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "SettingsSetRequest": {
          "properties": {
            "app_type": {
              "type": "string"
            },
            "option_id": {
              "type": "string"
            },
            "uuid": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "AllocateWinbackRequest": {
          "type": "object",
          "properties": {
            "reward_id": {
              "type": "number"
            },
            "reward_title": {
              "type": "string"
            },
            "cancel_termination": {
              "type": "boolean"
            }
          }
        },
        "OustandingBillView": {
          "type": "object"
        },
        "ProfileBoost": {
          "type": "object",
          "properties": {
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "unlimited": {
              "type": "boolean"
            },
            "charged_upfront": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "recurrent": {
              "type": "boolean"
            },
            "auto": {
              "type": "boolean"
            },
            "payment": {
              "type": "string"
            },
            "date": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          }
        },
        "ZendeskTicketsIsValidTimeResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "result": {
              "properties": {
                "allow": {
                  "type": "boolean"
                },
                "code": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "GetSettingsResponse": {
          "properties": {
            "value": {
              "type": "string"
            },
            "value_type": {
              "type": "string"
            },
            "option_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardCustomizePlan": {
          "properties": {
            "summary": {
              "properties": {
                "action": {
                  "swagger_ref": "#/components/schemas/Action"
                },
                "header": {
                  "swagger_ref": "#/components/schemas/StringLayout"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardBills": {
          "properties": {
            "summary": {
              "properties": {
                "action": {
                  "swagger_ref": "#/components/schemas/Action"
                },
                "header": {
                  "swagger_ref": "#/components/schemas/StringLayout"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ProfileDetailsResponse": {
          "properties": {
            "email": {
              "properties": {
                "visible": {
                  "type": "string"
                },
                "can_edit": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "app_picture": {
              "type": "string"
            },
            "code": {
              "type": "number"
            },
            "dob": {
              "type": "string"
            },
            "credit_card": {
              "properties": {
                "last_four_digits": {
                  "type": "string"
                },
                "paytype": {
                  "type": "string"
                },
                "visible": {
                  "type": "string"
                },
                "can_edit": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "plan_name": {
              "type": "string"
            },
            "nickname": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "customer_identifier": {
              "type": "string"
            },
            "port_in": {
              "type": "object",
              "properties": {
                "visible": {
                  "type": "boolean"
                }
              }
            },
            "billing_address": {
              "properties": {
                "visible": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "floor_no": {
                  "type": "string"
                },
                "can_edit": {
                  "type": "string"
                },
                "unit_no": {
                  "type": "string"
                },
                "hse_blk_tower": {
                  "type": "string"
                },
                "street_building_name": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "zip_code": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "last_name": {
              "type": "string"
            },
            "circles_zero_details": {
              "properties": {
                "banner_deeplink": {
                  "type": "string"
                },
                "banner_subtitle": {
                  "type": "string"
                },
                "banner_title": {
                  "type": "string"
                },
                "banner_available": {
                  "type": "string"
                },
                "banner_button": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "middle_name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "UnSubDetails": {
          "items": {
            "properties": {
              "packageHistoryId": {
                "type": "string"
              },
              "product_id": {
                "type": "string"
              },
              "current": {
                "type": "boolean"
              },
              "effect": {
                "type": "number"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "GetLocationPromoDialogResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "dialog": {
              "properties": {
                "instruction": {
                  "type": "string"
                },
                "redeemedMessage": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ExtraAddonBatchSetResponse": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "result": {
              "items": {
                "properties": {
                  "responseCode": {
                    "type": "string"
                  },
                  "responseMessage": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "DashBoardCardOperationApiDetails": {
          "properties": {
            "headers": {
              "properties": {
                "content-length": {
                  "type": "number"
                }
              },
              "type": "object"
            },
            "method": {
              "type": "string"
            },
            "uri": {
              "properties": {
                "path": {
                  "type": "string"
                },
                "query": {
                  "type": "string"
                },
                "host": {
                  "type": "string"
                },
                "search": {
                  "type": "string"
                },
                "hash": {
                  "type": "string"
                },
                "hostname": {
                  "type": "string"
                },
                "slashes": {
                  "type": "string"
                },
                "auth": {
                  "type": "string"
                },
                "href": {
                  "type": "string"
                },
                "protocol": {
                  "type": "string"
                },
                "port": {
                  "type": "string"
                },
                "pathname": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ExtraAddonBatchSetRequest": {
          "properties": {
            "uuid": {
              "type": "string"
            },
            "extra": {
              "items": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Price": {
          "type": "object",
          "properties": {
            "unit": {
              "type": "string"
            },
            "value": {
              "type": "number"
            },
            "postfix": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            }
          }
        },
        "PlanDetailsGeneralAddon": {
          "properties": {
            "description_short": {
              "type": "string"
            },
            "date": {
              "type": "string"
            },
            "future": {
              "type": "boolean"
            },
            "kb": {
              "type": "number"
            },
            "payment": {
              "type": "string"
            },
            "current": {
              "type": "boolean"
            },
            "sub_effect": {
              "type": "string"
            },
            "list": {
              "items": {
                "swagger_ref": "#/components/schemas/PlanDetailsGeneralSubAddon"
              },
              "type": "array"
            },
            "current_charge_to_bill": {
              "type": "boolean"
            },
            "id": {
              "type": "string"
            },
            "start_date": {
              "type": "string"
            },
            "action_available": {
              "type": "boolean"
            },
            "title": {
              "type": "string"
            },
            "expiry_date": {
              "type": "string"
            },
            "free_package": {
              "type": "string"
            },
            "order_id": {
              "type": "number"
            },
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "subtitle": {
              "type": "string"
            },
            "unsub_effect": {
              "type": "string"
            },
            "disclaimer": {
              "type": "string"
            },
            "recurrent": {
              "type": "boolean"
            },
            "description_full": {
              "type": "string"
            },
            "footer": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "PlanDetailsGeneralSubAddon": {
          "properties": {
            "title": {
              "type": "string"
            },
            "date": {
              "type": "string"
            },
            "description_short": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "disclaimer": {
              "type": "string"
            },
            "future": {
              "type": "boolean"
            },
            "kb": {
              "type": "number"
            },
            "order_id": {
              "type": "number"
            },
            "start_date": {
              "type": "string"
            },
            "description_full": {
              "type": "string"
            },
            "recurrent": {
              "type": "boolean"
            },
            "sub_effect": {
              "type": "string"
            },
            "footer": {
              "type": "string"
            },
            "free_package": {
              "type": "string"
            },
            "action_available": {
              "type": "boolean"
            },
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "current": {
              "type": "boolean"
            },
            "expiry_date": {
              "type": "string"
            },
            "unsub_effect": {
              "type": "string"
            },
            "payment": {
              "type": "string"
            },
            "current_charge_to_bill": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "SetPromotionResponse": {
          "properties": {
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "Meta": {
          "type": "object",
          "properties": {
            "color": {
              "type": "string"
            }
          }
        },
        "TelcoDashBoardRoamingCard": {
          "properties": {
            "summary": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "TopUpAddon": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "value": {
              "type": "integer"
            },
            "unlimited": {
              "type": "boolean"
            },
            "recurrent": {
              "type": "boolean"
            },
            "boost_image_url": {
              "type": "string"
            },
            "payment": {
              "type": "string"
            },
            "description_full": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "unit": {
              "type": "string"
            },
            "description_short": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "disabled": {
              "type": "boolean"
            },
            "order_id": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            }
          }
        },
        "ZendeskTicketDetails": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "comments": {
                "type": "array",
                "items": {
                  "properties": {
                    "body": {
                      "type": "string"
                    },
                    "channel": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "html_body": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "role": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "author_id": {
                      "type": "number"
                    }
                  },
                  "type": "object"
                }
              },
              "count": {
                "type": "number"
              }
            }
          }
        },
        "WalletBalanceResponse": {
          "properties": {
            "cust_id": {
              "type": "string"
            },
            "wallets": {
              "items": {
                "properties": {
                  "expired_bal": {
                    "type": "number"
                  },
                  "redeemable_bal": {
                    "type": "number"
                  },
                  "wallet_type": {
                    "type": "string"
                  },
                  "available_bal": {
                    "type": "number"
                  },
                  "currency_symbol": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardOthers": {
          "properties": {
            "summary": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "CreditCardTempLinkUpdate": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            }
          }
        },
        "BaseReferralInfo": {
          "properties": {
            "referral_code_title": {
              "type": "string"
            },
            "referral_text": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "is_editable": {
              "type": "boolean"
            },
            "order": {
              "type": "integer"
            },
            "referral_code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "BaseMenuLayout": {
          "properties": {
            "subtitle": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "icon_url": {
              "type": "string"
            },
            "item_id": {
              "type": "string"
            },
            "order_id": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardResponse": {
          "type": "object",
          "properties": {
            "boost": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardBoost"
            },
            "customize_plan": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardCustomizePlan"
            },
            "image_banners": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardImageBanners"
            },
            "outstanding_bill": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardOutstandingBill"
            },
            "rating": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardNpsRating"
            },
            "others": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardOthers"
            },
            "roaming_card": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardRoamingCard"
            },
            "bill": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardBills"
            },
            "birthday_bonus": {
              "swagger_ref": "#/components/schemas/TelcoDashBoarBirthdayBonus"
            },
            "plus_options": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardPlusOptions"
            },
            "credit_cap_bill": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardCreditCapBill"
            },
            "base": {
              "swagger_ref": "#/components/schemas/TelcoDashBoardBase"
            }
          }
        },
        "GenericLayoutView": {
          "properties": {
            "header": {
              "type": "string"
            },
            "icon": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "ProfilePurchaseDeviceDetails": {
          "properties": {
            "header": {
              "type": "string"
            },
            "order": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            },
            "button": {
              "properties": {
                "action": {
                  "swagger_ref": "#/components/schemas/Action"
                },
                "title": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "SettingsSetResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "details": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "GetVouchersResponse": {
          "properties": {
            "data": {
              "properties": {
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "totalCount": {
              "type": "number"
            },
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "ProfilePersonalDetails": {
          "properties": {
            "data": {
              "properties": {
                "email": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "app_picture": {
                  "type": "string"
                },
                "change_number_available": {
                  "type": "boolean"
                },
                "country_code": {
                  "type": "string"
                },
                "portin_available": {
                  "type": "boolean"
                },
                "phone_number": {
                  "type": "string"
                },
                "nickname": {
                  "type": "string"
                },
                "active_tags": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "middle_name": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "header": {
              "type": "string"
            },
            "order": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "GetPaymentURLResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "PushRequest": {
          "type": "object",
          "properties": {
            "customer_identifier": {
              "type": "string"
            },
            "flavor": {
              "type": "string"
            },
            "gcm_id": {
              "type": "number"
            },
            "nickname": {
              "type": "string"
            },
            "push_token": {
              "type": "string"
            },
            "advertisement_id": {
              "type": "string"
            }
          }
        },
        "GetNearbyBranchResponse": {
          "properties": {
            "code": {
              "type": "number"
            },
            "list": {
              "type": "array",
              "items": {
                "properties": {
                  "distance": {
                    "type": "number"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "type": "object"
        },
        "RateItem": {
          "properties": {
            "prefix": {
              "type": "number"
            },
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "MccMnc": {
          "type": "object",
          "properties": {
            "mcc": {
              "type": "number"
            },
            "mnc": {
              "type": "number"
            }
          }
        },
        "GeneralAddounUpdateRequest": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        },
        "TelcoDashBoardOutstandingBill": {
          "properties": {
            "summary": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "GeneralInnerAddon": {
          "type": "object",
          "properties": {
            "description_short": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "unsub_effect": {
              "type": "string"
            },
            "betaGroup": {
              "type": "string"
            },
            "blocked_by_package_message": {
              "type": "string"
            },
            "disclaimer": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "beta": {
              "type": "integer"
            },
            "footer": {
              "type": "string"
            },
            "blocked_by_package": {
              "type": "string"
            },
            "description_full": {
              "type": "string"
            },
            "unsubscribe_package": {
              "type": "string"
            },
            "recurrent": {
              "type": "boolean"
            },
            "payment": {
              "type": "string"
            },
            "advanced_payment": {
              "type": "integer"
            },
            "order_id": {
              "type": "integer"
            },
            "free_package": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "sub_effect": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "action_available": {
              "type": "boolean"
            }
          }
        },
        "SetLocationRequest": {
          "type": "object",
          "properties": {
            "longitude": {
              "type": "number"
            },
            "radius": {
              "type": "number"
            },
            "latitude": {
              "type": "number"
            },
            "locationId": {
              "type": "number"
            }
          }
        },
        "IDDCalls": {
          "properties": {
            "inciming": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            },
            "outgoing": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            },
            "total": {
              "swagger_ref": "#/components/schemas/PaygUsageView"
            },
            "visible": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "RoamingData": {
          "properties": {
            "total": {
              "properties": {
                "unit_type": {
                  "type": "string"
                },
                "value": {
                  "type": "number"
                },
                "price_actual": {
                  "swagger_ref": "#/components/schemas/SimplePrice"
                },
                "price_total": {
                  "swagger_ref": "#/components/schemas/SimplePrice"
                }
              },
              "type": "object"
            },
            "visible": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "UsageView": {
          "properties": {
            "used": {
              "type": "number"
            },
            "left": {
              "type": "number"
            },
            "plan_kb": {
              "type": "number"
            },
            "prorated": {
              "type": "number"
            },
            "prorated_kb": {
              "type": "number"
            },
            "section": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardBase": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "MktPlaceListResponse": {
          "properties": {
            "disclaimer": {
              "type": "string"
            },
            "label": {
              "type": "string"
            },
            "data": {
              "items": {
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "validity": {
                    "type": "string"
                  },
                  "button": {
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "disclaimer": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "price": {
                    "swagger_ref": "#/components/schemas/SimplePrice"
                  },
                  "product_id": {
                    "type": "string"
                  },
                  "product_qty": {
                    "type": "number"
                  },
                  "redemption": {
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "deeplink": {
                        "type": "string"
                      },
                      "instructions": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "subtitle": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string"
                  },
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "_id": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "GeneralAddon": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "description_full": {
              "type": "string"
            },
            "payment": {
              "type": "string"
            },
            "blocked_by_package_message": {
              "type": "string"
            },
            "unsubscribe_package": {
              "type": "string"
            },
            "beta": {
              "type": "integer"
            },
            "free_package": {
              "type": "string"
            },
            "order_id": {
              "type": "integer"
            },
            "blocked_by_package": {
              "type": "string"
            },
            "subtitle": {
              "type": "string"
            },
            "recurrent": {
              "type": "boolean"
            },
            "title": {
              "type": "string"
            },
            "advanced_payment": {
              "type": "integer"
            },
            "unsub_effect": {
              "type": "string"
            },
            "betaGroup": {
              "type": "string"
            },
            "list": {
              "description": "List of add-ons",
              "items": {
                "swagger_ref": "#/components/schemas/GeneralInnerAddon"
              },
              "type": "array"
            },
            "price": {
              "swagger_ref": "#/components/schemas/Price"
            },
            "sub_effect": {
              "type": "string"
            },
            "description_short": {
              "type": "string"
            },
            "disclaimer": {
              "type": "string"
            },
            "action_available": {
              "type": "boolean"
            },
            "footer": {
              "type": "string"
            }
          }
        },
        "ExtraAddonArray": {
          "items": {
            "swagger_ref": "#/components/schemas/ExtraAddon"
          },
          "type": "array"
        },
        "AllocateWinbackResponse": {
          "properties": {
            "description": {
              "type": "string"
            },
            "header": {
              "type": "string"
            },
            "code": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "TelcoDashBoardNpsRating": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "SetCodeResponse": {
          "type": "object",
          "properties": {
            "subtitle": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "codeValid": {
              "type": "boolean"
            },
            "images": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      },
      "securitySchemes": {
        "JWT": {
          "in": "header",
          "name": "x-auth",
          "type": "apiKey",
          "description": "JWT authorization"
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebb5"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/plan/details/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/insurance/policies",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/layout/bills/info",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/details/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/rewards/vouchers",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/settings/support/details/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/general/update/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/analytics/nps/set",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/dashboard",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/payment/url/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/available/use/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/billing/payments/autodebit",
      "method": "PATCH"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/usage/data/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/billing/bills/payment/set",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/profile/boosts/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/image/del/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/registration/{type}/set",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/rewards/winback/promotion",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/layout/profile/info",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/usage/data/details/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/billing/usage/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/insurance/:policyId/policies",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/links/update/creditcard/status/:type/:refNum/:customer_account/:linkId",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/plan/rates/{iso}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/plan/{planname}/{operation}/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/plan/{planname}/{operation}/details/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/availed/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/location/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/partners/subscription/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/mktplace/list/{type}/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/location/promo/dialog/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/telco/profile",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/cap/roaming/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/zendeskTickets/isValidTime",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/portin/request/active/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/insurance/{policyId}/products",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/rewards/referral/link",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/telco/dashboard/{card_id}/{operation}",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/wallet/ledger",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/addon/extra/all/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/partners/subscription/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/leaderboard/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/billing/bills/download/{billId}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notification/readstatus/update/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/plan/get/countries/list",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/doc/{fileType}/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/registration/refresh",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/addon/topup/all/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/settings/option/set",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/zendeskTickets/ticketDetails?ticketId={ticketId}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/rewards/redeem/:voucher_id",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/billing/bills/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/email/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/code/set",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/registration/register",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/zendeskTickets/ticket",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/app/issue/{type}/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/usage/plan/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/details/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/telco/settings",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/zendeskTickets",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/portin/request/add/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/details/isBetaUser/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/verify/{type}/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/verify/{type}/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/location/nearby_branches",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/billing/bills/resend",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/available/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/history/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/links/:linkId",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/address/billing/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/location/promo/set",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/registration/auth",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/registration/deactivate",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/terminate/immediate",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/wallet/balance",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/rewards/winback/claim",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/addon/bonus/special/get/{addon_type}/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/links/verify/profile/:type",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/image/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/location/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/location/set",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/rewards/promotion/:promotion_id",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/settings/option/list/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/topup/update/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/portin/request/cancel/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/referral/code/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/analytics/nps/get",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/insurance/{productId}/purchase",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/layout/bonus/info",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/profile/creditcard/update/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/promotions/details",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/addon/extra/update/batch/set/",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/telco/plan/offerings",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/telco/dashboard",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/notification/history/get/",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/plan/id",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/account/addon/general/all/get/",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357874"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357874"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebb8"
  },
  "swaggerSpec": {
    "components": {
      "responses": {
        "getWatchListSubscriberResponse": {
          "content": {
            "application/json": {
              "schema": {
                "swagger_ref": "#/components/schemas/subscriber"
              }
            }
          },
          "description": ""
        },
        "getWatchListSubscribersResponse": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "swagger_ref": "#/components/schemas/subscriber"
                },
                "type": "array"
              }
            }
          }
        }
      },
      "schemas": {
        "subscriber": {
          "type": "object",
          "x-go-name": "Subscriber",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/chf/watchlist",
          "description": "A Subscriber represents a user who owns a sim card\nIt is used to describe the subscriber and his/her total useage units for the current period",
          "properties": {
            "totalUsageUnits": {
              "description": "The total used units of the subscriber for the current period.",
              "type": "string",
              "x-go-name": "TotalUsageUnits"
            },
            "msisdn": {
              "type": "string",
              "x-go-name": "Msisdn",
              "description": "The id of the subscriber."
            }
          },
          "required": [
            "msisdn",
            "totalUsageUnits"
          ]
        }
      }
    },
    "info": {
      "description": "Documentation of the CHF Stats API.",
      "title": "CHF Stats API",
      "version": "1.0.0"
    },
    "openapi": "3.0.1",
    "paths": {
      "/v1/watchlistSubscriber/{subscriberId}": {
        "get": {
          "operationId": "GetWatchListSubscriber",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "SubscriberId"
              },
              "x-go-name": "SubscriberId",
              "description": "This is the subscriber msisdn that is being queried",
              "in": "path",
              "name": "subscriberId"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/subscriber"
                  }
                }
              }
            }
          },
          "summary": "Get a subscriber's usage data from the global watch list",
          "tags": [
            "watchlist-subscriber"
          ],
          "description": "This endpoint returns the subscriber's total usage data for the month"
        }
      },
      "/v1/watchlistSubscribers": {
        "get": {
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/subscriber"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "summary": "List the subscribers that are in the global watch list",
          "tags": [
            "watchlist-subscribers"
          ],
          "x-codegen-request-body-name": "limit",
          "description": "By default it will list all current subscribers in watch list.\nThis is to cater for future feature that enables querying of subscribers that were in the watchlist",
          "operationId": "listWatchlistSubscribers",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "format": "int16",
                  "type": "integer"
                }
              }
            },
            "description": "This limits the number of watch list subscribers returned",
            "required": false
          }
        }
      }
    },
    "servers": [
      {
        "url": "http://chf.circles.life"
      }
    ],
    "tags": null
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebb7"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/v1/watchlistSubscriber/{subscriberId}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/watchlistSubscribers",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357887"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357887"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebba"
  },
  "swaggerSpec": {
    "paths": {
      "/v2/{country}/{locale}/{tenant}/payment/meta/{payment_reference_id}": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-AUTH",
              "required": true
            },
            {
              "description": "Payment Reference Id",
              "in": "path",
              "name": "payment_reference_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Meta Key",
              "in": "path",
              "name": "meta_key",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country"
            },
            {
              "description": "Locale",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.Response"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            }
          },
          "summary": "fetch the meta key values for the given payment reference id",
          "tags": [
            "payment api-v2"
          ],
          "description": "This API will fetch the meta key values for the given payment reference id and also for the given meta key"
        }
      },
      "/v1/{country}/{locale}/{tenant}/health": {
        "get": {
          "description": "This API will read a config value and display the result.",
          "parameters": [
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path"
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/health_check.HealthStatus"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "check the health of the service",
          "tags": [
            "health api-v1"
          ]
        }
      },
      "/v1/{country}/{locale}/{tenant}/payment_instrument/update": {
        "put": {
          "description": "This API will upsert a payment instrument for the given userId",
          "parameters": [
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model_req.PaymentInstrumentsUpdateReq"
                }
              }
            },
            "description": "Request payload"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.Response"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "upsert the payment instrument",
          "tags": [
            "payment_instrument api-v1"
          ],
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v1/{country}/{locale}/{tenant}/payment/status": {
        "get": {
          "summary": "fetch the transaction status",
          "tags": [
            "payment api-v1"
          ],
          "description": "This API will return the transaction status for the given txnId",
          "parameters": [
            {
              "description": "Txn ID",
              "in": "path",
              "name": "txn_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Locale",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.Response"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/v2/{country}/{locale}/{tenant}/payment/process": {
        "post": {
          "description": "This API will debit the amount from users card for the given userId using upfront payment method",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "description": "Tenant",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model_req.PaymentProcessReq"
                }
              }
            },
            "description": "Request payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.Response"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "process the payment method and make payment",
          "tags": [
            "payment api-v2"
          ],
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v1/{country}/{locale}/{tenant}/health/db": {
        "get": {
          "parameters": [
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path",
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/health_check.HealthStatus"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "check the db-health of the service",
          "tags": [
            "health api-v1"
          ],
          "description": "This API will ping the db and returns the result."
        }
      },
      "/v2/{country}/{locale}/{gateway}/payment/status/notification": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/map"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Processes payment status report from the payment gateway",
          "tags": [
            "payment api-v2"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "This API will do the post processing based on the status report received from Payment Gateway.",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Gateway",
              "in": "path",
              "name": "gateway",
              "required": true
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model_req.PaymentGatewayStatusReq"
                }
              }
            },
            "description": "Request payload"
          }
        }
      },
      "/v2/{country}/{locale}/{tenant}/payment/debit": {
        "post": {
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Locale",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Tenant",
              "in": "path",
              "name": "tenant"
            },
            {
              "description": "enter user_id",
              "in": "query",
              "name": "model_req.PaymentDebitReq.UserId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "model_req.PaymentDebitReq.Channel",
              "schema": {
                "type": "string"
              },
              "description": "enter channel"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter currency",
              "in": "query",
              "name": "model_req.PaymentDebitReq.Currency"
            },
            {
              "name": "model_req.PaymentDebitReq.Amount",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter amount",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter txn_id",
              "in": "query",
              "name": "model_req.PaymentDebitReq.TxnID"
            },
            {
              "in": "query",
              "name": "model_req.PaymentDebitReq.CallbackUrl",
              "schema": {
                "type": "string"
              },
              "description": "enter callback_url"
            },
            {
              "name": "model_req.PaymentDebitReq.TransactionCategory",
              "schema": {
                "type": "string"
              },
              "description": "enter transaction_category",
              "in": "query"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "enter description",
              "in": "query",
              "name": "model_req.PaymentDebitReq.Description"
            },
            {
              "in": "query",
              "name": "model_req.PaymentDebitReq.RedirectUrl",
              "schema": {
                "type": "string"
              },
              "description": "enter redirect_url"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model_req.PaymentDebitReq"
                }
              }
            },
            "description": "Request payload"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.Response"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "debit from users card",
          "tags": [
            "payment api-v2"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "This API will debit the amount from users card for the given userId using either recurrent token method of drop-in upfront payment method"
        }
      },
      "/v1/{country}/{locale}/{tenant}/payment/debit": {
        "post": {
          "summary": "debit from users card",
          "tags": [
            "payment api-v1"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "This API will debit the amount from users card for the given userId",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path"
            },
            {
              "description": "Tenant",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "model_req.PaymentDebitReq.UserId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter user_id"
            },
            {
              "description": "enter channel",
              "in": "query",
              "name": "model_req.PaymentDebitReq.Channel",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "model_req.PaymentDebitReq.Currency",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter currency",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter amount",
              "in": "query",
              "name": "model_req.PaymentDebitReq.Amount"
            },
            {
              "in": "query",
              "name": "model_req.PaymentDebitReq.TxnID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter txn_id"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "enter callback_url",
              "in": "query",
              "name": "model_req.PaymentDebitReq.CallbackUrl"
            },
            {
              "description": "enter transaction_category",
              "in": "query",
              "name": "model_req.PaymentDebitReq.TransactionCategory",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "model_req.PaymentDebitReq.Description",
              "schema": {
                "type": "string"
              },
              "description": "enter description",
              "in": "query"
            },
            {
              "name": "model_req.PaymentDebitReq.RedirectUrl",
              "schema": {
                "type": "string"
              },
              "description": "enter redirect_url",
              "in": "query"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model_req.PaymentDebitReq"
                }
              }
            },
            "description": "Request payload"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.Response"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/{country}/{locale}/{tenant}/payment_instrument/create": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.Response"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/respwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "create the payment instrument",
          "tags": [
            "payment_instrument api-v1"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "This API will create a payment instrument for the given userId",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Country",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Locale",
              "in": "path",
              "name": "locale"
            },
            {
              "description": "Tenant",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "model_req.PaymentInstrumentsCreateReq.UserId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "enter user_id"
            },
            {
              "description": "enter channel",
              "in": "query",
              "name": "model_req.PaymentInstrumentsCreateReq.Channel",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model_req.PaymentInstrumentsCreateReq"
                }
              }
            }
          }
        }
      }
    },
    "servers": [
      {
        "url": "http://sgqpayments.circles.asia"
      }
    ],
    "tags": null,
    "components": {
      "schemas": {
        "respwriter.V2ErrorResponse": {
          "properties": {
            "description": {
              "type": "string",
              "example": "Password should be 8 to 13 character long"
            },
            "message": {
              "example": "Invalid password",
              "type": "string"
            },
            "title": {
              "example": "Validation error!",
              "type": "string"
            },
            "code": {
              "example": 400001,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "base.PAASResult": {
          "type": "object",
          "properties": {
            "shopper_reference": {
              "example": "meenatchi@circles.asia",
              "type": "string"
            },
            "paytype": {
              "example": "3",
              "type": "string"
            },
            "default": {
              "example": true,
              "type": "boolean"
            },
            "payment_gateway": {
              "example": "SG-BXGHO0DRY56K",
              "type": "string"
            },
            "status": {
              "type": "string",
              "example": "success"
            },
            "message": {
              "type": "string"
            },
            "service_instance_number": {
              "type": "string",
              "example": "LW101220512"
            },
            "card_bin": {
              "type": "string",
              "example": "512972"
            },
            "card_payment_method": {
              "example": "visa",
              "type": "string"
            },
            "recurrent_token": {
              "type": "string",
              "example": "8315749214085116"
            },
            "card_expiry_date": {
              "example": "06/2022",
              "type": "string"
            },
            "card_no": {
              "example": "adyen",
              "type": "string"
            },
            "currency": {
              "example": "SGD",
              "type": "string"
            }
          }
        },
        "model_req.NotificationItem": {
          "properties": {
            "NotificationRequestItem": {
              "swagger_ref": "#/components/schemas/model_req.PaymentStatusReq"
            }
          },
          "type": "object"
        },
        "respwriter.SwaggerDocErrorResponse": {
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/respwriter.V2ErrorResponse"
            },
            "success": {
              "example": false,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model_req.PaymentInstrumentsUpdateReq": {
          "properties": {
            "channel": {
              "example": "Shop",
              "type": "string"
            },
            "instrument_obj": {
              "swagger_ref": "#/components/schemas/base.PAASResult"
            },
            "user_id": {
              "example": "SG-BXGHO0DRY56K",
              "type": "string"
            }
          },
          "type": "object"
        },
        "model_req.PaymentStatusReq": {
          "properties": {
            "success": {
              "type": "string"
            },
            "additionalData": {
              "type": "object",
              "properties": {}
            },
            "amount": {
              "swagger_ref": "#/components/schemas/model_req.Amount"
            },
            "merchantReference": {
              "type": "string"
            },
            "pspReference": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "health_check.HealthStatus": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          }
        },
        "model_req.Amount": {
          "properties": {
            "currency": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "respwriter.Response": {
          "type": "object",
          "properties": {
            "result": {
              "properties": {},
              "type": "object"
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "model_req.PaymentDebitReq": {
          "properties": {
            "callback_url": {
              "example": "https://mccoy.circles.asia:6443/v1/sg/en/mobile/sphere/topups/nov-13-4/status",
              "type": "string"
            },
            "amount": {
              "example": 2,
              "type": "number"
            },
            "currency": {
              "example": "SGD",
              "type": "string"
            },
            "description": {
              "example": "top up",
              "type": "string"
            },
            "redirect_url": {
              "example": "https://mccoy.circles.asia:6443/v1/sg/en/mobile/sphere/topups/nov-13-4/welcomepage",
              "type": "string"
            },
            "txn_id": {
              "type": "string",
              "example": "7916f691-fba6-11e9-b3ef-0238bcd2c328"
            },
            "channel": {
              "example": "Sphere",
              "type": "string"
            },
            "transaction_category": {
              "example": "SPHERE",
              "type": "string"
            },
            "user_id": {
              "example": "SG-BXGHO0DRY56K",
              "type": "string"
            }
          },
          "type": "object"
        },
        "model_req.PaymentGatewayStatusReq": {
          "type": "object",
          "properties": {
            "notificationItems": {
              "items": {
                "swagger_ref": "#/components/schemas/model_req.NotificationItem"
              },
              "type": "array"
            }
          }
        },
        "model_req.PaymentInstrumentsCreateReq": {
          "properties": {
            "channel": {
              "example": "Shop",
              "type": "string"
            },
            "user_id": {
              "example": "SG-BXGHO0DRY56K",
              "type": "string"
            }
          },
          "type": "object"
        },
        "model_req.PaymentProcessReq": {
          "properties": {
            "user_id": {
              "example": "SG-BXGHO0DRY56K",
              "type": "string"
            },
            "channel": {
              "example": "Sphere",
              "type": "string"
            },
            "payment_method": {
              "type": "object",
              "properties": {}
            },
            "payment_reference_id": {
              "example": "SP-BYADL4MEVOI2",
              "type": "string"
            },
            "txn_id": {
              "example": "7916f691-fba6-11e9-b3ef-0238bcd2c328",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "version": "1.0",
      "contact": {},
      "description": "",
      "license": {},
      "title": "Payment"
    },
    "openapi": "3.0.1"
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebb9"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/health",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/payment/status",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/payment_instrument/create",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/{country}/{locale}/{tenant}/payment/debit",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/{country}/{locale}/{tenant}/payment/meta/{payment_reference_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v2/{country}/{locale}/{tenant}/payment/process",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/health/db",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/payment/debit",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{country}/{locale}/{tenant}/payment_instrument/update",
      "method": "PATCH"
    },
    {
      "endptRegex": "/v2/{country}/{locale}/{gateway}/payment/status/notification",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357889"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357889"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebbc"
  },
  "swaggerSpec": {
    "servers": [
      {
        "url": "https://http://localhost/tmf-api/customerBillManagement/v4"
      }
    ],
    "tags": [
      {
        "name": "customerBillOnDemand"
      },
      {
        "name": "customerBill"
      },
      {
        "name": "appliedCustomerBillingRate"
      },
      {
        "name": "events subscription"
      }
    ],
    "components": {
      "schemas": {
        "Attachment": {
          "description": "Complements the description of an element (for instance a product) through video, pictures...",
          "properties": {
            "href": {
              "description": "URI for this Attachment",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier for this particular attachment",
              "type": "string"
            },
            "description": {
              "description": "A narrative text describing the content of the attachment",
              "type": "string"
            },
            "size": {
              "swagger_ref": "#/components/schemas/Quantity"
            },
            "mimeType": {
              "description": "Attachment mime type such as extension file for video, picture and document",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "attachmentType": {
              "description": "Attachment type such as video, picture",
              "type": "string"
            },
            "content": {
              "type": "string",
              "description": "The actual contents of the attachment object, if embedded, encoded as base64"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "name": {
              "description": "The name of the attachment",
              "type": "string"
            },
            "url": {
              "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            }
          },
          "type": "object"
        },
        "AppliedCustomerBillingRate": {
          "required": [
            "id"
          ],
          "type": "object",
          "description": "A customer bill displays applied billing rates created before or during the billing process.",
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the customer applied billing rate"
            },
            "isBilled": {
              "description": "If isBilled = true then bill should be provided, if false then billingAccount should be provided",
              "type": "boolean"
            },
            "name": {
              "type": "string",
              "description": "Name of the customer applied billing rate"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "taxIncludedAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "billingAccount": {
              "swagger_ref": "#/components/schemas/BillingAccountRef"
            },
            "date": {
              "description": "Creation date of the applied billing rate",
              "format": "date-time",
              "type": "string"
            },
            "href": {
              "description": "Reference of the customer applied billing rate",
              "type": "string"
            },
            "type": {
              "type": "string",
              "description": "Type of the applied billing rate : appliedBillingCharge (any kind of charge except taxation charges : recurringCharge, oneTimeCharge, usageCharge),  appliedBillingCredit (any kind of credit : rebate or productAlteration) or appliedPenaltyCharge (penalty charges such as late fees, payment rejection fees,...)"
            },
            "taxExcludedAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "product": {
              "swagger_ref": "#/components/schemas/ProductRef"
            },
            "bill": {
              "swagger_ref": "#/components/schemas/BillRef"
            },
            "description": {
              "description": "Additional data to be displayed on the bill for this customer applied billing rate",
              "type": "string"
            },
            "periodCoverage": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "appliedTax": {
              "items": {
                "swagger_ref": "#/components/schemas/AppliedBillingTaxRate"
              },
              "type": "array"
            },
            "characteristic": {
              "items": {
                "swagger_ref": "#/components/schemas/AppliedBillingRateCharacteristic"
              },
              "type": "array"
            }
          }
        },
        "Any": {
          "type": "object"
        },
        "Error": {
          "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
          "properties": {
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name."
            },
            "code": {
              "type": "string",
              "description": "Application relevant detail, defined in the API or a common list."
            },
            "message": {
              "description": "More details and corrective actions related to the error which can be shown to a client user.",
              "type": "string"
            },
            "reason": {
              "description": "Explanation of the reason for the error which can be shown to a client user.",
              "type": "string"
            },
            "referenceError": {
              "description": "URI of documentation describing the error.",
              "format": "uri",
              "type": "string"
            },
            "status": {
              "description": "HTTP Error code extension",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class.",
              "type": "string"
            }
          },
          "required": [
            "code",
            "reason"
          ],
          "type": "object"
        },
        "RelatedPartyRef": {
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "Reference of the related party, could be a party reference or a party role reference",
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of a related party"
            },
            "name": {
              "description": "Name of the related party",
              "type": "string"
            },
            "role": {
              "type": "string",
              "description": "Role of the related party."
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity."
        },
        "Characteristic": {
          "description": "Describes a given characteristic of an object or entity through a name/value pair.",
          "properties": {
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "name": {
              "description": "Name of the characteristic",
              "type": "string"
            },
            "value": {
              "swagger_ref": "#/components/schemas/Any"
            },
            "valueType": {
              "description": "Data type of the value of the characteristic",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "name",
            "value"
          ],
          "type": "object"
        },
        "AppliedBillingRateCharacteristic": {
          "type": "object",
          "description": "An applied billing rate has dynamic characteristics according to the its type (characteristics are based on the service type, line of business or on others parameters)",
          "properties": {
            "name": {
              "description": "Name of the characteristic",
              "type": "string"
            },
            "value": {
              "swagger_ref": "#/components/schemas/Any"
            },
            "valueType": {
              "description": "Data type of the value of the characteristic",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            }
          },
          "required": [
            "name",
            "value"
          ]
        },
        "BillRef": {
          "properties": {
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "URL serving as reference for the <xyz> resource",
              "type": "string"
            },
            "id": {
              "description": "Unique-Identifier for this <123>",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "description": "Bill reference."
        },
        "ProductRef": {
          "properties": {
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "Reference of the related entity.",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        "FinancialAccountRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "description": "AccountReceivable reference. An account of money owed by a party to another entity in exchange for goods or services that have been delivered or used. An account receivable aggregates the amounts of one or more party accounts (billing or settlement) owned by a given party.",
          "properties": {
            "accountBalance": {
              "items": {
                "swagger_ref": "#/components/schemas/AccountBalance"
              },
              "type": "array"
            },
            "href": {
              "description": "Unique reference of the account",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of the account",
              "type": "string"
            },
            "name": {
              "description": "Name of the account",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            }
          }
        },
        "AttachmentRef": {
          "properties": {
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "description": {
              "description": "A narrative text describing the content of the attachment",
              "type": "string"
            },
            "href": {
              "description": "URL serving as reference for the attachment resource",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "id": {
              "description": "Unique-Identifier for this attachment",
              "type": "string"
            },
            "url": {
              "description": "Link to the attachment media/content",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures"
        },
        "BillingAccountRef": {
          "type": "object",
          "description": "Reference to the billing account in case of not billed item.",
          "properties": {
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "type": "string",
              "description": "URL serving as reference for the <xyz> resource"
            },
            "id": {
              "type": "string",
              "description": "Unique-Identifier for this <123>"
            },
            "name": {
              "description": "Name of the Billingaccount",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "Reference": {
          "type": "object",
          "description": "General Referencing Resource Schema",
          "properties": {
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "href": {
              "description": "URL serving as reference for the <xyz> resource",
              "type": "string"
            },
            "id": {
              "description": "Unique-Identifier for this <123>",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            }
          }
        },
        "StateValues": {
          "description": "",
          "enum": [
            "inProgress",
            "rejected",
            "done",
            "terminatedWithError"
          ],
          "type": "string"
        },
        "TaxItem": {
          "properties": {
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "taxAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "taxCategory": {
              "description": "Tax category",
              "type": "string"
            },
            "taxRate": {
              "type": "number",
              "description": "Applied rate of the tax",
              "format": "float"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            }
          },
          "type": "object",
          "description": "A tax item is created for each tax rate and tax type used in the bill."
        },
        "PaymentRef": {
          "description": "If an immediate payment has been done at the product order submission, the payment information are captured and stored (as a reference) in the order.",
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "Reference of the related entity.",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "A name for the payment"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        "AttachmentRefOrValue": {
          "type": "object",
          "description": "An attachment by value or by reference. For AttachmentRefOrValue, the attribute type,schemaLocation and referredType are related to the contained entity and not to AttchmentRefOrValue itself",
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "description": {
              "description": "A narrative text describing the content of the attachment",
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "content": {
              "type": "string",
              "description": "The actual contents of the attachment object, if embedded, encoded as base64"
            },
            "url": {
              "description": "Uniform Resource Locator, is a web page address (a subset of URI)",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier for this particular attachment",
              "type": "string"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "href": {
              "description": "URI for this Attachment",
              "type": "string"
            },
            "mimeType": {
              "type": "string",
              "description": "Attachment mime type such as extension file for video, picture and document"
            },
            "name": {
              "description": "The name of the attachment",
              "type": "string"
            },
            "size": {
              "swagger_ref": "#/components/schemas/Quantity"
            },
            "attachmentType": {
              "description": "Attachment type such as video, picture",
              "type": "string"
            }
          }
        },
        "CustomerBillOnDemand": {
          "description": "This resource is used to manage the creation request of a customer bill in real-time (on demand).",
          "properties": {
            "href": {
              "type": "string",
              "description": "Reference of the customer bill on demand request"
            },
            "id": {
              "description": "Unique identifier of the customer bill on demand request given by the server",
              "type": "string"
            },
            "relatedParty": {
              "swagger_ref": "#/components/schemas/RelatedPartyRef"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "state": {
              "swagger_ref": "#/components/schemas/StateValues"
            },
            "name": {
              "description": "Friendly name to identify the customer bill on demand request",
              "type": "string"
            },
            "customerBill": {
              "swagger_ref": "#/components/schemas/BillRef"
            },
            "description": {
              "description": "Additional data describing the customer bill on demand request",
              "type": "string"
            },
            "lastUpdate": {
              "description": "The last date time when the customer bill on demand has been updated",
              "type": "string"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "billingAccount": {
              "swagger_ref": "#/components/schemas/BillingAccountRef"
            }
          },
          "type": "object"
        },
        "Money": {
          "description": "A base / value business entity used to represent money",
          "properties": {
            "unit": {
              "description": "Currency (ISO4217 norm uses 3 letters to define the currency)",
              "type": "string"
            },
            "value": {
              "format": "float",
              "type": "number",
              "description": "A positive floating point number"
            }
          },
          "type": "object"
        },
        "AppliedPayment": {
          "properties": {
            "appliedAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "payment": {
              "swagger_ref": "#/components/schemas/PaymentRef"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            }
          },
          "type": "object",
          "description": "The applied payment is the result of lettering process. It enables to assign automatically or manually part of incoming payment amount to a bill."
        },
        "CustomerBillOnDemand_Create": {
          "type": "object",
          "description": "This resource is used to manage the creation request of a customer bill in real-time (on demand).\nSkipped properties: id,href",
          "properties": {
            "relatedParty": {
              "swagger_ref": "#/components/schemas/RelatedPartyRef"
            },
            "customerBill": {
              "swagger_ref": "#/components/schemas/BillRef"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "billingAccount": {
              "swagger_ref": "#/components/schemas/BillingAccountRef"
            },
            "lastUpdate": {
              "description": "The last date time when the customer bill on demand has been updated",
              "type": "string"
            },
            "name": {
              "description": "Friendly name to identify the customer bill on demand request",
              "type": "string"
            },
            "state": {
              "swagger_ref": "#/components/schemas/StateValues"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "description": {
              "type": "string",
              "description": "Additional data describing the customer bill on demand request"
            }
          }
        },
        "stateValue": {
          "enum": [
            "new",
            "onHold",
            "validated",
            "sent",
            "partiallyPaid",
            "settled"
          ],
          "type": "string",
          "description": ""
        },
        "EntityRef": {
          "type": "object",
          "description": "Entity reference schema to be use for all entityRef class.",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            },
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "type": "string",
              "description": "Reference of the related entity."
            }
          },
          "required": [
            "id"
          ]
        },
        "TimePeriod": {
          "properties": {
            "endDateTime": {
              "type": "string",
              "description": "End of the time period, using IETC-RFC-3339 format",
              "format": "date-time"
            },
            "startDateTime": {
              "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object",
          "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both"
        },
        "EventSubscriptionInput": {
          "required": [
            "callback"
          ],
          "type": "object",
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
          "properties": {
            "callback": {
              "description": "The callback being registered.",
              "type": "string"
            },
            "query": {
              "description": "additional data to be passed",
              "type": "string"
            }
          }
        },
        "Quantity": {
          "description": "An amount in a given unit",
          "properties": {
            "units": {
              "description": "Unit",
              "type": "string"
            },
            "amount": {
              "default": 1,
              "description": "Numeric value in a given unit",
              "format": "float",
              "type": "number"
            }
          },
          "type": "object"
        },
        "PaymentMethodRef": {
          "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit).",
          "properties": {
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "href": {
              "description": "Reference of the payment mean",
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of the payment mean"
            },
            "name": {
              "description": "Name of the payment mean",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        "CustomerBill": {
          "properties": {
            "relatedParty": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedPartyRef"
              }
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "billingAccount": {
              "swagger_ref": "#/components/schemas/BillingAccountRef"
            },
            "state": {
              "swagger_ref": "#/components/schemas/stateValue"
            },
            "taxIncludedAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "billNo": {
              "type": "string",
              "description": "Bill reference known by the customer or the party and displayed on the bill. Could be different from the id"
            },
            "appliedPayment": {
              "items": {
                "swagger_ref": "#/components/schemas/AppliedPayment"
              },
              "type": "array"
            },
            "financialAccount": {
              "swagger_ref": "#/components/schemas/FinancialAccountRef"
            },
            "paymentDueDate": {
              "description": "Date at which the amount due should have been paid",
              "format": "date-time",
              "type": "string"
            },
            "remainingAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "billDate": {
              "description": "Bill date",
              "format": "date-time",
              "type": "string"
            },
            "nextBillDate": {
              "format": "date-time",
              "type": "string",
              "description": "). Approximate date of  the next bill production given for information (only used for onCycle bill)"
            },
            "taxItem": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/TaxItem"
              }
            },
            "runType": {
              "description": "onCycle (a bill can be created as a result of a cycle run) or offCycle (a bill can be created as a result of other events such as customer request or account close)",
              "type": "string"
            },
            "billingPeriod": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "href": {
              "type": "string",
              "description": "Bill unique reference"
            },
            "lastUpdate": {
              "description": "Date of bill last update",
              "format": "date-time",
              "type": "string"
            },
            "amountDue": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "billDocument": {
              "items": {
                "swagger_ref": "#/components/schemas/AttachmentRefOrValue"
              },
              "type": "array"
            },
            "category": {
              "type": "string",
              "description": "Category of the bill produced : normal, duplicate, interim, last, trial customer or credit note for example"
            },
            "paymentMethod": {
              "swagger_ref": "#/components/schemas/PaymentMethodRef"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of he bill"
            },
            "taxExcludedAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            }
          },
          "type": "object",
          "description": "The billing account receives all charges (recurring, one time and usage) of the offers and products assigned to it during order process. Periodically according to billing cycle specifications attached to the billing account or as a result of an event, a customer bill (aka invoice) is produced. This customer bill concerns different related parties which play a role on it : for example, a customer bill is produced by an operator, is sent to a bill receiver and has to be paid by a payer.\nA payment method could be assigned to the customer bill to build the call of payment. Lettering process enables to assign automatically or manually incoming amount from payments to customer bills (payment items).\nA tax item is created for each tax rate used in the customer bill.\nThe financial account represents a financial entity which records all customer’s accounting events : payment amount are recorded as credit and invoices amount are recorded as debit. It gives the customer overall balance (account balance).\nThe customer bill is linked to one or more documents that can be downloaded via a provided url."
        },
        "AppliedBillingTaxRate": {
          "properties": {
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "taxAmount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "taxCategory": {
              "description": "A categorization of the tax rate",
              "type": "string"
            },
            "taxRate": {
              "format": "float",
              "type": "number",
              "description": "Applied rate"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object",
          "description": "The applied billing tax rate represents taxes applied billing rate it refers to. It is calculated during the billing process."
        },
        "AccountBalance": {
          "required": [
            "amount",
            "balanceType",
            "validFor"
          ],
          "type": "object",
          "description": "Balances linked to the account",
          "properties": {
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "amount": {
              "swagger_ref": "#/components/schemas/Money"
            },
            "balanceType": {
              "description": "Type of the balance : deposit balance, disputed balance, loyalty balance, receivable balance...",
              "type": "string"
            }
          }
        },
        "CustomerBill_Update": {
          "description": "The billing account receives all charges (recurring, one time and usage) of the offers and products assigned to it during order process. Periodically according to billing cycle specifications attached to the billing account or as a result of an event, a customer bill (aka invoice) is produced. This customer bill concerns different related parties which play a role on it : for example, a customer bill is produced by an operator, is sent to a bill receiver and has to be paid by a payer.\nA payment method could be assigned to the customer bill to build the call of payment. Lettering process enables to assign automatically or manually incoming amount from payments to customer bills (payment items).\nA tax item is created for each tax rate used in the customer bill.\nThe financial account represents a financial entity which records all customer’s accounting events : payment amount are recorded as credit and invoices amount are recorded as debit. It gives the customer overall balance (account balance).\nThe customer bill is linked to one or more documents that can be downloaded via a provided url.\nSkipped properties: id,href,amountDue,appliedPayment,billDate,billDocument,billNo,billingAccount,billingPeriod,category,financialAccount,lastUpdate,nextBillDate,paymentDueDate,paymentMethod,relatedParty,remainingAmount,runType,taxExcludedAmount,taxIncludedAmount,taxItem",
          "properties": {
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "state": {
              "swagger_ref": "#/components/schemas/stateValue"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            }
          },
          "type": "object"
        },
        "EventSubscription": {
          "properties": {
            "callback": {
              "description": "The callback being registered.",
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Id of the listener"
            },
            "query": {
              "description": "additional data to be passed",
              "type": "string"
            }
          },
          "required": [
            "callback",
            "id"
          ],
          "type": "object",
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
        }
      }
    },
    "info": {
      "description": "## TMF API Reference: TMF 678 - Customer bill Management\n\n### Release: 19.5 - December 2019\n\nThe Customer Bill Management API allows to find and retrieve one or several customer bills (also called invoices) produced for a customer. A customer bill is an electronic or paper document produced at the end of the billing process. The customer bill gathers and displays different items (applied customer billing rates generated during the rating and billing processes) to be charged to a customer. It represents a total amount due for all the products during the billing period and all significant information like dates, bill reference...\nThis API provides also operations to find and retrieve the details of applied customer billing rates presented on a customer bill. \nFinally, this API allows to request in real-time a customer bill creation and to manage this request.\n\n### Resources \n- customerBill\n- appliedCustomerBillingRate\n- customerBillOnDemand\n- billingCycle\n\n### Operations\nCustomer Bill Management API performs the following operations :\n- Retrieve a customer bill or a collection of customer bills depending on filter criteria.\n- Partial update of  a customer bill (for administration purposes).\n-  Retrieve an applied customer billing rate or a collection of applied customer billing rates depending on filter criteria.\n-  Create a customer bill on demand request, retrieve one or a collection of  customer bill on demand request(s) depending on filter criteria.\n\n- Manage notification of events on customer bill and customer bill on demand.\n\nCopyright © TM Forum 2018. All Rights Reserved.",
      "title": "TMF678-Customer Bill",
      "version": "4.0.0"
    },
    "openapi": "3.0.1",
    "paths": {
      "/customerBill/{id}": {
        "get": {
          "summary": "Retrieves a CustomerBill by ID",
          "tags": [
            "customerBill"
          ],
          "description": "This operation retrieves a CustomerBill entity. Attribute selection is enabled for all first level attributes.",
          "operationId": "retrieveCustomerBill",
          "parameters": [
            {
              "description": "Identifier of the CustomerBill",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "fields",
              "schema": {
                "type": "string"
              },
              "description": "Comma-separated properties to provide in response"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CustomerBill"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        },
        "patch": {
          "operationId": "patchCustomerBill",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the CustomerBill",
              "in": "path",
              "name": "id",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/CustomerBill_Update"
                }
              }
            },
            "description": "The CustomerBill to be updated",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CustomerBill"
                  }
                }
              },
              "description": "Updated"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Updates partially a CustomerBill",
          "tags": [
            "customerBill"
          ],
          "x-codegen-request-body-name": "customerBill",
          "description": "This operation updates partially a CustomerBill entity."
        }
      },
      "/customerBillOnDemand": {
        "get": {
          "summary": "List or find CustomerBillOnDemand objects",
          "tags": [
            "customerBillOnDemand"
          ],
          "description": "This operation list or find CustomerBillOnDemand entities",
          "operationId": "listCustomerBillOnDemand",
          "parameters": [
            {
              "description": "Comma-separated properties to be provided in response",
              "in": "query",
              "name": "fields",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Requested index for start of resources to be provided in response",
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer"
              }
            },
            {
              "description": "Requested number of resources to be provided in response",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "headers": {
                "X-Result-Count": {
                  "description": "Actual number of items returned in the response body",
                  "schema": {
                    "type": "integer"
                  }
                },
                "X-Total-Count": {
                  "schema": {
                    "type": "integer"
                  },
                  "description": "Total number of items matching criteria"
                }
              },
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/CustomerBillOnDemand"
                    }
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        },
        "post": {
          "summary": "Creates a CustomerBillOnDemand",
          "tags": [
            "customerBillOnDemand"
          ],
          "x-codegen-request-body-name": "customerBillOnDemand",
          "description": "This operation creates a CustomerBillOnDemand entity.",
          "operationId": "createCustomerBillOnDemand",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/CustomerBillOnDemand_Create"
                }
              }
            },
            "description": "The CustomerBillOnDemand to be created",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CustomerBillOnDemand"
                  }
                }
              },
              "description": "Created"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      },
      "/customerBillOnDemand/{id}": {
        "get": {
          "description": "This operation retrieves a CustomerBillOnDemand entity. Attribute selection is enabled for all first level attributes.",
          "operationId": "retrieveCustomerBillOnDemand",
          "parameters": [
            {
              "description": "Identifier of the CustomerBillOnDemand",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "fields",
              "schema": {
                "type": "string"
              },
              "description": "Comma-separated properties to provide in response",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/CustomerBillOnDemand"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Retrieves a CustomerBillOnDemand by ID",
          "tags": [
            "customerBillOnDemand"
          ]
        }
      },
      "/hub": {
        "post": {
          "tags": [
            "events subscription"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
          "operationId": "registerListener",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/EventSubscriptionInput"
                }
              }
            },
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Subscribed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Register a listener"
        }
      },
      "/hub/{id}": {
        "delete": {
          "tags": [
            "events subscription"
          ],
          "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
          "operationId": "unregisterListener",
          "parameters": [
            {
              "description": "The id of the registered listener",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method not allowed"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Unregister a listener"
        }
      },
      "/appliedCustomerBillingRate": {
        "get": {
          "summary": "List or find AppliedCustomerBillingRate objects",
          "tags": [
            "appliedCustomerBillingRate"
          ],
          "description": "This operation list or find AppliedCustomerBillingRate entities",
          "operationId": "listAppliedCustomerBillingRate",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Comma-separated properties to be provided in response",
              "in": "query",
              "name": "fields"
            },
            {
              "name": "offset",
              "schema": {
                "type": "integer"
              },
              "description": "Requested index for start of resources to be provided in response",
              "in": "query"
            },
            {
              "description": "Requested number of resources to be provided in response",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "headers": {
                "X-Result-Count": {
                  "description": "Actual number of items returned in the response body",
                  "schema": {
                    "type": "integer"
                  }
                },
                "X-Total-Count": {
                  "description": "Total number of items matching criteria",
                  "schema": {
                    "type": "integer"
                  }
                }
              },
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/AppliedCustomerBillingRate"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/appliedCustomerBillingRate/{id}": {
        "get": {
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/AppliedCustomerBillingRate"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Retrieves a AppliedCustomerBillingRate by ID",
          "tags": [
            "appliedCustomerBillingRate"
          ],
          "description": "This operation retrieves a AppliedCustomerBillingRate entity. Attribute selection is enabled for all first level attributes.",
          "operationId": "retrieveAppliedCustomerBillingRate",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the AppliedCustomerBillingRate",
              "in": "path",
              "name": "id",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Comma-separated properties to provide in response",
              "in": "query",
              "name": "fields"
            }
          ]
        }
      },
      "/customerBill": {
        "get": {
          "responses": {
            "200": {
              "description": "Success",
              "headers": {
                "X-Result-Count": {
                  "description": "Actual number of items returned in the response body",
                  "schema": {
                    "type": "integer"
                  }
                },
                "X-Total-Count": {
                  "description": "Total number of items matching criteria",
                  "schema": {
                    "type": "integer"
                  }
                }
              },
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/CustomerBill"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "List or find CustomerBill objects",
          "tags": [
            "customerBill"
          ],
          "description": "This operation list or find CustomerBill entities",
          "operationId": "listCustomerBill",
          "parameters": [
            {
              "description": "Comma-separated properties to be provided in response",
              "in": "query",
              "name": "fields",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer"
              },
              "description": "Requested index for start of resources to be provided in response"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer"
              },
              "description": "Requested number of resources to be provided in response"
            }
          ]
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebbb"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/customerBill",
      "method": "GET"
    },
    {
      "endptRegex": "/customerBill/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/customerBill/{id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/customerBillOnDemand",
      "method": "GET"
    },
    {
      "endptRegex": "/customerBillOnDemand",
      "method": "POST"
    },
    {
      "endptRegex": "/customerBillOnDemand/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/hub",
      "method": "POST"
    },
    {
      "endptRegex": "/hub/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/appliedCustomerBillingRate",
      "method": "GET"
    },
    {
      "endptRegex": "/appliedCustomerBillingRate/{id}",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357892"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357892"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebbe"
  },
  "swaggerSpec": null,
  "version": "",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebbd"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357896"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357896"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebc0"
  },
  "swaggerSpec": {
    "components": {
      "schemas": {
        "models.TimePeriod": {
          "type": "object",
          "properties": {
            "endDateTime": {
              "type": "string",
              "format": "date-time",
              "example": "2019-06-13T00:00:00Z"
            },
            "startDateTime": {
              "type": "string",
              "format": "date-time example: 2018-06-13T00:00Z"
            }
          }
        },
        "models.Account": {
          "type": "object",
          "properties": {
            "@referredType": {
              "type": "string",
              "example": "Account"
            },
            "@schemaLocation": {
              "type": "string",
              "example": "https://tmf-schema.s3.ap-southeast-1.amazonaws.com/create_customer_account.json"
            },
            "@type": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string",
              "example": "Mobile Account"
            },
            "@baseType": {
              "type": "string"
            }
          }
        },
        "models.ContactMedium": {
          "type": "object",
          "properties": {
            "preferred": {
              "type": "boolean",
              "example": false
            },
            "validFor": {
              "type": "object"
            },
            "@baseType": {
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            },
            "characteristic": {
              "type": "object"
            },
            "mediumType": {
              "example": "telephone number",
              "type": "string"
            }
          }
        },
        "models.CustomerCreate": {
          "type": "object",
          "properties": {
            "contactMedium": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "@baseType": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            },
            "validFor": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "status": {
              "type": "string"
            },
            "statusReason": {
              "type": "string"
            },
            "agreement": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "@schemaLocation": {
              "type": "string",
              "example": "https://tmf-schema.s3.ap-southeast-1.amazonaws.com/create_customer_extra.json"
            },
            "account": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "engagedParty": {
              "type": "object"
            },
            "name": {
              "type": "string",
              "example": "Individual"
            },
            "paymentMethod": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "creditProfile": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "characteristic": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "models.Error": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "referenceError": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "@baseType": {
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            }
          }
        },
        "models.Customer": {
          "type": "object",
          "properties": {
            "validFor": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "@schemaLocation": {
              "type": "string"
            },
            "account": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "paymentMethod": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "status": {
              "type": "string"
            },
            "href": {
              "type": "string"
            },
            "statusReason": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            },
            "@baseType": {
              "type": "string"
            },
            "agreement": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "creditProfile": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "engagedParty": {
              "type": "object"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "models.MediumCharacteristic": {
          "properties": {
            "postCode": {
              "type": "string"
            },
            "city": {
              "type": "string",
              "example": "SYDNEY"
            },
            "country": {
              "example": "Australia",
              "type": "string"
            },
            "faxNumber": {
              "type": "string"
            },
            "emailAddress": {
              "type": "string",
              "example": "chandra@circles.asia"
            },
            "stateOrProvince": {
              "type": "string",
              "example": "NSW"
            },
            "@schemaLocation": {
              "type": "string"
            },
            "street2": {
              "type": "string"
            },
            "socialNetworkID": {
              "type": "string"
            },
            "phoneNumber": {
              "type": "string"
            },
            "contactType": {
              "example": "fixed home",
              "type": "string"
            },
            "street1": {
              "example": "No. 45 henderson street",
              "type": "string"
            },
            "@baseType": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "models.RelatedParty": {
          "type": "object",
          "properties": {
            "@schemaLocation": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            },
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "@baseType": {
              "type": "string"
            },
            "@referredType": {
              "type": "string"
            }
          }
        },
        "models.Agreement": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "@baseType": {
              "type": "string"
            },
            "@referredType": {
              "example": "Agreement",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "example": "https://tmf-schema.s3.ap-southeast-1.amazonaws.com/create_customer_agreement.json"
            },
            "@type": {
              "type": "string"
            },
            "href": {
              "type": "string"
            }
          }
        },
        "models.Characteristic": {
          "type": "object",
          "properties": {
            "Any": {
              "type": "object"
            },
            "name": {
              "type": "string",
              "example": "personal information"
            },
            "valueType": {
              "type": "string",
              "example": "object"
            },
            "@baseType": {
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            }
          }
        },
        "models.CreditProfile": {
          "properties": {
            "creditScore": {
              "type": "integer"
            },
            "validFor": {
              "type": "object"
            },
            "@baseType": {
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string"
            },
            "@type": {
              "type": "string"
            },
            "creditProfileDate": {
              "type": "string",
              "format": "date-time"
            },
            "creditRiskRating": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "models.CustomerUpdate": {
          "type": "object",
          "properties": {
            "relatedParty": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "@schemaLocation": {
              "type": "string"
            },
            "creditProfile": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "@baseType": {
              "type": "string"
            },
            "characteristic": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "statusReason": {
              "type": "string"
            },
            "contactMedium": {
              "items": {
                "type": "object"
              },
              "type": "array"
            },
            "status": {
              "type": "string"
            },
            "account": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "agreement": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "paymentMethod": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "@type": {
              "type": "string"
            },
            "validFor": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "engagedParty": {
              "type": "object"
            }
          }
        },
        "models.PaymentMethod": {
          "type": "object",
          "properties": {
            "href": {
              "type": "string"
            },
            "id": {
              "type": "string",
              "example": "2915621328143072"
            },
            "name": {
              "type": "string"
            },
            "@baseType": {
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "example": "PaymentMethod"
            },
            "@schemaLocation": {
              "type": "string",
              "example": "https://tmf-schema.s3.ap-southeast-1.amazonaws.com/create_customer_payment.json"
            },
            "@type": {
              "type": "string"
            }
          }
        }
      }
    },
    "openapi": "3.0.1",
    "info": {
      "title": "Circles BSS Customer Management",
      "description": "Circles BSS compliant with TMF Customer Management specification",
      "contact": {
        "name": "Labs",
        "email": "labs@circles.asia"
      },
      "version": "4.0"
    },
    "servers": [
      {
        "url": "http://localhost:3000//v1"
      }
    ],
    "tags": null,
    "paths": {
      "/customer": {
        "post": {
          "operationId": "create-customer",
          "requestBody": {
            "description": "Create Customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "405": {
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "customer",
          "tags": [
            "Customer"
          ],
          "summary": "Create a new customer",
          "description": "create customer"
        },
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Forbidden"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Customer"
          ],
          "summary": "List or find Customer objects",
          "description": "This operation list or find Customer entities",
          "operationId": "listCustomer",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated properties to be provided",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "integer"
              },
              "name": "offset",
              "in": "query",
              "description": "Requested index for start of resources to be provided"
            },
            {
              "in": "query",
              "description": "Requested number of resources to be provided",
              "schema": {
                "type": "integer"
              },
              "name": "limit"
            }
          ]
        }
      },
      "/customer/{id}": {
        "get": {
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "@baseType": {
                        "type": "string"
                      },
                      "@schemaLocation": {
                        "type": "string"
                      },
                      "@type": {
                        "type": "string"
                      },
                      "href": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "statusReason": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "405": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Method Not Allowed"
            },
            "409": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "Customer"
          ],
          "summary": "Retrieves a Customer by ID",
          "description": "This operation retrieves a Customer entity. Attribute selection is enabled for all first level attributes.",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "id",
              "in": "path",
              "description": "Identifier of the Customer"
            },
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated properties to provide in response",
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "delete": {
          "description": "This operation deletes a Customer entity.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier of the Customer",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "405": {
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "tags": [
            "Customer"
          ],
          "summary": "Deletes a Customer"
        },
        "patch": {
          "description": "This operation updates a Customer entity partially.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Identifier of the Customer",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The Customer to be updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "405": {
              "description": "Method Not Allowed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "customer",
          "tags": [
            "Customer"
          ],
          "summary": "Updates a Customer partially"
        }
      }
    }
  },
  "version": "2021/10/25",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebbf"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/customer",
      "method": "GET"
    },
    {
      "endptRegex": "/customer",
      "method": "POST"
    },
    {
      "endptRegex": "/customer/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/customer/{id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/customer/{id}",
      "method": "DELETE"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357899"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357899"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebc2"
  },
  "swaggerSpec": null,
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebc1"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357902"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357902"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebc4"
  },
  "swaggerSpec": null,
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebc3"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357909"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357909"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebc6"
  },
  "swaggerSpec": {
    "paths": {
      "/v3/{country}/{locale}/{tenant}/devices/{device_id}/update": {
        "post": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "device api-v3"
          ],
          "summary": "Updates device",
          "description": "This API will update device information",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "device_id",
              "in": "path",
              "description": "Device ID"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserDeviceUpdateModel"
                }
              }
            },
            "required": true,
            "description": "Request Payload"
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{user_id}/upload-profile": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "user_profile_picture"
                  ],
                  "properties": {
                    "user_profile_picture": {
                      "description": "profile picture",
                      "format": "binary",
                      "type": "string"
                    }
                  }
                }
              },
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "user_profile_picture"
                  ],
                  "properties": {
                    "user_profile_picture": {
                      "type": "string",
                      "description": "profile picture",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "user api-v2"
          ],
          "summary": "upload user profile picture",
          "description": "upload user profile picture by userID",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            }
          ]
        }
      },
      "/v2/permissions/assign": {
        "post": {
          "tags": [
            "authorization"
          ],
          "summary": "assign multiple permissions and resources to user.",
          "description": "assign multiple resources and permission to specific user. all permissions should be created before assign.",
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.AssignPermissionRequest"
                }
              }
            },
            "required": true,
            "description": "assign System Level Permission without resource"
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v3/{locale}/users/verification/otp/send": {
        "post": {
          "description": "send OTP to user's email or phone.",
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.VerifyUserSendOtpRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.OtpResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "OTP api-v3"
          ],
          "summary": "send OTP"
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/register": {
        "post": {
          "summary": "Register",
          "description": "This will Register for user",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-Auth",
              "in": "header",
              "description": "auth token"
            },
            {
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true
            },
            {
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale"
            },
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.RegisterRequest"
                }
              }
            },
            "required": true,
            "description": "Request payload"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Guest login api-v4"
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/logout": {
        "post": {
          "requestBody": {
            "required": true,
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.LogoutUserRequestModel"
                }
              }
            }
          },
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login api-v3"
          ],
          "summary": "logout",
          "description": "validate auth_token and remove login entry for that device and update in audit log.",
          "parameters": [
            {
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header"
            }
          ]
        }
      },
      "/users/login": {
        "post": {
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserLoginRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login"
          ],
          "summary": "user login",
          "description": "user login with email or phone number. This api will return auth_token if success."
        }
      },
      "/users/merge": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "merge two user",
          "description": "delete one user and merge to another user.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "boolean"
              },
              "name": "otp-check",
              "in": "header",
              "description": "Skip otp check"
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserMergeRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/users/auth/google": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "oauth"
          ],
          "summary": "register with google",
          "description": "get user information from google and create user.",
          "parameters": [
            {
              "in": "path",
              "description": "Google Token",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "token"
            },
            {
              "name": "device_id",
              "in": "path",
              "description": "Device ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "device_type",
              "in": "path",
              "description": "Device Type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Login Duration should be at least 60 mins",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "name": "login_duration",
              "in": "path"
            }
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}/remove": {
        "delete": {
          "description": "remove translation message id from cache and system.",
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "message_id",
              "in": "path",
              "description": "Message ID",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "namespace",
              "in": "path",
              "description": "Namespace"
            }
          ],
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "translation api-v3"
          ],
          "summary": "delete translation message"
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/attributes": {
        "patch": {
          "summary": "Update user",
          "description": "This will update for user",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-Auth",
              "in": "header",
              "description": "auth token"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header",
              "description": "device id"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path",
              "description": "Country"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant"
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UserAuthUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Guest login api-v4"
          ]
        }
      },
      "/v2/permissions/namespaces": {
        "get": {
          "description": "Get namespace list",
          "parameters": [
            {
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "authorization"
          ],
          "summary": "retrieve all namespaces"
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/update-billing-email": {
        "post": {
          "responses": {
            "202": {
              "content": {}
            },
            "404": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user api-v3"
          ],
          "summary": "update billing address from profile page",
          "description": "This api will update the billing emailID in BSS as well as in telco collection.",
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.EmailUpdateRequestModel"
                }
              }
            },
            "required": true
          }
        }
      },
      "/users/auth/otp/{auth_id}": {
        "get": {
          "description": "retrieve OTP code by Auth ID.",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "auth_id",
              "in": "path",
              "description": "Auth ID",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.GetOtpResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "OTP"
          ],
          "summary": "get OTP code"
        }
      },
      "/v2/permissions/{user_id}/authorized": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.AuthorizedResourceRequest"
                }
              }
            },
            "required": false,
            "description": "Resource is required for user level permission."
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "authorization"
          ],
          "summary": "authorization check for other services",
          "description": "check the user is permitted to manage the specific resource",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id"
            }
          ]
        }
      },
      "/v2/{country}/{locale}/{tenant}/users/auth/otp/validate": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.OtpAuthenticationModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "OTP api-v3"
          ],
          "summary": "validate OTP code",
          "description": "validate OTP code and Auth ID from user.",
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.OtpValidationModel"
                }
              }
            },
            "required": true
          }
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/marketing/{user_id}": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            },
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PresentationSuccessResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Marketing api-v3"
          ],
          "summary": "get marketing preferences",
          "description": "This api will get marketing preferences for given user id for specified tenants if requester is authorised."
        },
        "put": {
          "summary": "set marketing preferences",
          "description": "This api will set marketing preferences for given user id for specified tenants if requester is authorised.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "marketing_option_key:boolean_value key-value pair",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.MarketingOptionsSetReq"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PresentationSuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Marketing api-v3"
          ]
        }
      },
      "/users/register": {
        "post": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ],
          "summary": "register new user",
          "description": "register new user with email or phone number. if auth_required param is true, this api will return auth_token instead of model.UserModel.",
          "requestBody": {
            "description": "email or phone_no should not be blank.",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserRegisterRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserModel"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/billing-address-update": {
        "post": {
          "summary": "update billing address",
          "description": "update telco account billing address",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.AccountAddressUpdateRequest"
                }
              }
            },
            "required": true,
            "description": "Request payload"
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Telco api-v3"
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/number-changed": {
        "post": {
          "summary": "change user mobile number",
          "description": "Update existing user's phone no with new one",
          "parameters": [
            {
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header"
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.NumberChangedRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user api-v3"
          ]
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/devices": {
        "put": {
          "description": "This will update device",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-Auth",
              "in": "header",
              "description": "auth token"
            },
            {
              "name": "X-DeviceId",
              "in": "header",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.DeviceRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "update device"
        }
      },
      "/v3/{country}/{locale}/users/number-change/portin": {
        "post": {
          "description": "port in success request creation with temp number",
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.PortInRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user api-v3"
          ],
          "summary": "port in success request creation with temp number and phone_number"
        }
      },
      "/v2/users/permission-groups/assign": {
        "post": {
          "summary": "assign permission group to user.",
          "description": "assign permission groups to user.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UpsertPermissionGroupForUser"
                }
              }
            },
            "required": true,
            "description": "permission group payload"
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "permission group"
          ]
        }
      },
      "/users/login/{user_id}/cooldown_refresh_token": {
        "post": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.RefreshTokenRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login"
          ],
          "summary": "refresh auth token",
          "description": "validate old auth_token and update expired time and login time for new auth_token."
        }
      },
      "/users/{user_id}/profile": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "retrieve user profile",
          "description": "get user by User ID",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "in": "query",
              "description": "get user dervies by devices",
              "schema": {
                "type": "boolean"
              },
              "name": "devices"
            },
            {
              "schema": {
                "type": "boolean"
              },
              "name": "deleted",
              "in": "query",
              "description": "get deleted user"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/public-keys": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/infrastructures.PublicKeys"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "auth"
          ],
          "summary": "public keys for jwt token",
          "description": "public keys for jwt token"
        }
      },
      "/users/login/otp": {
        "post": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login"
          ],
          "summary": "user login with OTP",
          "description": "This api will validate OTP code and Auth ID. It will return auth_token, if success.",
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.OtpValidationModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/auth/otp/send": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.SendOtpRequest"
                }
              }
            },
            "required": true,
            "description": "Request payload"
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.OtpResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "OTP api-v3"
          ],
          "summary": "send OTP",
          "description": "send OTP to user's email or phone. Has a cooldown time for requests."
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/register/{isd_phone}": {
        "post": {
          "description": "This api will verify the OTP code while registration . If the OTP is correct, it will set confirmation is true. Note: need to get the OTP before call this api. Ref: /users/otp/send",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserRegisterRequest"
                }
              }
            },
            "required": true,
            "description": "Request Payload"
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginRequestModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user api-v3"
          ],
          "summary": "register new user with otp,"
        }
      },
      "/v2/users/{user_id}/change/{channel}": {
        "post": {
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ],
          "summary": "change auth channel",
          "description": "This API will validate AuthID and OTP code. And, If validation is sucess, it will set new email or phone no. to the system.",
          "parameters": [
            {
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id"
            },
            {
              "description": "Channel",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "channel",
              "in": "path"
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.ChangeChannelRequestModel"
                }
              }
            },
            "required": true
          }
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/token": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "Refresh token",
          "description": "This will Refresh token for user",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-Auth",
              "in": "header",
              "description": "auth token"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header",
              "description": "device id"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path",
              "description": "Country"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true
            }
          ]
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/otp": {
        "post": {
          "summary": "User send otp",
          "description": "This will Send user otp on email/ mobile",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-Auth",
              "in": "header",
              "description": "auth token"
            },
            {
              "in": "header",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId"
            },
            {
              "description": "Country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path"
            },
            {
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant"
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UserOtpRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Guest login api-v4"
          ]
        }
      },
      "/v3/{country}/{locale}/users/create-account/portin": {
        "post": {
          "tags": [
            "user api-v3"
          ],
          "summary": "port in request creation with temp number",
          "description": "port in request creation with temp number",
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.PortInRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "404": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v2/users/login/status": {
        "post": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login"
          ],
          "summary": "facilitates the on boarding journey of the user",
          "description": "blocks the login on portin Numbers & Allow login on temporary numbers",
          "requestBody": {
            "required": true,
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.StatusCheckRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserStatusCheckResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v4/{country}/{locale}/{tenant}/otp": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.AuthResponse"
                  }
                }
              }
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Otp flow api-v4"
          ],
          "summary": "SendOtp",
          "description": "This will SendOtp",
          "parameters": [
            {
              "name": "X-DeviceId",
              "in": "header",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path",
              "description": "locale"
            },
            {
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path"
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.OtpRequest"
                }
              }
            },
            "required": true
          }
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/otp/validate": {
        "post": {
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.ValidateOtpRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.AuthResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "ValidateOtp",
          "description": "This will ValidateOtp",
          "parameters": [
            {
              "name": "X-Auth",
              "in": "header",
              "description": "auth token",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-DeviceId",
              "in": "header",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path",
              "description": "locale"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant"
            }
          ]
        }
      },
      "/v3/{country}/{locale}/users/telco/upsert": {
        "post": {
          "responses": {
            "202": {
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user api-v3"
          ],
          "summary": "ProcessUpsertRequest request resolve discrepancy in user-accounts.",
          "description": "ProcessUpsertRequest request resolve discrepancy in user-accounts.",
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UpsertRequest"
                }
              }
            },
            "required": true
          }
        }
      },
      "/users/register/otp": {
        "post": {
          "summary": "register new user with OTP",
          "description": "This api will verify the OTP code while registration. If the OTP is correct, it will set confirmation is true. Note: need to get the OTP before call this api. Ref: /users/otp/send",
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserOTPRegisterRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserModel"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/login": {
        "post": {
          "description": "This api will validate OTP code and Auth ID. It will return auth_token, if success.",
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.LoginRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login api-v2"
          ],
          "summary": "user login with OTP"
        }
      },
      "/v2/users/{user_id}/permissions": {
        "get": {
          "summary": "get assigned permissions for specific user.",
          "description": "retrieve assigned permission for user.",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.UserPermission"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "authorization"
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/login/action": {
        "post": {
          "tags": [
            "login api-v3"
          ],
          "summary": "facilitates the on boarding journey of the user",
          "description": "provides actions corresponding to privileged/unprivileged user login for given email/mobile for a new/registered device",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.ActionsRequest"
                }
              }
            },
            "required": true,
            "description": "Payload"
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ActionsMessageResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/update": {
        "post": {
          "tags": [
            "user api-v3"
          ],
          "summary": "update user information",
          "description": "Update existing user information",
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path",
              "description": "User ID"
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserUpdateRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/logout": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "Logout",
          "description": "This will Logout for user",
          "parameters": [
            {
              "name": "X-Auth",
              "in": "header",
              "description": "auth token",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header"
            },
            {
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true
            }
          ]
        }
      },
      "/users/{user_id}/password/reset": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.ResetPasswordRequestModel"
                }
              }
            },
            "required": true,
            "description": "Request Payload"
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ],
          "summary": "reset password",
          "description": "This api will validate the auth_token and current password with database. Then, if it is success, this api will replace old password with new password to the system.",
          "parameters": [
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/users/login/token": {
        "get": {
          "description": "retrieve user login by user ID. for internal use only.",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "in": "query",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "device_id",
              "in": "query",
              "description": "Device ID"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "device_type",
              "in": "query",
              "description": "Device Type",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "login"
          ],
          "summary": "retrieve auth_token by user ID"
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/remove": {
        "delete": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ],
          "summary": "soft delete user",
          "description": "disable user from the system.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.DeleteUserRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v3/{country}/{locale}/{tenant}/translations/{namespace}/messages": {
        "get": {
          "description": "retrieve translation messages by namespace.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "namespace",
              "in": "path",
              "description": "Namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.TranslationMessage"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "translation api-v3"
          ],
          "summary": "retrieve translation messages"
        }
      },
      "/v2/users/permission-groups/revoke": {
        "delete": {
          "description": "revoke permission groups from user.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "permission group payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.RevokePermissionGroupForUser"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "permission group"
          ],
          "summary": "revoke permission group from user."
        }
      },
      "/ecom_users/{user_id}/profile": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "retrieve user profile",
          "description": "get user by User ID",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true
            },
            {
              "schema": {
                "type": "boolean"
              },
              "name": "devices",
              "in": "query",
              "description": "get user dervies by devices"
            },
            {
              "name": "deleted",
              "in": "query",
              "description": "get deleted user",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v4/{country}/{locale}/{tenant}/users": {
        "get": {
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "Get user",
          "description": "This will Get user",
          "parameters": [
            {
              "name": "X-Auth",
              "in": "header",
              "description": "auth token",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header",
              "description": "device id",
              "required": true
            },
            {
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path",
              "description": "locale"
            },
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "description": "include_device",
              "schema": {
                "type": "boolean"
              },
              "name": "devices"
            },
            {
              "name": "include_telco",
              "in": "query",
              "description": "include_telco",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "in": "query",
              "description": "include_identifier",
              "schema": {
                "type": "boolean"
              },
              "name": "include_identifier"
            },
            {
              "name": "include_profile_setting",
              "in": "query",
              "description": "include_profile_setting",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "description": "include_deleted",
              "schema": {
                "type": "boolean"
              },
              "name": "deleted",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "internal server error"
            }
          }
        },
        "put": {
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "Update user",
          "description": "This will Update user",
          "parameters": [
            {
              "name": "X-Auth",
              "in": "header",
              "description": "auth token",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true
            },
            {
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UserUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload"
        },
        "post": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "GetGuestToken",
          "description": "This will Get  guest token for dashboard",
          "parameters": [
            {
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.DeviceRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/kyc": {
        "get": {
          "summary": "Get user kyc for specific user",
          "description": "This api will get the saved kyc or fetch from ecom and return kyc.",
          "parameters": [
            {
              "in": "path",
              "description": "userid",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PresentationSuccessResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "KYC api-v3"
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}/update": {
        "post": {
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UpdateTranslationsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.TranslationMessage"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "translation api-v3"
          ],
          "summary": "update translation message",
          "description": "update translation message id from cache and system.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "message_id",
              "in": "path",
              "description": "Message ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "namespace",
              "in": "path",
              "description": "Namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "apply_later",
              "in": "query",
              "description": "Apply change later",
              "required": true
            }
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/profile": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserProfileVM"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "user api-v3"
          ],
          "summary": "retrieve user profile",
          "description": "get user by User ID",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "devices",
              "in": "query",
              "description": "include user devices",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "deleted",
              "in": "query",
              "description": "retrieve deleted user",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "include_telco",
              "in": "query",
              "description": "retrieve telco profile",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "include_identifier",
              "in": "query",
              "description": "retrieve telco user's identifier",
              "schema": {
                "type": "boolean"
              }
            }
          ]
        }
      },
      "/users/login/{user_id}/refresh_token": {
        "post": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id"
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.RefreshTokenRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login"
          ],
          "summary": "refresh auth token",
          "description": "validate old auth_token and update expired time and login time for new auth_token."
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/login": {
        "post": {
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "Login",
          "description": "This will login for user",
          "parameters": [
            {
              "description": "auth token",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-Auth",
              "in": "header"
            },
            {
              "in": "header",
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId"
            },
            {
              "in": "path",
              "description": "Country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "country"
            },
            {
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path"
            },
            {
              "name": "tenant",
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.LoginRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "internal server error"
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/upload-profile": {
        "post": {
          "description": "upload user profile picture by userID",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "properties": {
                    "user_profile_picture": {
                      "type": "string",
                      "description": "profile picture",
                      "format": "binary"
                    }
                  },
                  "required": [
                    "user_profile_picture"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "required": [
                    "user_profile_picture"
                  ],
                  "properties": {
                    "user_profile_picture": {
                      "format": "binary",
                      "type": "string",
                      "description": "profile picture"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Forbidden"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "user api-v3"
          ],
          "summary": "upload user profile picture"
        }
      },
      "/v2/permissions/revoke": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            }
          ],
          "requestBody": {
            "description": "resource type and resoure value is required to revoke resource permission for specific user",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.RevokePermissionRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "authorization"
          ],
          "summary": "revoke permission or resource from user.",
          "description": "revoke system level permission with permission_id without resource and required resource_type and resource_value to revoke resource permission."
        }
      },
      "/v2/permission-groups/{id}/permissions": {
        "post": {
          "description": "Assign permission list to permission group and return failed permissions.",
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            },
            {
              "in": "path",
              "description": "permission group ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "id"
            }
          ],
          "requestBody": {
            "description": "permission group payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UpsertPermissionsForGroup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "permission group"
          ],
          "summary": "update permission group."
        },
        "delete": {
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "id",
              "in": "path",
              "description": "permission group ID",
              "required": true
            }
          ],
          "requestBody": {
            "description": "permission group payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UpsertPermissionsForGroup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "permission group"
          ],
          "summary": "remove permissions from group.",
          "description": "remove permissions from group."
        },
        "get": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "permission group"
          ],
          "summary": "get permissions from permission group.",
          "description": "get permissions from permission group with ID.",
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            },
            {
              "description": "permission group ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "id",
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.CreatePermissionGroupRequest"
                }
              }
            },
            "required": true,
            "description": "permission group payload"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.GroupPermissions"
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/auth/otp/validate": {
        "post": {
          "description": "validate OTP code and Auth ID from user.",
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.OtpValidationModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.OtpAuthenticationModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "OTP"
          ],
          "summary": "validate OTP code"
        }
      },
      "/v3/{country}/{locale}/users/create/{isd_phone}": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserCreateRequest"
                }
              }
            },
            "required": true,
            "description": "Request Payload"
          },
          "responses": {
            "202": {
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user api-v3"
          ],
          "summary": "create user account using isd and phone no",
          "description": "The api creates a user account."
        }
      },
      "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}": {
        "get": {
          "description": "retrieve translation message by message id.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "message_id",
              "in": "path",
              "description": "Message ID",
              "required": true
            },
            {
              "in": "path",
              "description": "Namespace",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "namespace"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.TranslationMessage"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "translation api-v3"
          ],
          "summary": "retrieve translation message"
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/kyc/initiate": {
        "get": {
          "tags": [
            "KYC api-v3"
          ],
          "summary": "Get user kyc for specific user",
          "description": "This api will fetch KYC info from ecom and save",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path",
              "description": "userid"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/verify/{channel}": {
        "post": {
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user api-v3"
          ],
          "summary": "verity auth channel",
          "description": "This API will validate AuthID and OTP code. And, If validation is sucess, it will set true to confirmation of that channel.",
          "parameters": [
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "in": "path",
              "description": "Channel",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "channel"
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.VerifyChannelRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/guests/create": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "guest user"
          ],
          "summary": "create a guest user.",
          "description": "create guest user without email or phone no.",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.GuestCreateRequestModel"
                }
              }
            },
            "required": true,
            "description": "Request payload"
          }
        }
      },
      "/users/{user_id}/devices/{device_id}/update": {
        "post": {
          "requestBody": {
            "required": true,
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserDeviceUpdateModel"
                }
              }
            }
          },
          "responses": {
            "201": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "device"
          ],
          "summary": "Updates device",
          "description": "This API will update device information",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "device_id",
              "in": "path",
              "description": "Device ID",
              "required": true
            },
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            }
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/{user_id}/refresh_token": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.RefreshTokenRequest"
                }
              }
            },
            "required": true,
            "description": "Request payload"
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login api-v3"
          ],
          "summary": "refresh access token",
          "description": "validate old auth_token and update expired time and login time for new auth_token.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/translations/{namespace}/messages/sync": {
        "post": {
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            },
            {
              "in": "path",
              "description": "Namespace",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "namespace"
            }
          ],
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "translation api-v3"
          ],
          "summary": "apply translation message changes by namespace",
          "description": "apply translation message changes by namespace."
        }
      },
      "/v3/{country}/{locale}/{tenant}/translations/message": {
        "post": {
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "description": "Apply change later",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "apply_later"
            }
          ],
          "requestBody": {
            "description": "Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreateTranslationMessageRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.TranslationMessage"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Forbidden"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "translation api-v3"
          ],
          "summary": "add translation message",
          "description": "add translation message id from cache and system."
        }
      },
      "/v3/{country}/{locale}/{tenant}/kyc/update": {
        "put": {
          "responses": {
            "204": {
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "KYC api-v3"
          ],
          "summary": "Update users kyc info after JPEG conversion",
          "description": "This api will update kyc JPEG images path after conversion."
        }
      },
      "/v2/permissions/{perm_id}": {
        "get": {
          "tags": [
            "authorization"
          ],
          "summary": "get permission by exteranal_id",
          "description": "retrieve permission by external_id",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "description": "Permission ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "perm_id",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.Permission"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{user_id}/extend-schema": {
        "get": {
          "description": "This will retrieve user with specific namespace value.",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true
            },
            {
              "name": "namespace",
              "in": "path",
              "description": "namespace",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ExtendedModel"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "user"
          ],
          "summary": "to retrieve user with extend-schema information"
        },
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ExtendedModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "user"
          ],
          "summary": "create extend-schema information for user",
          "description": "This will create extended information for user.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "namespace",
              "in": "path",
              "description": "namespace",
              "required": true
            }
          ]
        }
      },
      "/v2/permissions/create": {
        "post": {
          "tags": [
            "authorization"
          ],
          "summary": "create permission with namespace",
          "description": "create permission for specific service",
          "parameters": [
            {
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CreatePermissionRequestModel"
                }
              }
            },
            "required": true,
            "description": "namespace represents for each service"
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.Permission"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "CreatePermissionRequestModel"
        }
      },
      "/users/password/forgot": {
        "post": {
          "summary": "forgot password",
          "description": "This API will validate AuthID and OTP code. If validation is success, it will update new password to the system. user/otp/send API is needed before using this API.",
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.ForgotPasswordRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ]
        }
      },
      "/{entity}/data": {
        "post": {
          "tags": [
            "generic query"
          ],
          "summary": "generic query to retreive entities from user-service",
          "description": "This api will return entity data which are stored in user-service.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "entity",
              "in": "path",
              "description": "Entity Name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.GenericQuery"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.UserModel"
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/users/remove": {
        "delete": {
          "tags": [
            "user"
          ],
          "summary": "soft delete user",
          "description": "disable user from the system.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.DeleteUserRequest"
                }
              }
            }
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v2/permission-groups": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.CreatePermissionGroupRequest"
                }
              }
            },
            "required": true,
            "description": "permission group payload"
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PermissionGroup"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "permission group"
          ],
          "summary": "create permission group.",
          "description": "create permission group with name.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}/sync": {
        "post": {
          "description": "apply translation message id changes on system.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "message_id",
              "in": "path",
              "description": "Message ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "namespace",
              "in": "path",
              "description": "Namespace",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "translation api-v3"
          ],
          "summary": "apply translation message changes on system."
        }
      },
      "/v3/{country}/{locale}/{tenant}/{product}/users/{user_id}/preferences": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PresentationSuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "Preferences api-v3"
          ],
          "summary": "Get user preferences for specific tenants",
          "description": "This api will get the preferences for given user id for specified tenants if requester is authorised.",
          "parameters": [
            {
              "in": "query",
              "description": "all for getting all",
              "schema": {
                "type": "string"
              },
              "name": "tenant"
            }
          ]
        },
        "put": {
          "responses": {
            "200": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PresentationSuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "Preferences api-v3"
          ],
          "summary": "Add or update user preferences for specific tenants",
          "description": "This api will insert/update the preferences for given user id for specified tenants if requester is authorised.",
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.PreferenceRequestDto"
                }
              }
            },
            "required": true
          }
        },
        "delete": {
          "description": "This api will delete the preferences for given user id for specified tenants if requester is authorised.",
          "parameters": [
            {
              "in": "query",
              "description": "all for deleting all",
              "schema": {
                "type": "string"
              },
              "name": "tenant"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PresentationSuccessResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "*/*": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "tags": [
            "Preferences api-v3"
          ],
          "summary": "delete user preferences for specific tenants"
        }
      },
      "/v2/permissions/{namespace}/all": {
        "get": {
          "description": "Get permissions list from specific service",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "description": "Namespace represents each service (eg. user-service)",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "namespace"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.Permission"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "authorization"
          ],
          "summary": "retrieve permissions for specific service"
        }
      },
      "/v3/{country}/{locale}/{tenant}/users/logout/devices": {
        "post": {
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.LogoutAllDevicesRequest"
                }
              }
            },
            "required": true,
            "description": "Request payload"
          },
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login api-v3"
          ],
          "summary": "logout all user devices",
          "description": "validate auth_token and remove login entry for that device and update in audit log.",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token"
            }
          ]
        }
      },
      "/v2/permissions/update": {
        "put": {
          "requestBody": {
            "description": "Resource is required for user level permission.",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UpdatePermissionRequestModel"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "authorization"
          ],
          "summary": "update permission information",
          "description": "update permission information",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "perm_id",
              "in": "path",
              "description": "Permission ID",
              "required": true
            }
          ]
        }
      },
      "/users/auth/fb": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "token",
              "in": "path",
              "description": "Facebook Token"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "device_id",
              "in": "path",
              "description": "Device ID"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "device_type",
              "in": "path",
              "description": "Device Type"
            },
            {
              "schema": {
                "type": "integer"
              },
              "name": "login_duration",
              "in": "path",
              "description": "Login Duration should be at least 60 mins",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.UserLoginResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "oauth"
          ],
          "summary": "register with facebook",
          "description": "get user information from facebook and create user."
        }
      },
      "/users/{user_id}/verify/{channel}": {
        "post": {
          "description": "This API will validate AuthID and OTP code. And, If validation is sucess, it will set true to confirmation of that channel.",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path",
              "description": "User ID"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "channel",
              "in": "path",
              "description": "Channel",
              "required": true
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.VerifyChannelRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ],
          "summary": "verity auth channel"
        }
      },
      "/v2/permissions": {
        "post": {
          "summary": "find permission by resource_type, resource_id and namespace.",
          "description": "Retrieve created unique permission by by resource_type, resource_id and namespace.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "user_id",
              "in": "path",
              "description": "User ID"
            }
          ],
          "requestBody": {
            "description": "resource_id and resource_type is unique for each namespace",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.Resource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.Permission"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "authorization"
          ]
        }
      },
      "/users/login/{user_id}/invalidate_token": {
        "post": {
          "description": "validate auth_token and remove login entry for that device.",
          "parameters": [
            {
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH"
            },
            {
              "name": "user_id",
              "in": "path",
              "description": "User ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.InvalidateTokenRequestModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login"
          ],
          "summary": "logout"
        }
      },
      "/users/hard-delete": {
        "delete": {
          "description": "delete user from database.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request Payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.DeleteUserRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "user"
          ],
          "summary": "hard delete user"
        }
      },
      "/v4/{country}/{locale}/{tenant}/users/otp/{auth_id}": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.OtpResponse"
                  }
                }
              }
            },
            "500": {
              "description": "internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "Guest login api-v4"
          ],
          "summary": "GetOtp",
          "description": "This will GetOtp",
          "parameters": [
            {
              "in": "header",
              "description": "auth token",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-Auth"
            },
            {
              "description": "device id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "X-DeviceId",
              "in": "header"
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "country",
              "in": "path",
              "description": "Country",
              "required": true
            },
            {
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "locale",
              "in": "path"
            },
            {
              "in": "path",
              "description": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "name": "tenant"
            },
            {
              "name": "auth_id",
              "in": "path",
              "description": "auth id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/v2/permission-groups/{id}": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PermissionGroup"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "permission group"
          ],
          "summary": "get permission group.",
          "description": "get permission group with ID.",
          "parameters": [
            {
              "name": "X-AUTH",
              "in": "header",
              "description": "Auth Token",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "name": "id",
              "in": "path",
              "description": "permission group ID",
              "required": true
            }
          ]
        }
      },
      "/users/auth/otp/send": {
        "post": {
          "description": "send OTP to user's email or phone. Has a cooldown time for requests.",
          "requestBody": {
            "required": true,
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.OtpRequestModel"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.OtpResponseModel"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "OTP"
          ],
          "summary": "send OTP"
        }
      },
      "/users/login/token/validate": {
        "post": {
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload",
          "tags": [
            "login"
          ],
          "summary": "check auth token status",
          "description": "validate auth_token is expired, login or invalid.",
          "requestBody": {
            "description": "Request payload",
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.ValidateTokenRequest"
                }
              }
            },
            "required": true
          }
        }
      },
      "/users/update": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "update user information",
          "description": "Update existing user information",
          "parameters": [
            {
              "description": "Auth Token",
              "schema": {
                "type": "string"
              },
              "name": "X-AUTH",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.UserUpdateRequestModel"
                }
              }
            },
            "required": true,
            "description": "Request Payload"
          },
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "payload"
        }
      }
    },
    "components": {
      "schemas": {
        "request.UserUpdateRequest": {
          "type": "object",
          "properties": {
            "address_line_3": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "image_url": {
              "type": "string"
            },
            "nick_name": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "address": {
              "type": "object",
              "properties": {}
            },
            "address_line_1": {
              "type": "string"
            },
            "postal_code": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "nationality": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "state": {
              "type": "string"
            }
          }
        },
        "model.UserLoginRequestModel": {
          "properties": {
            "user_id": {
              "type": "string"
            },
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "email": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "login_duration": {
              "description": "duration in minutes",
              "type": "integer"
            },
            "password": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.LoginRequest": {
          "type": "object",
          "properties": {
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "email_auth": {
              "swagger_ref": "#/components/schemas/model.Auth"
            },
            "login_mode": {
              "type": "string"
            },
            "mobile_auth": {
              "swagger_ref": "#/components/schemas/model.Auth"
            }
          }
        },
        "request.LoginRequest": {
          "properties": {
            "auth_id": {
              "type": "string"
            },
            "google_auth": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.SendOtpRequest": {
          "type": "object",
          "properties": {
            "request_type": {
              "type": "string"
            },
            "activity": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "device_id": {
              "type": "string"
            },
            "mock": {
              "type": "boolean"
            },
            "otp_duration": {
              "type": "integer"
            },
            "phone_no": {
              "type": "string"
            },
            "auth_mode": {
              "type": "string",
              "description": "SMS EMAIL PUSH etc.,"
            }
          }
        },
        "model.TranslationMessage": {
          "type": "object",
          "properties": {
            "raw_id": {
              "type": "string"
            },
            "translations": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.TranslationLanguage"
              }
            },
            "updated_at": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "message_id": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            }
          }
        },
        "request.UserAuthUpdateRequest": {
          "type": "object",
          "properties": {
            "auth_id": {
              "type": "string"
            }
          }
        },
        "model.ActionsMessageResponse": {
          "type": "object",
          "properties": {
            "actions": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.ActionMetaResponse"
              }
            },
            "message": {
              "type": "string"
            }
          }
        },
        "model.VerifyUserSendOtpRequest": {
          "type": "object",
          "properties": {
            "auth_mode": {
              "type": "string",
              "description": "SMS EMAIL PUSH etc.,"
            },
            "channel": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "mock": {
              "type": "boolean"
            },
            "activity": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "otp_duration": {
              "type": "integer"
            },
            "phone_no": {
              "type": "string"
            },
            "device_id": {
              "type": "string"
            },
            "request_type": {
              "type": "string"
            }
          }
        },
        "request.UserOtpRequest": {
          "properties": {
            "email": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "app_type": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.UserOTPRegisterRequestModel": {
          "properties": {
            "first_name": {
              "type": "string"
            },
            "address": {
              "type": "object",
              "properties": {}
            },
            "address_line_2": {
              "type": "string"
            },
            "auth_required": {
              "type": "boolean"
            },
            "dob": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "image_url": {
              "type": "string"
            },
            "address_line_3": {
              "type": "string"
            },
            "nick_name": {
              "type": "string"
            },
            "override": {
              "type": "boolean"
            },
            "auth_id": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "security_questions": {
              "items": {
                "swagger_ref": "#/components/schemas/model.SecurityQuestion"
              },
              "type": "array"
            },
            "state": {
              "type": "string"
            },
            "otp_code": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "external_id": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "login_duration": {
              "type": "integer"
            },
            "address_line_1": {
              "type": "string"
            },
            "postal_code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "request.CreatePermissionGroupRequest": {
          "type": "object",
          "properties": {
            "created_by": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "model.UserCreateRequest": {
          "properties": {
            "address": {
              "type": "object",
              "properties": {}
            },
            "first_name": {
              "type": "string"
            },
            "override": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.AccountAddressUpdateRequest": {
          "type": "object",
          "properties": {
            "floor_no": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "district": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "house_blk_tower": {
              "type": "string"
            },
            "postal_code": {
              "type": "string"
            },
            "street_building_name": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "unit_no": {
              "type": "string"
            }
          }
        },
        "model.ForgotPasswordRequestModel": {
          "type": "object",
          "properties": {
            "new_password": {
              "type": "string"
            },
            "otp_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "user_id": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            }
          }
        },
        "model.InvalidateTokenRequestModel": {
          "properties": {
            "device_id": {
              "type": "string"
            },
            "auth_token": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.PreferenceValue": {
          "properties": {
            "json": {
              "type": "object",
              "properties": {}
            },
            "list_val": {
              "type": "array"
            },
            "string_val": {
              "type": "string"
            },
            "bool_val": {
              "type": "boolean"
            },
            "float_val": {
              "type": "number"
            },
            "int_val": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.UserMergeRequestModel": {
          "properties": {
            "otp_code": {
              "type": "string"
            },
            "user_id": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "merged_by": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.StatusCheckRequest": {
          "type": "object",
          "properties": {
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "device_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "model.DeleteUserRequest": {
          "type": "object",
          "properties": {
            "deleted_by": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "comment": {
              "type": "string"
            }
          }
        },
        "model.UserLoginResponseModel": {
          "type": "object",
          "properties": {
            "auth_token": {
              "type": "string"
            },
            "first_login": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "model.RefreshTokenRequestModel": {
          "properties": {
            "login_mode": {
              "type": "string"
            },
            "auth_token": {
              "type": "string"
            },
            "delete_on_expires": {
              "type": "boolean"
            },
            "device_id": {
              "type": "string"
            },
            "extension_duration": {
              "type": "integer"
            },
            "force_refresh_token": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.UserDeviceUpdateModel": {
          "type": "object",
          "properties": {
            "flavour": {
              "type": "string"
            },
            "accuracy": {
              "type": "string"
            },
            "app_type": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "device_token": {
              "type": "string"
            },
            "user_agent": {
              "type": "string"
            },
            "token_type": {
              "type": "string"
            },
            "latitude": {
              "type": "number"
            },
            "user_id": {
              "type": "string"
            },
            "device_status": {
              "type": "string"
            },
            "mac_id": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "device_type": {
              "type": "string"
            },
            "advertisement_id": {
              "type": "string"
            },
            "app_lastseen": {
              "type": "integer"
            },
            "vapn": {
              "type": "string"
            },
            "longitude": {
              "type": "number"
            },
            "device_os": {
              "type": "string"
            },
            "device_locale": {
              "type": "string"
            },
            "imei": {
              "type": "string"
            }
          }
        },
        "model.ValidateTokenRequest": {
          "type": "object",
          "properties": {
            "auth_token": {
              "type": "string"
            },
            "device_id": {
              "type": "string"
            }
          }
        },
        "model.Permission": {
          "type": "object",
          "properties": {
            "namespace": {
              "description": "Namespace is to group the permissions for specific service like OMS,",
              "type": "string"
            },
            "resource_id": {
              "type": "string",
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL"
            },
            "created_at": {
              "type": "integer"
            },
            "created_by": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "permission_level": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "resource_value": {
              "type": "object",
              "properties": {},
              "description": "actual resource value"
            },
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            },
            "updated_at": {
              "type": "integer"
            },
            "external_id": {
              "type": "string"
            }
          }
        },
        "model.LogoutAllDevicesRequest": {
          "properties": {
            "comment": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.UpdatePermissionRequestModel": {
          "type": "object",
          "properties": {
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            },
            "resource_value": {
              "type": "object",
              "properties": {},
              "description": "actual resource value"
            },
            "updatedAt": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "external_id": {
              "type": "string"
            },
            "namespace": {
              "type": "string",
              "description": "Namespace is to group the permissions for specific service like OMS,"
            },
            "resource_id": {
              "type": "string",
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL"
            }
          }
        },
        "request.UpsertPermissionsForGroup": {
          "type": "object",
          "properties": {
            "created_by": {
              "type": "string"
            },
            "permission_list": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "model.ErrorResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "example": 400
            },
            "message": {
              "example": "status bad request",
              "type": "string"
            },
            "object": {
              "type": "string",
              "example": "error"
            }
          }
        },
        "model.LogoutUserRequestModel": {
          "properties": {
            "device_id": {
              "type": "string"
            },
            "user_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.CreatePermissionRequestModel": {
          "type": "object",
          "properties": {
            "created_by": {
              "type": "string"
            },
            "permission_level": {
              "type": "string"
            },
            "resource_id": {
              "type": "string",
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL"
            },
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            },
            "description": {
              "type": "string"
            },
            "external_id": {
              "type": "string"
            },
            "resource_value": {
              "properties": {},
              "description": "actual resource value",
              "type": "object"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string",
              "description": "Namespace is to group the permissions for specific service like OMS,"
            }
          }
        },
        "model.MarketingOptionsSetReq": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "request.DeviceRequest": {
          "type": "object",
          "properties": {
            "token_type": {
              "type": "string"
            },
            "device_locale": {
              "type": "string"
            },
            "vapn": {
              "type": "string"
            },
            "device_status": {
              "type": "string"
            },
            "latitude": {
              "type": "number"
            },
            "advertisement_id": {
              "type": "string"
            },
            "device_token": {
              "type": "string"
            },
            "app_type": {
              "type": "string"
            },
            "flavour": {
              "type": "string"
            },
            "longitude": {
              "type": "number"
            },
            "device_type": {
              "type": "string"
            },
            "accuracy": {
              "type": "string"
            },
            "device_os": {
              "type": "string"
            },
            "mac_id": {
              "type": "string"
            },
            "imei": {
              "type": "string"
            },
            "user_agent": {
              "type": "string"
            }
          }
        },
        "model.VerifyChannelRequest": {
          "properties": {
            "auth_id": {
              "type": "string"
            },
            "device_id": {
              "type": "string"
            },
            "otp_code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.OtpValidationModel": {
          "type": "object",
          "properties": {
            "security_ans": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            },
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "login_duration": {
              "type": "integer",
              "description": "duration in minutes"
            },
            "login_mode": {
              "type": "string"
            },
            "otp_code": {
              "type": "string"
            }
          }
        },
        "model.SecurityQuestion": {
          "type": "object",
          "properties": {
            "answer": {
              "type": "string"
            },
            "question": {
              "type": "string"
            }
          }
        },
        "model.UserPermission": {
          "type": "object",
          "properties": {
            "assign_by": {
              "type": "string"
            },
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            },
            "resource_value": {
              "type": "object",
              "properties": {},
              "description": "actual resource value"
            },
            "updated_at": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer"
            },
            "namespace": {
              "description": "Namespace is to group the permissions for specific service like OMS,",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "permission_id": {
              "type": "string"
            },
            "raw_id": {
              "type": "string"
            },
            "resource_id": {
              "type": "string",
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL"
            },
            "permission_level": {
              "description": "PermissionLevel is to identify the permission is for specific resource or all resources.",
              "type": "string"
            },
            "user_id": {
              "type": "string"
            }
          }
        },
        "model.GuestCreateRequestModel": {
          "properties": {
            "device_id": {
              "type": "string"
            },
            "device_type": {
              "type": "string"
            },
            "login_duration": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.UserModel": {
          "type": "object",
          "properties": {
            "dob": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "phone_confirmed": {
              "type": "boolean"
            },
            "external_id": {
              "type": "string"
            },
            "multiple_device_support": {
              "type": "boolean"
            },
            "nick_name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "address": {
              "properties": {},
              "type": "object"
            },
            "deleted_at": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "emails_removed": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "source": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "privilege": {
              "type": "integer"
            },
            "phones_removed": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "email_confirmed": {
              "type": "boolean"
            },
            "security_questions": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.SecurityQuestion"
              }
            },
            "postal_code": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "address_line_1": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "image_url": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "telco_user": {
              "type": "boolean"
            },
            "nationality": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "address_line_3": {
              "type": "string"
            },
            "raw_id": {
              "type": "string"
            },
            "linked_user_id": {
              "type": "string"
            }
          }
        },
        "model.TranslationLanguage": {
          "properties": {
            "args": {
              "type": "array"
            },
            "language": {
              "type": "string"
            },
            "translation_message": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.AssignPermissionRequest": {
          "properties": {
            "assign_by": {
              "type": "string"
            },
            "permissions": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.PermissionRequestModel"
              }
            },
            "user_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.PermissionGroup": {
          "type": "object",
          "properties": {
            "raw_id": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer"
            },
            "created_by": {
              "type": "string"
            },
            "external_id": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "responses.AuthResponse": {
          "type": "object",
          "properties": {
            "auth_id": {
              "type": "string"
            }
          }
        },
        "model.TelcoProfileVM": {
          "type": "object",
          "properties": {
            "service_instance_no": {
              "type": "string"
            },
            "creation_date": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "circles_info": {
              "type": "object",
              "properties": {}
            },
            "customer_name": {
              "type": "string"
            },
            "identifier_info": {
              "properties": {},
              "type": "object"
            },
            "status": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "service_account_email": {
              "type": "string"
            },
            "activation_date": {
              "type": "string"
            }
          }
        },
        "infrastructures.PublicKey": {
          "properties": {
            "keyID": {
              "type": "string"
            },
            "keyString": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.UserStatusCheckResponse": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string"
            },
            "allow": {
              "type": "boolean"
            },
            "device_status": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "telco": {
              "type": "boolean"
            }
          }
        },
        "model.UserUpdateRequestModel": {
          "type": "object",
          "properties": {
            "isd_code": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "external_id": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "image_url": {
              "type": "string"
            },
            "postal_code": {
              "type": "string"
            },
            "nationality": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "security_questions": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.SecurityQuestion"
              }
            },
            "address": {
              "properties": {},
              "type": "object"
            },
            "address_line_1": {
              "type": "string"
            },
            "address_line_3": {
              "type": "string"
            },
            "phoneConfirmed": {
              "type": "boolean"
            },
            "updated_at": {
              "type": "integer"
            },
            "email": {
              "type": "string"
            },
            "nick_name": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "emailConfirmed": {
              "type": "boolean"
            },
            "first_name": {
              "type": "string"
            }
          }
        },
        "model.PermissionRequestModel": {
          "type": "object",
          "properties": {
            "permission_level": {
              "type": "string"
            },
            "resource_id": {
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL",
              "type": "string"
            },
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            },
            "resource_value": {
              "type": "object",
              "properties": {},
              "description": "actual resource value"
            },
            "namespace": {
              "type": "string",
              "description": "Namespace is to group the permissions for specific service like OMS,"
            },
            "permission_id": {
              "type": "string"
            }
          }
        },
        "model.RefreshTokenRequest": {
          "type": "object",
          "properties": {
            "auth_token": {
              "type": "string"
            },
            "delete_on_expires": {
              "type": "boolean"
            },
            "device_id": {
              "type": "string"
            },
            "force_refresh_token": {
              "type": "boolean"
            },
            "login_mode": {
              "type": "string"
            }
          }
        },
        "model.SwaggerDocErrorResponse": {
          "type": "object",
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/model.V2ErrorResponse"
            },
            "success": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "model.PreferenceRequestDto": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "json": {
                "type": "object",
                "properties": {}
              },
              "list_val": {
                "type": "array"
              },
              "string_val": {
                "type": "string"
              },
              "bool_val": {
                "type": "boolean"
              },
              "float_val": {
                "type": "number"
              },
              "int_val": {
                "type": "integer"
              }
            }
          }
        },
        "model.PresentationSuccessResponse": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer"
            },
            "result": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "model.Query": {
          "type": "object",
          "properties": {
            "k": {
              "type": "string"
            },
            "o": {
              "type": "string"
            },
            "v": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "request.RevokePermissionGroupForUser": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string"
            },
            "permission_group_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "revoked_by": {
              "type": "string"
            }
          }
        },
        "model.GroupPermissions": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "integer"
            },
            "created_by": {
              "type": "string"
            },
            "group_id": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "permission_id": {
              "type": "string"
            },
            "raw_id": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            }
          }
        },
        "model.PortInRequest": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "temp_no": {
              "type": "string"
            },
            "address": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "model.GenericQuery": {
          "type": "object",
          "properties": {
            "next_cur": {
              "type": "string"
            },
            "order_by": {
              "type": "string"
            },
            "page_size": {
              "type": "integer"
            },
            "query": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Query"
              },
              "type": "array"
            },
            "entity": {
              "type": "string"
            }
          }
        },
        "model.ChangeChannelRequestModel": {
          "properties": {
            "new_isd_code": {
              "type": "string"
            },
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "override": {
              "type": "boolean"
            },
            "user_id": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            },
            "new_phone_no": {
              "type": "string"
            },
            "old_isd_code": {
              "type": "string"
            },
            "otp_code": {
              "type": "string"
            },
            "new_email": {
              "type": "string"
            },
            "old_email": {
              "type": "string"
            },
            "old_phone_no": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.ActionMetaResponse": {
          "properties": {
            "action": {
              "type": "string"
            },
            "metadata": {
              "swagger_ref": "#/components/schemas/model.Message"
            }
          },
          "type": "object"
        },
        "model.RevokePermissionRequest": {
          "properties": {
            "revoke_by": {
              "type": "string"
            },
            "user_id": {
              "type": "string"
            },
            "namespace": {
              "description": "Namespace is to group the permissions for specific service like OMS,",
              "type": "string"
            },
            "permission_id": {
              "type": "string"
            },
            "resource_id": {
              "type": "string",
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL"
            },
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            },
            "resource_value": {
              "type": "object",
              "properties": {},
              "description": "actual resource value"
            }
          },
          "type": "object"
        },
        "model.Auth": {
          "type": "object",
          "properties": {
            "otp_code": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            }
          }
        },
        "model.UserRegisterRequestModel": {
          "type": "object",
          "properties": {
            "address": {
              "type": "object",
              "properties": {}
            },
            "source": {
              "type": "string"
            },
            "auth_required": {
              "type": "boolean"
            },
            "first_name": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "address_line_3": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "postal_code": {
              "type": "string"
            },
            "security_questions": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.SecurityQuestion"
              }
            },
            "last_name": {
              "type": "string"
            },
            "nick_name": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "login_duration": {
              "type": "integer"
            },
            "external_id": {
              "type": "string"
            },
            "address_line_1": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "image_url": {
              "type": "string"
            }
          }
        },
        "model.NumberChangedRequest": {
          "type": "object",
          "properties": {
            "phone_no": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "old_phone_no": {
              "type": "string"
            }
          }
        },
        "model.UserProfileVM": {
          "type": "object",
          "properties": {
            "last_name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "nationality": {
              "type": "string"
            },
            "postal_code": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "user_type": {
              "type": "string"
            },
            "external_id": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "phone_confirmed": {
              "type": "boolean"
            },
            "country": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "phone_no": {
              "type": "string"
            },
            "address_line_1": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "telco_user": {
              "type": "boolean"
            },
            "address": {
              "properties": {},
              "type": "object"
            },
            "image_url": {
              "type": "string"
            },
            "devices": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.UserDevice"
              }
            },
            "telco_info": {
              "swagger_ref": "#/components/schemas/model.TelcoProfileVM"
            },
            "dob": {
              "type": "string"
            },
            "email_confirmed": {
              "type": "boolean"
            },
            "nick_name": {
              "type": "string"
            },
            "address_line_3": {
              "type": "string"
            }
          }
        },
        "model.Message": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          }
        },
        "model.AuthorizedResourceRequest": {
          "type": "object",
          "properties": {
            "namespace": {
              "description": "Namespace is to group the permissions for specific service like OMS,",
              "type": "string"
            },
            "permission_id": {
              "type": "string"
            },
            "resource_id": {
              "type": "string",
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL"
            },
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            },
            "resource_value": {
              "properties": {},
              "description": "actual resource value",
              "type": "object"
            }
          }
        },
        "model.VerifyChannelRequestModel": {
          "properties": {
            "auth_id": {
              "type": "string"
            },
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "otp_code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.V2ErrorResponse": {
          "type": "object",
          "properties": {
            "code": {
              "example": 400001,
              "type": "integer"
            },
            "description": {
              "type": "string",
              "example": "Password should be 8 to 13 character long"
            },
            "message": {
              "type": "string",
              "example": "Invalid password"
            },
            "title": {
              "type": "string",
              "example": "Validation error!"
            }
          }
        },
        "request.ValidateOtpRequest": {
          "type": "object",
          "properties": {
            "otp": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            }
          }
        },
        "model.OtpRequestModel": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "mock": {
              "type": "boolean"
            },
            "phone_no": {
              "type": "string"
            },
            "activity": {
              "type": "string"
            },
            "otp_duration": {
              "type": "integer"
            },
            "auth_mode": {
              "type": "string",
              "description": "SMS EMAIL PUSH etc.,"
            },
            "device_id": {
              "type": "string"
            },
            "request_type": {
              "type": "string"
            },
            "presentation": {
              "type": "boolean"
            }
          }
        },
        "model.ResetPasswordRequestModel": {
          "type": "object",
          "properties": {
            "auth_token": {
              "type": "string"
            },
            "current_password": {
              "type": "string"
            },
            "new_password": {
              "type": "string"
            }
          }
        },
        "model.OtpResponseModel": {
          "type": "object",
          "properties": {
            "auth_id": {
              "type": "string"
            },
            "auth_token": {
              "type": "string"
            },
            "security_qn": {
              "type": "string"
            }
          }
        },
        "model.OtpAuthenticationModel": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "integer"
            },
            "otp_code": {
              "type": "string"
            },
            "activity": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "auth_mode": {
              "type": "string",
              "description": "EMAIL, MOBILE, PUSH etc.,"
            },
            "expiry_time": {
              "type": "integer"
            },
            "status": {
              "description": "OTP_SENT, OTP_VALIDATED",
              "type": "string"
            },
            "mock": {
              "type": "boolean"
            },
            "security_ans": {
              "type": "string"
            },
            "security_qn": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            },
            "params": {
              "type": "object",
              "properties": {}
            },
            "device_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "raw_id": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "request_type": {
              "type": "string",
              "description": "AUTHENTICATION, 2 FACTOR,"
            },
            "user_id": {
              "type": "string"
            }
          }
        },
        "responses.TelcoSearchResponse": {
          "properties": {
            "result": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.TelcoSearchResponse"
              }
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.UserDevice": {
          "properties": {
            "flavour": {
              "type": "string"
            },
            "device_locale": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "device_os": {
              "type": "string"
            },
            "user_id": {
              "type": "string"
            },
            "vapn": {
              "type": "string"
            },
            "device_type": {
              "type": "string"
            },
            "longitude": {
              "type": "number"
            },
            "mac_id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "imei": {
              "type": "string"
            },
            "app_lastseen": {
              "type": "integer"
            },
            "app_type": {
              "type": "string"
            },
            "latitude": {
              "type": "number"
            },
            "token_type": {
              "type": "string"
            },
            "advertisement_id": {
              "type": "string"
            },
            "user_agent": {
              "type": "string"
            },
            "device_id": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "accuracy": {
              "type": "string"
            },
            "device_token": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.UpdateTranslationsRequest": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "translations": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.TranslationLanguage"
              }
            }
          }
        },
        "model.EmailUpdateRequestModel": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string"
            }
          }
        },
        "infrastructures.PublicKeys": {
          "type": "object",
          "properties": {
            "blocked": {
              "items": {
                "swagger_ref": "#/components/schemas/infrastructures.PublicKey"
              },
              "type": "array"
            },
            "expired": {
              "items": {
                "swagger_ref": "#/components/schemas/infrastructures.PublicKey"
              },
              "type": "array"
            },
            "active": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/infrastructures.PublicKey"
              }
            }
          }
        },
        "model.GetOtpResponseModel": {
          "type": "object",
          "properties": {
            "otp_code": {
              "type": "string"
            }
          }
        },
        "model.Resource": {
          "type": "object",
          "properties": {
            "resource_value": {
              "properties": {},
              "description": "actual resource value",
              "type": "object"
            },
            "namespace": {
              "type": "string",
              "description": "Namespace is to group the permissions for specific service like OMS,"
            },
            "resource_id": {
              "description": "to denote resource Id eg: 65::88787778, OMS_ADMIN, OMS_PANEL, IMS_PANEL, PRODUCT_CATALOGUE_PANEL",
              "type": "string"
            },
            "resource_type": {
              "type": "string",
              "description": "to denote which type of resource it is (eg. UserID or Device ID or WEBPAGE or PANEL or API_ENDPOINT or TELCO_ACCOUNT or ACCOUNT)"
            }
          }
        },
        "request.OtpRequest": {
          "type": "object",
          "properties": {
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "app_type": {
              "type": "integer"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "responses.OtpResponse": {
          "type": "object",
          "properties": {
            "otp": {
              "type": "string"
            }
          }
        },
        "model.UserRegisterRequest": {
          "properties": {
            "first_name": {
              "type": "string"
            },
            "mobile_auth": {
              "swagger_ref": "#/components/schemas/model.Auth"
            },
            "password": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "override": {
              "type": "boolean"
            },
            "address_line_1": {
              "type": "string"
            },
            "email_auth": {
              "swagger_ref": "#/components/schemas/model.Auth"
            },
            "postal_code": {
              "type": "string"
            },
            "referral_code": {
              "type": "string"
            },
            "image_url": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "device": {
              "swagger_ref": "#/components/schemas/model.UserDevice"
            },
            "nick_name": {
              "type": "string"
            },
            "security_questions": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.SecurityQuestion"
              }
            },
            "state": {
              "type": "string"
            },
            "address": {
              "type": "object",
              "properties": {}
            },
            "source": {
              "type": "string"
            },
            "address_line_3": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.CreateTranslationMessageRequest": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "translations": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.TranslationLanguage"
              }
            }
          }
        },
        "model.ExtendedModel": {
          "properties": {
            "user_id": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "data": {
              "type": "object",
              "properties": {}
            },
            "updated_at": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.UpsertRequest": {
          "type": "object",
          "properties": {
            "isd_code": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            },
            "temp_no": {
              "type": "string"
            },
            "address": {
              "properties": {},
              "type": "object"
            },
            "existing_telco": {
              "type": "boolean"
            },
            "first_name": {
              "type": "string"
            }
          }
        },
        "model.TelcoSearchResponse": {
          "type": "object",
          "properties": {
            "kanji_name": {
              "type": "string"
            },
            "katakana_name": {
              "type": "string"
            },
            "service_account_email": {
              "type": "string"
            },
            "service_instance_no": {
              "type": "string"
            }
          }
        },
        "request.UpsertPermissionGroupForUser": {
          "type": "object",
          "properties": {
            "created_by": {
              "type": "string"
            },
            "permission_group_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "user_id": {
              "type": "string"
            }
          }
        },
        "model.ActionsRequest": {
          "properties": {
            "phone_no": {
              "type": "string"
            },
            "device_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "isd_code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "request.RegisterRequest": {
          "properties": {
            "address_line_1": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "address": {
              "type": "object",
              "properties": {}
            },
            "address_line_2": {
              "type": "string"
            },
            "nick_name": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "postal_code": {
              "type": "string"
            },
            "auth_id": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "address_line_3": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "image_url": {
              "type": "string"
            },
            "nationality": {
              "type": "string"
            },
            "google_auth": {
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "openapi": "3.0.1",
    "info": {
      "version": "1.0",
      "title": "User Service API",
      "description": "User Service API documentation.",
      "contact": {
        "email": "user-service-dev@circles.asia",
        "name": "API Support"
      },
      "license": {}
    },
    "servers": [
      {
        "url": "//localhost:3000/"
      }
    ],
    "tags": null
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebc5"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/users/auth/fb",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/logout",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/update",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permissions/{namespace}/all",
      "method": "GET"
    },
    {
      "endptRegex": "/v2/users/permission-groups/assign",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/translations/{namespace}/messages",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/logout/devices",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/refresh_token",
      "method": "POST"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/token",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/billing-address-update",
      "method": "POST"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/login",
      "method": "POST"
    },
    {
      "endptRegex": "/users/login/otp",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/extend-schema",
      "method": "GET"
    },
    {
      "endptRegex": "/users/{user_id}/extend-schema",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permission-groups/{id}/permissions",
      "method": "GET"
    },
    {
      "endptRegex": "/v2/permission-groups/{id}/permissions",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permission-groups/{id}/permissions",
      "method": "DELETE"
    },
    {
      "endptRegex": "/v2/users/{user_id}/change/{channel}",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/users/number-change/portin",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/translations/message",
      "method": "POST"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/register",
      "method": "POST"
    },
    {
      "endptRegex": "/guests/create",
      "method": "POST"
    },
    {
      "endptRegex": "/users/login",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permissions/update",
      "method": "PATCH"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}/update",
      "method": "POST"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/otp",
      "method": "GET"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/otp",
      "method": "POST"
    },
    {
      "endptRegex": "/users/login/{user_id}/cooldown_refresh_token",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/profile",
      "method": "GET"
    },
    {
      "endptRegex": "/v2/permissions/assign",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permissions/create",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/update-billing-email",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{locale}/users/verification/otp/send",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/kyc/initiate",
      "method": "GET"
    },
    {
      "endptRegex": "/users/auth/google",
      "method": "GET"
    },
    {
      "endptRegex": "/users/auth/otp/validate",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/password/reset",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/users/permission-groups/revoke",
      "method": "DELETE"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/users/telco/upsert",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/login",
      "method": "POST"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/attributes",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/devices/{device_id}/update",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permissions/{perm_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/kyc/update",
      "method": "PATCH"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}/sync",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/remove",
      "method": "DELETE"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/profile",
      "method": "GET"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/logout",
      "method": "POST"
    },
    {
      "endptRegex": "/ecom_users/{user_id}/profile",
      "method": "GET"
    },
    {
      "endptRegex": "/users/auth/otp/{auth_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/users/password/forgot",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/verify/{channel}",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permissions/namespaces",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/number-changed",
      "method": "POST"
    },
    {
      "endptRegex": "/users/login/token/validate",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permission-groups",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/{country}/{locale}/{tenant}/users/auth/otp/validate",
      "method": "POST"
    },
    {
      "endptRegex": "/users/hard-delete",
      "method": "DELETE"
    },
    {
      "endptRegex": "/users/login/{user_id}/invalidate_token",
      "method": "POST"
    },
    {
      "endptRegex": "/users/update",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/kyc",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/{product}/users/{user_id}/preferences",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/{product}/users/{user_id}/preferences",
      "method": "PATCH"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/{product}/users/{user_id}/preferences",
      "method": "DELETE"
    },
    {
      "endptRegex": "/{entity}/data",
      "method": "POST"
    },
    {
      "endptRegex": "/users/auth/otp/send",
      "method": "POST"
    },
    {
      "endptRegex": "/users/register/otp",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permissions/revoke",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permissions/{user_id}/authorized",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/users/create-account/portin",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}/remove",
      "method": "DELETE"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users",
      "method": "GET"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users",
      "method": "POST"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users",
      "method": "PATCH"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/otp/validate",
      "method": "POST"
    },
    {
      "endptRegex": "/users/login/token",
      "method": "GET"
    },
    {
      "endptRegex": "/users/remove",
      "method": "DELETE"
    },
    {
      "endptRegex": "/v2/permissions",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/users/create/{isd_phone}",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/devices/{device_id}/update",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/upload-profile",
      "method": "POST"
    },
    {
      "endptRegex": "/users/merge",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/translations/{namespace}/messages/sync",
      "method": "POST"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/devices",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/upload-profile",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/users/login/status",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/users/{user_id}/permissions",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/auth/otp/send",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/login/action",
      "method": "POST"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/marketing/{user_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/marketing/{user_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/v4/{country}/{locale}/{tenant}/users/otp/{auth_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/{user_id}/verify/{channel}",
      "method": "POST"
    },
    {
      "endptRegex": "/auth/public-keys",
      "method": "GET"
    },
    {
      "endptRegex": "/users/login/{user_id}/refresh_token",
      "method": "POST"
    },
    {
      "endptRegex": "/users/register",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/permission-groups/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/translations/{namespace}/message/{message_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v3/{country}/{locale}/{tenant}/users/register/{isd_phone}",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357912"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357912"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebc8"
  },
  "swaggerSpec": {
    "components": {
      "schemas": {
        "datastore.AuditLogModel": {
          "properties": {
            "requestId": {
              "type": "string"
            },
            "requestStatus": {
              "type": "string"
            },
            "timestamp": {
              "type": "string"
            },
            "requestType": {
              "type": "string"
            },
            "result": {
              "swagger_ref": "#/components/schemas/bson.M"
            },
            "error": {
              "properties": {},
              "type": "object"
            },
            "portoutId": {
              "type": "string"
            },
            "accountNumber": {
              "type": "string"
            },
            "initiator": {
              "type": "string"
            },
            "nextStatus": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "currentStatus": {
              "type": "string"
            },
            "trace": {
              "swagger_ref": "#/components/schemas/bson.M"
            }
          },
          "type": "object"
        },
        "crespwriter.SwaggerDocErrorResponse": {
          "properties": {
            "success": {
              "type": "boolean",
              "example": false
            },
            "result": {
              "swagger_ref": "#/components/schemas/crespwriter.ErrorDetails"
            }
          },
          "type": "object"
        },
        "request.CreatePortoutRequest": {
          "properties": {
            "effective": {
              "type": "integer"
            },
            "msisdn": {
              "type": "string"
            },
            "accountDetails": {
              "properties": {},
              "type": "object"
            },
            "accountNumber": {
              "type": "string"
            },
            "donorCode": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.ActivePortinReqResponse": {
          "properties": {
            "start_ts": {
              "example": 1582050506,
              "type": "integer"
            },
            "customer_id_number": {
              "example": "S1234567B",
              "type": "string"
            },
            "is_cancellable": {
              "example": true,
              "type": "boolean"
            },
            "owner_id_number": {
              "example": "S2345678P",
              "type": "string"
            },
            "status": {
              "example": "WAITING",
              "type": "string"
            },
            "temp_number": {
              "example": "87112817",
              "type": "string"
            },
            "donor_network": {
              "swagger_ref": "#/components/schemas/response.DonorNetwork"
            },
            "id": {
              "example": 18326,
              "type": "integer"
            },
            "number": {
              "example": "80009000",
              "type": "string"
            },
            "portin_id": {
              "example": "XX-XXXXX",
              "type": "string"
            },
            "auth_form_url": {
              "type": "string",
              "example": "https://www.circles.life/ownershipform.pdf"
            },
            "service_instance_number": {
              "example": "LW101185148",
              "type": "string"
            },
            "scheduled": {
              "example": true,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "response.RequestValidityResponse": {
          "type": "object",
          "properties": {
            "metadata": {
              "properties": {},
              "type": "object"
            },
            "reason": {
              "type": "string",
              "example": "user already exist with account LW08888832"
            },
            "valid": {
              "type": "boolean",
              "example": false
            }
          }
        },
        "crespwriter.ErrorDetails": {
          "properties": {
            "message": {
              "example": "Invalid password",
              "type": "string"
            },
            "title": {
              "example": "Validation error!",
              "type": "string"
            },
            "code": {
              "example": 400001,
              "type": "integer"
            },
            "description": {
              "example": "Password should be 8 to 13 character long",
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.RequestCreationAcknowledgementResponse": {
          "type": "object",
          "properties": {
            "metadata": {
              "properties": {},
              "type": "object"
            },
            "traceId": {
              "type": "string"
            }
          }
        },
        "crespwriter.SuccessResponse": {
          "properties": {
            "success": {
              "type": "boolean"
            },
            "result": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "object"
        },
        "request.CreatePortinRequest": {
          "type": "object",
          "properties": {
            "portin_number": {
              "type": "string"
            },
            "account_number": {
              "type": "string"
            },
            "is_transfer_ownership_case": {
              "type": "boolean"
            },
            "source": {
              "type": "string"
            },
            "profile_id": {
              "type": "integer"
            },
            "current_number": {
              "type": "string"
            },
            "donor_ref_id": {
              "type": "string"
            },
            "donor_code": {
              "type": "string"
            },
            "transfer_ownership": {
              "swagger_ref": "#/components/schemas/request.OwnershipData"
            },
            "status": {
              "type": "string"
            },
            "portin_id": {
              "type": "string"
            },
            "prefix": {
              "type": "integer"
            },
            "donor_name": {
              "type": "string"
            },
            "start": {
              "type": "integer"
            }
          }
        },
        "request.UpdatePortinRequest": {
          "properties": {
            "account_number": {
              "type": "string"
            },
            "start": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "request.OwnershipData": {
          "properties": {
            "file_id_front": {
              "type": "string"
            },
            "owner_id_type": {
              "type": "string"
            },
            "customer_id_number": {
              "type": "string"
            },
            "customer_name": {
              "type": "string"
            },
            "file_auth_form": {
              "type": "string"
            },
            "owner_id_number": {
              "type": "string"
            },
            "file_id_back": {
              "type": "string"
            },
            "owner_name": {
              "type": "string"
            },
            "customer_id_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "types.NullInt64": {
          "properties": {
            "int64": {
              "type": "integer"
            },
            "valid": {
              "type": "boolean",
              "description": "Valid is true if Int64 is not NULL"
            }
          },
          "type": "object"
        },
        "types.NullString": {
          "properties": {
            "string": {
              "type": "string"
            },
            "valid": {
              "type": "boolean",
              "description": "Valid is true if String is not NULL"
            }
          },
          "type": "object"
        },
        "model.CustomerPortIn": {
          "type": "object",
          "properties": {
            "file_auth_form": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "old": {
              "type": "integer"
            },
            "imsi": {
              "type": "string"
            },
            "profile_id": {
              "type": "integer"
            },
            "account_number": {
              "type": "string"
            },
            "doc_update_status": {
              "type": "string"
            },
            "raw_error": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "updated_at": {
              "type": "string"
            },
            "portin_id": {
              "type": "string"
            },
            "service_instance_number": {
              "type": "string"
            },
            "iccid": {
              "type": "string"
            },
            "source": {
              "type": "string"
            },
            "order_source": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "start_ts": {
              "type": "string"
            },
            "donor_ref_id": {
              "type": "string"
            },
            "iddenabled": {
              "type": "boolean"
            },
            "order_sourse": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "temp_number": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "planName": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "warning_after_ts": {
              "type": "string"
            },
            "donor_network": {
              "type": "string"
            },
            "customer_id_type": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "status_update_ts": {
              "type": "string"
            },
            "warning_type": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "file_id_front": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "donor_mvno_code": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "customer_name": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "intention_order_source": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "portin_type": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "customer_id_number": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "error_status": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "owner_id_type": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "added_ts": {
              "type": "string"
            },
            "account_no": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "created_at": {
              "type": "string"
            },
            "number": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "donor_network_code": {
              "type": "string"
            },
            "intention_added_ts": {
              "type": "string"
            },
            "order_reference_number": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "owner_name": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "promoLogId": {
              "swagger_ref": "#/components/schemas/types.NullInt64"
            },
            "owner_id_number": {
              "swagger_ref": "#/components/schemas/types.NullString"
            },
            "id": {
              "type": "integer"
            },
            "end_ts": {
              "type": "string"
            },
            "file_id_back": {
              "swagger_ref": "#/components/schemas/types.NullString"
            }
          }
        },
        "response.AuditLogs": {
          "properties": {
            "total": {
              "type": "integer"
            },
            "data": {
              "items": {
                "swagger_ref": "#/components/schemas/datastore.AuditLogModel"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "bson.M": {
          "type": "object"
        },
        "request.UpdateStateForPortin": {
          "properties": {
            "description": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.DonorNetwork": {
          "properties": {
            "code": {
              "example": "001",
              "type": "string"
            },
            "enable": {
              "example": false,
              "type": "boolean"
            },
            "name": {
              "example": "M1",
              "type": "string"
            },
            "ref_id": {
              "example": "XX123IF3",
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.PortinNumberValidityResponse": {
          "properties": {
            "accountNumber": {
              "type": "string"
            },
            "reason": {
              "example": "user already exist with account LW08888832",
              "type": "string"
            },
            "valid": {
              "example": false,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "response.PortinCreateResponse": {
          "type": "object",
          "properties": {
            "portin_id": {
              "example": "PSG-C2KIUNSTNUEG",
              "type": "string"
            },
            "rescheduled": {
              "example": false,
              "type": "boolean"
            },
            "rescheduled_info": {
              "properties": {},
              "type": "object"
            }
          }
        },
        "crespwriter.ErrorResponse": {
          "properties": {
            "error": {
              "swagger_ref": "#/components/schemas/crespwriter.ErrorDetails"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "contact": {},
      "description": "Port-in/Port-out Services to cater all mnp related use cases in one place.",
      "title": "MNP Service APIs",
      "version": "1"
    },
    "openapi": "3.0.1",
    "paths": {
      "/{version}/{country}/{locale}/{tenant}/portins": {
        "post": {
          "description": "Create a port in request based on account details",
          "parameters": [
            {
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: telco",
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.CreatePortinRequest"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.PortinCreateResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Create a port in request",
          "tags": [
            "PORTIN"
          ],
          "x-codegen-request-body-name": "payload"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/portins/{id}/audit": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Port in audit log check",
          "tags": [
            "PORTIN"
          ],
          "description": "Query about the audit log using account number",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: telco"
            },
            {
              "description": "Example: LW08888832",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/portouts/audit/logs": {
        "get": {
          "summary": "Get port out logs",
          "tags": [
            "Port out"
          ],
          "description": "Get all port out logs with certain query params",
          "parameters": [
            {
              "name": "start",
              "schema": {
                "type": "string"
              },
              "description": "start time",
              "in": "query"
            },
            {
              "in": "query",
              "name": "end",
              "schema": {
                "type": "string"
              },
              "description": "end time"
            },
            {
              "in": "query",
              "name": "number",
              "schema": {
                "type": "string"
              },
              "description": "customer number"
            },
            {
              "description": "account number",
              "in": "query",
              "name": "accountNumber",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "requestId",
              "schema": {
                "type": "string"
              },
              "description": "request id"
            },
            {
              "description": "request type",
              "in": "query",
              "name": "requestType",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "request status",
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "orderBy",
              "schema": {
                "type": "string"
              },
              "description": "order logs by a particular field"
            },
            {
              "description": "or logs desc or ass",
              "in": "query",
              "name": "order",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "schema": {
                "type": "string"
              },
              "description": "limit number of results",
              "in": "query"
            },
            {
              "name": "offset",
              "schema": {
                "type": "string"
              },
              "description": "offset for results",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "country",
              "in": "path",
              "name": "country"
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "locale",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "tenant",
              "in": "path",
              "name": "tenant",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.AuditLogs"
                      },
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/configs/shared": {
        "get": {
          "description": "Query about the list of shared config",
          "parameters": [
            {
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Shared config list check",
          "tags": [
            "ADMIN"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/dates/available": {
        "get": {
          "description": "Query about the list of available port in dates",
          "parameters": [
            {
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country"
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: telco"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: 1582761600000",
              "in": "query",
              "name": "startDate"
            },
            {
              "name": "limit",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: 20 [Default is 15, Maxmimum is 30]",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Available port in dates list check",
          "tags": [
            "PORTIN"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/portins/{id}": {
        "post": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale"
            },
            {
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: LW101185148",
              "in": "path",
              "name": "id"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UpdatePortinRequest"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update the port in request",
          "tags": [
            "PORTIN"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Update the status a port in request given the account details"
        },
        "get": {
          "description": "Query if an account number has port in request(s)",
          "parameters": [
            {
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: telco"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: LW101185856",
              "in": "path",
              "name": "id"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.CustomerPortIn"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Port in request(s) check using account number",
          "tags": [
            "PORTIN"
          ]
        },
        "patch": {
          "description": "Update the status a port in request given the account details",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version"
            },
            {
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "description": "Example: LW101185148",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.UpdateStateForPortin"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.PortinCreateResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update the status of a port in request",
          "tags": [
            "PORTIN"
          ],
          "x-codegen-request-body-name": "payload"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/portins/account/eligibility/{action_id}": {
        "get": {
          "parameters": [
            {
              "description": "Example: v2",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: circles",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "sub action to be performed. Example: reversal",
              "in": "path",
              "name": "action_id",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "customer telco account number",
              "in": "query",
              "name": "accountNumber",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Validate telco account portIn request eligibility",
          "tags": [
            "Port In"
          ],
          "description": "Query if a desired customer portIn is allowed on requested customer account number"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/configs/meta": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path"
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: telco",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "properties": {},
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Port in metadata config check",
          "tags": [
            "ADMIN"
          ],
          "description": "Query about the metadata configurations"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/reports/portin_data": {
        "get": {
          "parameters": [
            {
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path"
            },
            {
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "query",
              "name": "account_number"
            },
            {
              "in": "query",
              "name": "donor_code",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "end",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "portin_id",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "portin_number",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "service_instance_number",
              "schema": {
                "type": "string"
              },
              "in": "query"
            },
            {
              "schema": {
                "type": "integer"
              },
              "in": "query",
              "name": "sort_column_index"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "query",
              "name": "sort_dir"
            },
            {
              "in": "query",
              "name": "source",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "query",
              "name": "start"
            },
            {
              "schema": {
                "type": "string"
              },
              "in": "query",
              "name": "status"
            },
            {
              "in": "query",
              "name": "temp_number",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Port in report check",
          "tags": [
            "PORTIN"
          ],
          "description": "Query about the port in report"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/portouts/account/eligibility/{action_id}": {
        "get": {
          "description": "Query if a desired customer port-out is allowed on requested customer account number",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: circles",
              "in": "path",
              "name": "tenant",
              "required": true
            },
            {
              "in": "path",
              "name": "action_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "sub action to be performed"
            },
            {
              "description": "customer telco account number",
              "in": "query",
              "name": "accountNumber",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Validate telco account port-out request eligibility",
          "tags": [
            "Port out"
          ]
        }
      },
      "/{version}/{country}/{locale}/{tenant}/configs/meta/donor_telcos": {
        "get": {
          "tags": [
            "ADMIN"
          ],
          "description": "Query about the list of donor telcos",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Donor telcos list check"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/numbers/{phone_no}/status": {
        "get": {
          "tags": [
            "PORTIN"
          ],
          "description": "Query if a phone number (with prefix) is valid for port in",
          "parameters": [
            {
              "in": "path",
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1"
            },
            {
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: sg"
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: telco",
              "in": "path"
            },
            {
              "in": "path",
              "name": "phone_no",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: 65::91234567"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.PortinNumberValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.PortinNumberValidityResponse"
                      },
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SwaggerDocErrorResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.PortinNumberValidityResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Phone number (with prefix) eligibilty check"
        }
      },
      "/{version}/{country}/{locale}/{tenant}/portins/{sin}/active": {
        "get": {
          "summary": "Active Port in request check using SIN",
          "tags": [
            "PORTIN"
          ],
          "description": "Query if a SIN has active port in request",
          "parameters": [
            {
              "name": "version",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path"
            },
            {
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true
            },
            {
              "description": "Example: telco",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: LW101185148",
              "in": "path",
              "name": "sin",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "result": {
                        "swagger_ref": "#/components/schemas/response.ActivePortinReqResponse"
                      },
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      }
                    }
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/{version}/{country}/{locale}/{tenant}/portouts/account/{action_id}": {
        "post": {
          "x-codegen-request-body-name": "payload",
          "description": "Create a port out request based on customer requirements (port out/reverse_port in) depending on workflow",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "description": "Example: en",
              "in": "path",
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Example: circles",
              "in": "path",
              "name": "tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "sub action to be performed",
              "in": "path",
              "name": "action_id",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.CreatePortoutRequest"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestCreationAcknowledgementResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Create a port out request variation",
          "tags": [
            "Port out"
          ]
        },
        "put": {
          "tags": [
            "Port out"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Update an ongoing port out request based on customer inputs",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: v1",
              "in": "path",
              "name": "version",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Example: sg",
              "in": "path",
              "name": "country",
              "required": true
            },
            {
              "name": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: en",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Example: circles",
              "in": "path",
              "name": "tenant"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.CreatePortoutRequest"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "properties": {
                      "crespwriter.SuccessResponse": {
                        "swagger_ref": "#/components/schemas/crespwriter.SuccessResponse"
                      },
                      "result": {
                        "swagger_ref": "#/components/schemas/response.RequestCreationAcknowledgementResponse"
                      }
                    },
                    "type": "object"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/crespwriter.SwaggerDocErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update an active portout request attributes"
        }
      }
    },
    "servers": [
      {
        "url": "http://qsg-portin.circles.life"
      }
    ],
    "tags": null
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebc7"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/configs/meta/donor_telcos",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portins/{id}/audit",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portouts/audit/logs",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/configs/meta",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/dates/available",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/numbers/{phone_no}/status",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portins",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portins/account/eligibility/{action_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portins/{sin}/active",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portouts/account/{action_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portouts/account/{action_id}",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portouts/account/eligibility/{action_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/reports/portin_data",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/configs/shared",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portins/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portins/{id}",
      "method": "POST"
    },
    {
      "endptRegex": "/{version}/{country}/{locale}/{tenant}/portins/{id}",
      "method": "PATCH"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357921"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357921"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebca"
  },
  "swaggerSpec": {
    "openapi": "3.0.1",
    "paths": {
      "/v1/event/batch/update": {
        "post": {
          "description": "Update multiple events at once",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.BatchUpdateEventRequest"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Bulk Update of events",
          "tags": [
            "event"
          ],
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v2/{tenet}/event/{id}": {
        "get": {
          "description": "Fetch the event based on the given id",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Event ID"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Get event by event_id",
          "tags": [
            "eventV2"
          ]
        },
        "post": {
          "description": "Update the respective event for the given event_id",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Event ID",
              "in": "path",
              "name": "id"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.EventUpdateRequest"
                }
              }
            },
            "description": "Request Payload",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Update event by id",
          "tags": [
            "eventV2"
          ],
          "x-codegen-request-body-name": "payload"
        }
      },
      "/v1/lock/{id}": {
        "post": {
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            }
          },
          "summary": "Update lock by ID",
          "tags": [
            "lock"
          ],
          "description": "Get Update lock by ID",
          "parameters": [
            {
              "description": "Lock ID",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/v1/status": {
        "post": {
          "description": "Get scheduler status for all tenets",
          "responses": {
            "200": {
              "content": {}
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Get scheduler status for all tenets",
          "tags": [
            "status"
          ]
        }
      },
      "/v2/{tenet}/event": {
        "post": {
          "summary": "Create event",
          "tags": [
            "eventV2"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Create an event",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.NewEventRequest"
                }
              }
            },
            "description": "Request Payload"
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              },
              "description": "Created"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/v1/{tenet}/lock": {
        "get": {
          "description": "Get lock by tenant",
          "parameters": [
            {
              "description": "Scheduler Tenant",
              "in": "path",
              "name": "tenet",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.Scheduler"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Get lock by tenant",
          "tags": [
            "lock"
          ]
        }
      },
      "/ping": {
        "get": {
          "description": "Send a pong if the service is up",
          "responses": {
            "200": {
              "content": {}
            }
          },
          "summary": "Check service health",
          "tags": [
            "health"
          ]
        }
      },
      "/v1/event": {
        "post": {
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Create event",
          "tags": [
            "event"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Create an event",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.NewEventRequest"
                }
              }
            },
            "description": "Request Payload"
          }
        }
      },
      "/v1/event/{id}": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Get event by event_id",
          "tags": [
            "event"
          ],
          "description": "Fetch the event based on the given id",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Event ID",
              "in": "path",
              "name": "id",
              "required": true
            }
          ]
        },
        "post": {
          "requestBody": {
            "description": "Request Payload",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.EventUpdateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update event by id",
          "tags": [
            "event"
          ],
          "x-codegen-request-body-name": "payload",
          "description": "Update the respective event for the given event_id",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Event ID"
            }
          ]
        }
      },
      "/v1/{tenet}/event/publish": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.EventResponse"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            }
          },
          "summary": "Check and publish events to the queue",
          "tags": [
            "event"
          ],
          "description": "Query the events and publish them to the queue"
        }
      },
      "/v1/{tenet}/event/{id}/publish": {
        "get": {
          "description": "Publish an event to the queue by ID",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Event ID"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            }
          },
          "summary": "Publish event",
          "tags": [
            "event"
          ]
        }
      },
      "/v1/{tenet}/event/{id}": {
        "delete": {
          "tags": [
            "event"
          ],
          "description": "Delete event by ID",
          "parameters": [
            {
              "name": "tenet",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Scheduler Tenant",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Event Id",
              "in": "path",
              "name": "id",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.SuccessResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "404": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              },
              "description": "Not Found"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ErrorResponse"
                  }
                }
              }
            }
          },
          "summary": "Delete event by ID"
        }
      },
      "/package": {
        "get": {
          "description": "Returns branch, package version and current date time",
          "responses": {
            "200": {
              "content": {}
            }
          },
          "summary": "Checks package version",
          "tags": [
            "package"
          ]
        }
      }
    },
    "servers": [
      {
        "url": "http://localhost:3000{{.BasePath}}"
      }
    ],
    "tags": null,
    "components": {
      "schemas": {
        "model.Scheduler": {
          "properties": {
            "created_at": {
              "type": "integer"
            },
            "end": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "start": {
              "type": "integer"
            },
            "key": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "event_count": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "request.NewEventRequest": {
          "properties": {
            "action": {
              "type": "string"
            },
            "activity": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {}
            },
            "start": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "request.Query": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "value": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "model.ErrorResponse": {
          "properties": {
            "message": {
              "type": "string"
            },
            "code": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "request.Change": {
          "properties": {
            "processed": {
              "properties": {},
              "type": "object"
            },
            "reason": {
              "type": "string"
            },
            "start": {
              "type": "integer"
            },
            "status": {
              "type": "string"
            },
            "color": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "request.EventUpdateRequest": {
          "properties": {
            "unset": {
              "properties": {},
              "type": "object"
            },
            "set": {
              "swagger_ref": "#/components/schemas/request.UpdateKeysForSet"
            }
          },
          "type": "object"
        },
        "model.EventResponse": {
          "properties": {
            "kind": {
              "type": "string"
            },
            "total": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "object"
        },
        "request.UpdateKeysForSet": {
          "properties": {
            "start": {
              "type": "integer"
            },
            "status": {
              "type": "string"
            },
            "color": {
              "type": "string"
            },
            "processed": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "object"
        },
        "model.SuccessResponse": {
          "properties": {
            "data": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "object"
        },
        "request.BatchUpdateEventRequest": {
          "properties": {
            "change": {
              "swagger_ref": "#/components/schemas/request.Change"
            },
            "query": {
              "items": {
                "swagger_ref": "#/components/schemas/request.Query"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "contact": {
        "name": "API Support",
        "email": "user-service-dev@circles.asia"
      },
      "description": "Circles Scheduler API documentation.",
      "license": {},
      "title": "Circles Scheduler API",
      "version": "{{.Version}}"
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebc9"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/v1/event/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/event/{id}",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/lock/{id}",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/status",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/{tenet}/event/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/v1/{tenet}/event/{id}/publish",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{tenet}/lock",
      "method": "GET"
    },
    {
      "endptRegex": "/package",
      "method": "GET"
    },
    {
      "endptRegex": "/ping",
      "method": "GET"
    },
    {
      "endptRegex": "/v2/{tenet}/event",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/{tenet}/event/{id}",
      "method": "POST"
    },
    {
      "endptRegex": "/v2/{tenet}/event/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/{tenet}/event/publish",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/event",
      "method": "POST"
    },
    {
      "endptRegex": "/v1/event/batch/update",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357924"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357924"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebcc"
  },
  "swaggerSpec": {
    "paths": {
      "/api/v4/discover/polls": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/dto.PollingGameResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Today Polls V4",
          "tags": [
            "Polling Game"
          ],
          "description": "Return a list of today's polls."
        }
      },
      "/api/v3/discover/polls/{poll_id}": {
        "put": {
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "in": "path",
              "name": "poll_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Poll ID"
            }
          ],
          "requestBody": {
            "description": "Polling Game Activity",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.PollingGameActivity"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.PollingGameResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Submit Vote",
          "tags": [
            "Polling Game"
          ],
          "x-codegen-request-body-name": "PollingGameActivity",
          "description": "Return a list of today's polls."
        }
      },
      "/api/v3/discover/admin/article/{type}": {
        "post": {
          "x-codegen-request-body-name": "article",
          "description": "Get Saved Articles by an Admin",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Article Type",
              "in": "path",
              "name": "type",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.Article"
                }
              }
            },
            "description": "Article",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.Article"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Create Article",
          "tags": [
            "Events Admin"
          ]
        }
      },
      "/api/v3/discover/polls": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/dto.PollingGameResponse"
                    }
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Today Polls [DEPRECATED]",
          "tags": [
            "Polling Game"
          ],
          "description": "Return a list of today's polls. This doesn't return marketing events. This api is deprecated and this will be removed in later versions of the API",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PollingGame"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Create Poll Public",
          "tags": [
            "Polling Game"
          ],
          "x-codegen-request-body-name": "CreatePollingGameRequest",
          "description": "This endpoint allows users to create polls as drafts.",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "requestBody": {
            "description": "Create Polling Game Request",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.CreatePollingGameRequest"
                }
              }
            }
          }
        }
      },
      "/api/v3/discover/admin/movies/search": {
        "get": {
          "description": "Search Movies",
          "parameters": [
            {
              "description": "Title",
              "in": "query",
              "name": "title",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "tags",
              "schema": {
                "type": "string"
              },
              "description": "Tags"
            },
            {
              "name": "published",
              "schema": {
                "type": "string"
              },
              "description": "Published",
              "in": "query"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              },
              "description": "Limit"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "string"
              },
              "description": "Page"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.AdminMoviesResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Search Movies",
          "tags": [
            "Movies Admin"
          ]
        }
      },
      "/api/v3/discover/addresses/upload": {
        "get": {
          "summary": "Save Address Book [DEPRECATED]",
          "tags": [
            "Events"
          ],
          "x-codegen-request-body-name": "AddressBookRequest",
          "description": "Save Address Book",
          "requestBody": {
            "description": "Address Book Request",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/addressbook.AddressBookRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/weeklypackdashboard": {
        "get": {
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.DailyPackDashboard"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Weekly Pack Dashboard",
          "tags": [
            "Weekly Pack Dashboard"
          ],
          "description": "Weekly Pack Dashboard"
        }
      },
      "/api/v3/discover/movies/feed": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.MovieFeedResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Events Feed",
          "tags": [
            "Movie Discover Resource"
          ],
          "description": "Events Feed",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/api/v3/discover/movies/import/cleanse-cinemas": {
        "put": {
          "requestBody": {
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.CleanseCinemasRequest"
                }
              }
            },
            "description": "CleanseCinemasRequest"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.CleanseCinemasResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Cleanse Cinemas",
          "tags": [
            "Movie Data Ingestion"
          ],
          "x-codegen-request-body-name": "CapacityForm",
          "description": "Cleanse Cinemas"
        }
      },
      "/api/v3/discover/sistic/user/_details": {
        "get": {
          "description": "Get User Details for sistic orders",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.UserDetails"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get User Details",
          "tags": [
            "Sistic Events"
          ]
        }
      },
      "/api/v5/discover/cinemas/data": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.HeroMovie"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Find Cinemas Data",
          "tags": [
            "Movie Data Resource"
          ],
          "description": "Find Cinemas Data",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            },
            {
              "name": "sortBy",
              "schema": {
                "type": "string"
              },
              "description": "Sort By",
              "in": "query"
            },
            {
              "in": "query",
              "name": "select",
              "schema": {
                "type": "string"
              },
              "description": "Select"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Page",
              "in": "query",
              "name": "page"
            },
            {
              "description": "Limit",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Is Null",
              "in": "query",
              "name": "isNull"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Not Null",
              "in": "query",
              "name": "notNull"
            }
          ]
        }
      },
      "/health/db": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.HealthStatus"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "DB Health Check",
          "tags": [
            "Health Check"
          ],
          "description": "DB Health Check"
        }
      },
      "/api/v3/discover/movies/import/showtimes": {
        "post": {
          "description": "Import Show Times",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.Run"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Import Show Times",
          "tags": [
            "Movie Data Ingestion"
          ]
        }
      },
      "/api/v3/discover/sistic/payments/status/_update": {
        "post": {
          "description": "Update the payment status of a placed order. This is called by the payment service.",
          "requestBody": {
            "description": "Payment Status",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/payments.StatusResponse"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Update Payment Status",
          "tags": [
            "Sistic Events"
          ],
          "x-codegen-request-body-name": "PaymentStatus"
        }
      },
      "/api/v5/discover/articles": {
        "get": {
          "tags": [
            "Events"
          ],
          "description": "Find events",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Sort By",
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Select",
              "in": "query",
              "name": "select"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Page",
              "in": "query",
              "name": "page"
            },
            {
              "description": "Limit",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Is Null",
              "in": "query",
              "name": "isNull",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Not Null",
              "in": "query",
              "name": "isNull",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PaginatedResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Find"
        }
      },
      "/api/v3/discover/home/{customer_id}": {
        "get": {
          "summary": "Fetch Home Feed [DEPRECATED]",
          "tags": [
            "Events"
          ],
          "description": "Fetch Home Feed for a user. This functionality was moved to quilt",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path",
              "name": "customer_id"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponseListView"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/sistic/event/_ingest": {
        "get": {
          "description": "Gets the data from Sistic and ingest it into our db. This is being triggered every 30 minutes",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.IngestEventsRespose"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Ingest events",
          "tags": [
            "Sistic Events"
          ]
        }
      },
      "/api/v3/discover/{feed_type}/{layout_type}/articles/{customer_id}": {
        "get": {
          "tags": [
            "Events"
          ],
          "description": "Fetch Articles.",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            },
            {
              "description": "Feed Type eg: event",
              "in": "path",
              "name": "feed_type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Layout Type eg: discover",
              "in": "path",
              "name": "layout_type"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path",
              "name": "customer_id",
              "required": true
            },
            {
              "description": "Category",
              "in": "query",
              "name": "category",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Location",
              "in": "query",
              "name": "location",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "date",
              "schema": {
                "type": "string"
              },
              "description": "Date"
            },
            {
              "name": "exclusive",
              "schema": {
                "type": "string"
              },
              "description": "Exclusive",
              "in": "query"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Tags",
              "in": "query",
              "name": "tags"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponseListView"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Fetch Articles"
        }
      },
      "/api/v3/discover/sistic/products/{product_id}/tickettype": {
        "get": {
          "summary": "Get Ticket Price",
          "tags": [
            "Sistic Events"
          ],
          "description": "Get ticket prices",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product ID",
              "in": "path",
              "name": "product_id"
            },
            {
              "name": "priceCatId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Price Category ID",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.TicketPriceResponse"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/movies/import/moviedetails": {
        "post": {
          "summary": "Import Movies",
          "tags": [
            "Movie Data Ingestion"
          ],
          "description": "Import Movies",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.Run"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/admin/marketing-events/{event_id}": {
        "put": {
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.MarketingEvent"
                }
              }
            },
            "description": "Auth Token",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.MarketingEvent"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Update Marketing Events",
          "tags": [
            "Marketing Events Admin"
          ],
          "x-codegen-request-body-name": "MarketingEvent",
          "description": "Update Marketing Events"
        },
        "get": {
          "x-codegen-request-body-name": "MarketingEvent",
          "description": "Get Marketing Event By Id",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.MarketingEvent"
                }
              }
            },
            "description": "Auth Token",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.MarketingEvent"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Marketing Event By Id",
          "tags": [
            "Marketing Events Admin"
          ]
        }
      },
      "/api/v3/discover/articles": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponseListView"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Fetch Tagged Article",
          "tags": [
            "Events"
          ],
          "description": "This api is used to serve curated events on the app",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tags",
              "schema": {
                "type": "string"
              },
              "description": "Tags",
              "in": "query"
            },
            {
              "name": "view_type",
              "schema": {
                "type": "string"
              },
              "description": "View Type",
              "in": "query"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              },
              "description": "Limit"
            },
            {
              "description": "Draft",
              "in": "query",
              "name": "draft",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Keywords",
              "in": "query",
              "name": "keywords"
            }
          ]
        }
      },
      "/api/v3/discover/api/v4/discover/article/{article_id}/{customer_id}": {
        "get": {
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "article_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Article ID",
              "in": "path"
            },
            {
              "name": "customer_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ArticleDetailResponse"
                  }
                }
              },
              "description": "OK"
            },
            "404": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "View Article Details V4",
          "tags": [
            "Events"
          ],
          "description": "View Article Details for a given article id. This only queries articles where published is set to true. But here the response was changed a bit."
        }
      },
      "/api/v3/discover/dailypackdashboard": {
        "get": {
          "description": "Daily Pack Dashboard",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.DailyPackDashboard"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Daily Pack Dashboard",
          "tags": [
            "Daily Pack Dashboard"
          ]
        }
      },
      "/api/v3/discover/cinemas": {
        "get": {
          "summary": "Get All Cinema",
          "tags": [
            "Cinema Resource"
          ],
          "description": "Get All Cinema",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/movies": {
        "get": {
          "description": "Search Movies",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "query",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Query"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.MovieSearchResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Search Movies",
          "tags": [
            "Movie Discover Resource"
          ]
        }
      },
      "/health": {
        "get": {
          "summary": "Health Check",
          "tags": [
            "Health Check"
          ],
          "description": "Health Check",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.HealthStatus"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/assets": {
        "post": {
          "x-codegen-request-body-name": "UploadAssetRequest",
          "description": "Upload Assets to s3",
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.UploadAssetRequest"
                }
              }
            },
            "description": "Upload Asset Request",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.UploadAssetResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Upload Asset",
          "tags": [
            "Assets"
          ]
        }
      },
      "/api/v3/discover/sistic/promocode/{promo_code}/validate": {
        "post": {
          "summary": "Validate Promo Code",
          "tags": [
            "Sistic Events"
          ],
          "x-codegen-request-body-name": "body",
          "description": "Validate Promo Code and send the final amount to charge ( But this will validate generally, if the user has already used, we won't be able to detect that)",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "in": "path",
              "name": "promo_code",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Promo Code"
            }
          ],
          "requestBody": {
            "description": "Validate Promo Request",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.ValidatePromoRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ValidatePromoResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/movies/feed/{type}": {
        "get": {
          "description": "Filter Feed",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "description": "Type",
              "in": "path",
              "name": "type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "lat",
              "schema": {
                "type": "string"
              },
              "description": "Latitude"
            },
            {
              "name": "long",
              "schema": {
                "type": "string"
              },
              "description": "Longitude",
              "in": "query"
            },
            {
              "description": "Cinema",
              "in": "query",
              "name": "cinema",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.MovieFeedResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Filter Feed",
          "tags": [
            "Movie Discover Resource"
          ]
        }
      },
      "/api/v5/discover/showtimes/data": {
        "get": {
          "summary": "Find Showtimes Data",
          "tags": [
            "Movie Data Resource"
          ],
          "description": "Find Showtimes Data",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            },
            {
              "description": "Sort By",
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Select",
              "in": "query",
              "name": "select",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Page",
              "in": "query",
              "name": "page",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Limit",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Is Null",
              "in": "query",
              "name": "isNull"
            },
            {
              "description": "Not Null",
              "in": "query",
              "name": "notNull",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.HeroMovie"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/explorer": {
        "get": {
          "summary": "Explore",
          "tags": [
            "Daily Pack Dashboard"
          ],
          "description": "Explore",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ExplorerResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/admin/weeklyreward/jobs/default-streak": {
        "post": {
          "tags": [
            "Login Streak Admin"
          ],
          "description": "Create Default Login Streak",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.LoginStreak"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Create Default Login Streak"
        }
      },
      "/api/v3/discover/activities/{action}/{customer_id}": {
        "get": {
          "tags": [
            "Events"
          ],
          "description": "View liked events section in the app.",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "in": "path",
              "name": "action",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Action eg: like"
            },
            {
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path",
              "name": "customer_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Sort By",
              "in": "query",
              "name": "sort-by"
            },
            {
              "description": "Archive",
              "in": "query",
              "name": "archive",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Limit",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponseListView"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Fetch Activity Log"
        }
      },
      "/api/v3/discover/admin/marketing-events": {
        "get": {
          "description": "Get Marketing Events",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.MarketingEvent"
                    }
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Marketing Events",
          "tags": [
            "Marketing Events Admin"
          ]
        },
        "post": {
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.MarketingEvent"
                  }
                }
              },
              "description": "Created"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Post Marketing Events",
          "tags": [
            "Marketing Events Admin"
          ],
          "x-codegen-request-body-name": "MarketingEvent",
          "description": "Post Marketing Events",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.MarketingEvent"
                }
              }
            },
            "description": "Auth Token",
            "required": true
          }
        }
      },
      "/api/v3/discover/overlay/{customer_id}": {
        "get": {
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "customer_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponseListView"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Overlay",
          "tags": [
            "Events"
          ],
          "description": "This is also a not used feature. Which used to serve a once a week popup page"
        }
      },
      "/api/v3/discover/sistic/event/{event_id}/timings": {
        "get": {
          "summary": "Get show date and time",
          "tags": [
            "Sistic Events"
          ],
          "description": "Returns event date and time for a given event id ( on stage try with event id : \"mobtest0420\" )",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "description": "Event ID",
              "in": "path",
              "name": "event_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ShowDateAndTimeResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/admin/dailypacks/{daily_pack_id}": {
        "put": {
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Daily Pack ID",
              "in": "path",
              "name": "daily_pack_id",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.DailyPack"
                }
              }
            },
            "description": "Daily Pack",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.DailyPack"
                  }
                }
              }
            },
            "404": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Update Daily Pack",
          "tags": [
            "Daily Pack Admin"
          ],
          "x-codegen-request-body-name": "DailyPack",
          "description": "Update Daily Pack"
        },
        "delete": {
          "responses": {
            "200": {
              "content": {}
            },
            "404": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Update Daily Pack",
          "tags": [
            "Daily Pack Admin"
          ],
          "description": "Update Daily Pack",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "name": "daily_pack_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Daily Pack ID",
              "in": "path"
            }
          ]
        }
      },
      "/api/v3/discover/admin/weeklyreward/{streak_id}": {
        "put": {
          "x-codegen-request-body-name": "LoginStreak",
          "description": "Get Login Streaks",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Streak ID",
              "in": "path",
              "name": "streak_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Login Streak",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.LoginStreak"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.LoginStreak"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Login Streaks",
          "tags": [
            "Login Streak Admin"
          ]
        }
      },
      "/api/v3/discover/feed": {
        "get": {
          "tags": [
            "Events"
          ],
          "description": "Event feed for user",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "description": "Page",
              "in": "query",
              "name": "page",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponseListView"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Feed"
        }
      },
      "/api/v3/discover/onboard/articles": {
        "get": {
          "tags": [
            "Events"
          ],
          "description": "Onboarding Articles",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Onboarding Articles [DEPRECATED]"
        }
      },
      "/api/v3/discover/admin/movies/{movie_id}": {
        "put": {
          "requestBody": {
            "description": "Movie",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/models.Movie"
                }
              }
            }
          },
          "responses": {
            "204": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Edit Movies",
          "tags": [
            "Movies Admin"
          ],
          "x-codegen-request-body-name": "Movie",
          "description": "Edit Movies",
          "parameters": [
            {
              "description": "Movie ID",
              "in": "path",
              "name": "movie_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/api/v3/discover/admin/weeklyreward": {
        "get": {
          "description": "Get Login Streaks",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.LoginStreak"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Login Streaks",
          "tags": [
            "Login Streak Admin"
          ]
        },
        "post": {
          "summary": "Create Login Streak",
          "tags": [
            "Login Streak Admin"
          ],
          "x-codegen-request-body-name": "LoginStreak",
          "description": "Create Login Streak",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.LoginStreak"
                }
              }
            },
            "description": "Login Streak"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.ExplorerResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/sistic/orders/{order_id}/_confirm": {
        "post": {
          "summary": "Confirm Order",
          "tags": [
            "Sistic Events"
          ],
          "description": "Confirm Sistic order",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Order ID",
              "in": "path",
              "name": "order_id",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ConfirmOrderResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v5/discover/movies/data": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.HeroMovie"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Find Movies Data",
          "tags": [
            "Movie Data Resource"
          ],
          "description": "Find Movies Data",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            },
            {
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string"
              },
              "description": "Sort By"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Select",
              "in": "query",
              "name": "select"
            },
            {
              "name": "page",
              "schema": {
                "type": "string"
              },
              "description": "Page",
              "in": "query"
            },
            {
              "description": "Limit",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "isNull",
              "schema": {
                "type": "string"
              },
              "description": "Is Null",
              "in": "query"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Not Null",
              "in": "query",
              "name": "notNull"
            }
          ]
        }
      },
      "/api/v3/discover/config/{id}": {
        "get": {
          "tags": [
            "Config"
          ],
          "description": "Get Config by ID",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            },
            {
              "description": "Id eg: genre",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.Config"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Config"
        },
        "post": {
          "summary": "Post Config",
          "tags": [
            "Config"
          ],
          "x-codegen-request-body-name": "UploadAssetRequest",
          "description": "Post Config",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.Config"
                }
              }
            },
            "description": "Config",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.Config"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/admin/polls": {
        "get": {
          "summary": "Get Polls",
          "tags": [
            "Polling Game Admin"
          ],
          "description": "Get Polls",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.PollingGame"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        },
        "post": {
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "requestBody": {
            "description": "Polling Game",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.PollingGame"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PollingGame"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Create Poll",
          "tags": [
            "Polling Game Admin"
          ],
          "x-codegen-request-body-name": "PollingGame",
          "description": "Create polls using admin UI."
        }
      },
      "/api/v3/discover/sistic/products/{product_id}/seats/_offer": {
        "get": {
          "summary": "Offer seats to the user",
          "tags": [
            "Sistic Events"
          ],
          "description": "Return a list of seats to be presented to the user",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            },
            {
              "in": "path",
              "name": "product_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product ID"
            },
            {
              "description": "Price Category ID",
              "in": "query",
              "name": "priceCatId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Seat Selection ID",
              "in": "query",
              "name": "seatSectionId",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Mode",
              "in": "query",
              "name": "mode",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "quantity",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Quantity",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.SeatOfferResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/movies/import/cinemas": {
        "post": {
          "description": "Import Cinemas",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.Run"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Import Cinemas",
          "tags": [
            "Movie Data Ingestion"
          ]
        }
      },
      "/api/v3/discover/admin/dailypacks": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.DailyPack"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Daily Packs",
          "tags": [
            "Daily Pack Admin"
          ],
          "description": "Daily Packs",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "from",
              "schema": {
                "type": "string"
              },
              "description": "From",
              "in": "query"
            }
          ]
        },
        "post": {
          "description": "Create Daily Pack",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.DailyPack"
                }
              }
            },
            "description": "Daily Pack"
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.DailyPack"
                  }
                }
              },
              "description": "Created"
            },
            "400": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Create Daily Pack",
          "tags": [
            "Daily Pack Admin"
          ],
          "x-codegen-request-body-name": "DailyPack"
        }
      },
      "/api/v3/discover/polls/jobs/reward": {
        "put": {
          "summary": "Reward To Winner",
          "tags": [
            "Polling Game"
          ],
          "description": "This is called by a chron to give rewards to winners",
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/polls/{poll_id}/{hack1}/{hack2}": {
        "put": {
          "description": "Return a list of today's polls.",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "in": "path",
              "name": "poll_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Poll ID"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "hack 1",
              "in": "path",
              "name": "hack1"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "hack 2",
              "in": "path",
              "name": "hack2",
              "required": true
            }
          ],
          "requestBody": {
            "description": "Polling Game Activity",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.PollingGameActivity"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.PollingGameResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Submit Vote Hack",
          "tags": [
            "Polling Game"
          ],
          "x-codegen-request-body-name": "PollingGameActivity"
        }
      },
      "/api/v3/discover/{feed_type}/filters/{customer_id}": {
        "get": {
          "description": "Return a list of filters for a particular feed type. Filters are stored in 'dashboardContentFilters' collection. eg: event",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            },
            {
              "name": "feed_type",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Feed Type",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path",
              "name": "customer_id",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.FiltersResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Fetch filters",
          "tags": [
            "Events"
          ]
        }
      },
      "/api/v3/discover/invite/upload": {
        "post": {
          "summary": "Upload Custom Invites [DEPRECATED]",
          "tags": [
            "Events"
          ],
          "x-codegen-request-body-name": "MetaData",
          "description": "Upload Custom Invites",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.MetaData"
                }
              }
            },
            "description": "Meta Data",
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/sistic/orders": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/dao.Order"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Orders",
          "tags": [
            "Sistic Events"
          ],
          "description": "Get orders for the current user",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "post": {
          "summary": "Submit Order",
          "tags": [
            "Sistic Events"
          ],
          "x-codegen-request-body-name": "Order",
          "description": "Submit Sistic order",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.SubmitOrderRequest"
                }
              }
            },
            "description": "Order Details",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.SubmitOrderResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v5/discover/movies/upcoming": {
        "get": {
          "summary": "Find Upcoming",
          "tags": [
            "Movie Data Resource"
          ],
          "description": "Find Upcoming",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PaginatedResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/api/v3/discover/sistic/products/{product_id}/seatmap/overview": {
        "get": {
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "description": "Product ID",
              "in": "path",
              "name": "product_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.OverviewEvent"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Event Seat Map Overview",
          "tags": [
            "Sistic Events"
          ],
          "description": "Returns event seat map overview details by a given product id ( you can use 1171977 for staging )"
        }
      },
      "/api/v3/discover/onboard/actions": {
        "get": {
          "tags": [
            "Events"
          ],
          "x-codegen-request-body-name": "OnboardEvents",
          "description": "OnBoard Actions",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.OnboardEvents"
                }
              }
            },
            "description": "Onboard Events",
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "SendEventNotification [DEPRECATED]"
        }
      },
      "/api/v3/discover/admin/movies": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.AdminMoviesResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Index Movies",
          "tags": [
            "Movies Admin"
          ],
          "description": "Index Movies",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Limit",
              "in": "query",
              "name": "limit"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "string"
              },
              "description": "Page"
            }
          ]
        },
        "post": {
          "requestBody": {
            "description": "Movie",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/models.Movie"
                }
              }
            }
          },
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/models.Movie"
                  }
                }
              },
              "description": "Created"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Create Movies",
          "tags": [
            "Movies Admin"
          ],
          "x-codegen-request-body-name": "Movie",
          "description": "Create Movies"
        }
      },
      "/api/v3/discover/polls/jobs/transition-state": {
        "put": {
          "description": "This is called by a chron to mark current polls as visible.",
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Transition State",
          "tags": [
            "Polling Game"
          ]
        }
      },
      "/api/v3/discover/polls/notification": {
        "get": {
          "tags": [
            "Polling Game"
          ],
          "description": "Get Poll Notifications",
          "parameters": [
            {
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.PollingGameNotificationResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Poll Notifications"
        }
      },
      "/api/v3/discover/admin/movies/name_map": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PaginatedResponse"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Movie Name Map Get",
          "tags": [
            "Movies Admin"
          ],
          "description": "Movie Name Map Get",
          "parameters": [
            {
              "description": "Sort By",
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Select",
              "in": "query",
              "name": "select"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Page",
              "in": "query",
              "name": "page"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              },
              "description": "Limit"
            },
            {
              "description": "Is Null",
              "in": "query",
              "name": "isNull",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Not Null",
              "in": "query",
              "name": "notNull",
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "post": {
          "tags": [
            "Movies Admin"
          ],
          "x-codegen-request-body-name": "MovieNameMap",
          "description": "Movie Name Map Post",
          "requestBody": {
            "description": "Movie Name Map",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/models.MovieNameMap"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/models.MovieNameMap"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Movie Name Map Post"
        }
      },
      "/api/v3/discover/dailypacks/{dailypack_id}/{action_type}": {
        "put": {
          "tags": [
            "Daily Pack"
          ],
          "description": "Daily Pack Activity",
          "parameters": [
            {
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header"
            },
            {
              "description": "Daily Pack ID eg: 5c991b34c20478897f51c6e8",
              "in": "path",
              "name": "dailypack_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Action Type eg: unlocked, redeem",
              "in": "path",
              "name": "action_type",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/errors.BadRequestError"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Daily Pack Activity"
        }
      },
      "/api/v3/discover/movies/{movie_id}/activities/interested": {
        "delete": {
          "summary": "Delete Interest",
          "tags": [
            "Movie Activity"
          ],
          "description": "Delete Interest to a movie",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Movie ID",
              "in": "path",
              "name": "movie_id",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "content": {}
            },
            "404": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        },
        "put": {
          "responses": {
            "204": {
              "content": {}
            },
            "404": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Add Interest",
          "tags": [
            "Movie Activity"
          ],
          "description": "Add Interest to a movie",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Movie ID",
              "in": "path",
              "name": "movie_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/api/v3/discover/sistic/products/{product_id}/seats/_release": {
        "post": {
          "tags": [
            "Sistic Events"
          ],
          "x-codegen-request-body-name": "ReleaseSeatRequest",
          "description": "Releases seats that were locked because seats were offered before",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "product_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Product ID"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.ReleaseSeatRequest"
                }
              }
            },
            "description": "Release Seat Request",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ReleaseSeatResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Release offered seats"
        }
      },
      "/api/v3/discover/movies/{movie_id}": {
        "get": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Movie ID",
              "in": "path",
              "name": "movie_id",
              "required": true
            },
            {
              "name": "cinema",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Cinema",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponse"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Search Movies",
          "tags": [
            "Movie Discover Resource"
          ],
          "description": "Search Movies"
        }
      },
      "/api/v5/discover/movies/now-showing": {
        "get": {
          "tags": [
            "Movie Data Resource"
          ],
          "description": "Find Now Showing",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PaginatedResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Find Now Showing"
        }
      },
      "/api/v3/discover/movies/import/showtime-capacity": {
        "put": {
          "requestBody": {
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/dto.CapacityForm"
                }
              }
            },
            "description": "This requires an array of CapacityForm. Data type defined as an object because struct arrays are not supported"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/services.MergeResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Update Capacity",
          "tags": [
            "Movie Data Ingestion"
          ],
          "x-codegen-request-body-name": "CapacityForm",
          "description": "Update Capacity"
        }
      },
      "/api/v3/discover/articles/nearby": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ApiResponseListView"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Near by Articles",
          "tags": [
            "Events"
          ],
          "description": "Near by Articles to the user",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Tags",
              "in": "query",
              "name": "tags"
            },
            {
              "name": "view_type",
              "schema": {
                "type": "string"
              },
              "description": "View Type",
              "in": "query"
            },
            {
              "description": "Limit",
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Latitude",
              "in": "query",
              "name": "lat",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Longitude",
              "in": "query",
              "name": "long",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Max Distance",
              "in": "query",
              "name": "max_distance",
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/api/v3/discover/dailypacks/jobs/default-pack": {
        "post": {
          "description": "Create Default Daily Pack",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.DailyPack"
                  }
                }
              },
              "description": "Created"
            },
            "400": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Create Default Daily Pack",
          "tags": [
            "Daily Pack Admin"
          ]
        }
      },
      "/api/v3/discover/admin/article_detail/{article_id}": {
        "get": {
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Article ID",
              "in": "path",
              "name": "article_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.AdminArticleDetailsResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Article Details",
          "tags": [
            "Events Admin"
          ],
          "description": "Fetch Article Details"
        }
      },
      "/api/v3/discover/article/{article_id}/{action_type}/{customer_id}": {
        "post": {
          "description": "Record the action when customer likes and unlikes an event",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "article_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Article ID",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Action Type eg: like/unlike",
              "in": "path",
              "name": "action_type"
            },
            {
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path",
              "name": "customer_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Capture Customer Actions",
          "tags": [
            "Events"
          ]
        }
      },
      "/api/v3/discover/movies/map/cinemas": {
        "get": {
          "description": "Get Cinemas Map",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Name",
              "in": "path",
              "name": "name",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Expected",
              "in": "path",
              "name": "expected",
              "required": true
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Source",
              "in": "path",
              "name": "source"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/services.MappedResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Cinemas Map",
          "tags": [
            "Movie Discover Resource"
          ]
        }
      },
      "/api/v5/discover/articles/saved": {
        "get": {
          "description": "Get Saved Articles by a User",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/dto.Article"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "SavedArticles",
          "tags": [
            "Events"
          ]
        }
      },
      "/api/v3/discover/admin/articles/events": {
        "get": {
          "description": "Fetch All Articles",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Limit",
              "in": "query",
              "name": "limit"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Page",
              "in": "query",
              "name": "page"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.AdminArticlesResponse"
                  }
                }
              }
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Fetch All Articles",
          "tags": [
            "Events Admin"
          ]
        }
      },
      "/api/v3/discover/movies/import/cleanse-showtimes": {
        "put": {
          "description": "Cleanse Show Times",
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Cleanse Show Times",
          "tags": [
            "Movie Data Ingestion"
          ]
        }
      },
      "/api/v3/discover/sistic/report/_generate": {
        "get": {
          "description": "Generate a report email about daily sistic bookings. This will be called by Common UI as well as a chron.",
          "parameters": [
            {
              "name": "start",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "start tine for the events to report (epoch timestamp in seconds eg: 1585800767)",
              "in": "query"
            },
            {
              "name": "end",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "end tine for the events to report (epoch timestamp in seconds eg: 1585800767)",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/dto.ReportResponse"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Generate Report",
          "tags": [
            "Sistic Events"
          ]
        }
      },
      "/api/v4/discover/polls/stats/{page_id}": {
        "get": {
          "tags": [
            "Polling Game"
          ],
          "description": "This is called by a chron to mark current polls as visible.",
          "parameters": [
            {
              "name": "page_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Page ID",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Vote Count",
              "in": "query",
              "name": "vote_count"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "string"
              },
              "description": "Limit"
            },
            {
              "description": "Filter Tag",
              "in": "query",
              "name": "filter-tag",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.PollingGameStatsResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Daily Poll Stats"
        }
      },
      "/api/v3/discover/admin/articles": {
        "get": {
          "description": "Search Articles",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Limit",
              "in": "query",
              "name": "limit"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Page",
              "in": "query",
              "name": "page"
            },
            {
              "description": "Query",
              "in": "query",
              "name": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.AdminArticlesResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Search Articles",
          "tags": [
            "Events Admin"
          ]
        }
      },
      "/api/v3/discover/article/{article_id}/{customer_id}": {
        "get": {
          "description": "View Article Details for a given article id. This only queries articles where published is set to true",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "in": "path",
              "name": "article_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Article ID"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "Customer ID, This field is deprecated, we just use this for backward compatibility",
              "in": "path",
              "name": "customer_id",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/dto.ArticleDetailResponse"
                  }
                }
              },
              "description": "OK"
            },
            "404": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "View Article Details",
          "tags": [
            "Events"
          ]
        }
      },
      "/api/v3/discover/admin/polls/{poll_id}": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/model.PollingGame"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Get Polls",
          "tags": [
            "Polling Game Admin"
          ],
          "description": "Get Polls",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth"
            },
            {
              "description": "Poll ID",
              "in": "path",
              "name": "poll_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "put": {
          "tags": [
            "Polling Game Admin"
          ],
          "x-codegen-request-body-name": "PollingGame",
          "description": "Update Poll",
          "parameters": [
            {
              "description": "Auth Token",
              "in": "header",
              "name": "X-Auth",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Poll ID",
              "in": "path",
              "name": "poll_id"
            }
          ],
          "requestBody": {
            "description": "Polling Game",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.PollingGame"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.PollingGame"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Update Poll"
        }
      }
    },
    "servers": [
      {
        "url": "http://localhost:3000{{.BasePath}}"
      }
    ],
    "tags": null,
    "components": {
      "schemas": {
        "model.Display": {
          "properties": {
            "label": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dao.Product": {
          "properties": {
            "product_id": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "payments.StatusResponse": {
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/payments.StatusResult"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.CreditType": {
          "properties": {
            "reward": {
              "swagger_ref": "#/components/schemas/model.Reward"
            }
          },
          "type": "object"
        },
        "model.LoginStreak": {
          "properties": {
            "start_date": {
              "type": "string"
            },
            "target": {
              "type": "integer"
            },
            "created_at": {
              "type": "object",
              "properties": {}
            },
            "credit_type": {
              "swagger_ref": "#/components/schemas/model.CreditType"
            },
            "end_date": {
              "type": "string"
            },
            "errors": {
              "items": {
                "swagger_ref": "#/components/schemas/model.JSONErr"
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "modified_at": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "model.AdminArticleDetailsResponse": {
          "properties": {
            "article_type": {
              "type": "string"
            },
            "date": {
              "swagger_ref": "#/components/schemas/model.Time"
            },
            "published": {
              "type": "boolean"
            },
            "status": {
              "type": "boolean"
            },
            "category": {
              "type": "string"
            },
            "purchase": {
              "swagger_ref": "#/components/schemas/model.PurchaseResponse"
            },
            "time": {
              "swagger_ref": "#/components/schemas/model.Time"
            },
            "image": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "source": {
              "swagger_ref": "#/components/schemas/model.ArticleSource"
            },
            "display": {
              "swagger_ref": "#/components/schemas/model.Display"
            },
            "id": {
              "type": "string"
            },
            "system_generated": {
              "type": "boolean"
            },
            "event_dates": {
              "swagger_ref": "#/components/schemas/model.EventDates"
            },
            "movie_id": {
              "type": "string"
            },
            "event_recurrence": {
              "type": "string"
            },
            "pre_event_notif": {
              "swagger_ref": "#/components/schemas/model.EventNotif"
            },
            "post_event_notif": {
              "swagger_ref": "#/components/schemas/model.EventNotif"
            },
            "location": {
              "properties": {},
              "type": "object"
            },
            "metadata": {
              "swagger_ref": "#/components/schemas/model.MetaData"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "string"
            },
            "description": {
              "swagger_ref": "#/components/schemas/model.Description"
            },
            "deeplink": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.IngestEventsRespose": {
          "type": "object",
          "properties": {
            "ids": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ingested": {
              "type": "integer"
            },
            "unpublished": {
              "type": "integer"
            },
            "errored": {
              "type": "integer"
            }
          }
        },
        "dto.ListViewResponse": {
          "properties": {
            "total_pages": {
              "type": "integer"
            },
            "ttl_in_ms": {
              "type": "integer"
            },
            "explorer_level": {
              "type": "string"
            },
            "explorer_types": {
              "type": "array"
            },
            "geo_location": {
              "swagger_ref": "#/components/schemas/model.GeoLocation"
            },
            "items_per_page": {
              "type": "integer"
            },
            "page": {
              "type": "integer"
            },
            "timestamp": {
              "type": "string"
            },
            "article_types": {
              "type": "array"
            },
            "components": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.Component"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.PollingGameActivity": {
          "properties": {
            "created_at": {
              "type": "integer"
            },
            "errors": {
              "items": {
                "swagger_ref": "#/components/schemas/model.JSONErr"
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "modified_at": {
              "type": "integer"
            },
            "polling_game_id": {
              "type": "string"
            },
            "rewarded": {
              "type": "boolean"
            },
            "user_id": {
              "type": "string"
            },
            "choice_id": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.ExplorerResponse": {
          "type": "object",
          "properties": {
            "meta": {
              "swagger_ref": "#/components/schemas/model.ExplorerMeta"
            },
            "next_level_point": {
              "type": "integer"
            },
            "visited_places": {
              "type": "object",
              "properties": {}
            },
            "current_point": {
              "type": "integer"
            },
            "explorer_level": {
              "type": "string"
            }
          }
        },
        "dto.AdminMoviesResponse": {
          "properties": {
            "items": {
              "items": {
                "swagger_ref": "#/components/schemas/models.Movie"
              },
              "type": "array"
            },
            "pages": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.PollingGameStats": {
          "required": [
            "end_time",
            "start_time",
            "state"
          ],
          "type": "object",
          "properties": {
            "start_time": {
              "type": "integer"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "id": {
              "type": "string"
            },
            "faq_id": {
              "type": "string"
            },
            "locales": {
              "properties": {},
              "type": "object"
            },
            "participants": {
              "type": "integer"
            },
            "customer_suggested": {
              "type": "boolean"
            },
            "suggester": {
              "swagger_ref": "#/components/schemas/model.Suggester"
            },
            "background_image": {
              "type": "string"
            },
            "end_time": {
              "type": "integer"
            },
            "state": {
              "type": "string"
            },
            "suggester_name": {
              "type": "string"
            }
          }
        },
        "models.Trailer": {
          "properties": {
            "language": {
              "type": "string"
            },
            "trailer_files": {
              "items": {
                "swagger_ref": "#/components/schemas/models.TrailerFile"
              },
              "type": "array"
            },
            "is_official": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "dto.Article": {
          "properties": {
            "liked": {
              "type": "boolean"
            },
            "likes": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "dto.UserDetails": {
          "type": "object",
          "properties": {
            "phone_no": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            }
          }
        },
        "dto.UploadAssetRequest": {
          "properties": {
            "fileSizeInBytes": {
              "type": "integer"
            },
            "path": {
              "type": "string"
            },
            "s3Bucket": {
              "type": "string"
            },
            "contentType": {
              "type": "string"
            },
            "file": {
              "type": "string"
            },
            "fileName": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.ShowTime": {
          "type": "object",
          "properties": {
            "show_title": {
              "type": "string"
            },
            "ticket_type": {
              "type": "string"
            },
            "venue": {
              "type": "string"
            },
            "availability_status": {
              "type": "string"
            },
            "is_promo": {
              "type": "boolean"
            },
            "product_id": {
              "type": "integer"
            },
            "show_date": {
              "type": "string"
            }
          }
        },
        "model.Price": {
          "properties": {
            "title": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "button_title": {
              "type": "string"
            },
            "postfix": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.GeoLocation": {
          "properties": {
            "error_message": {
              "type": "string"
            },
            "status": {
              "type": "integer"
            },
            "sub_title": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.AdminArticlesResponse": {
          "properties": {
            "list": {
              "items": {
                "swagger_ref": "#/components/schemas/model.AdminArticle"
              },
              "type": "array"
            },
            "pages": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "dto.CapacityForm": {
          "properties": {
            "cinema": {
              "type": "string"
            },
            "is_3d": {
              "type": "boolean"
            },
            "showtime": {
              "type": "integer"
            },
            "filled": {
              "type": "integer"
            },
            "is_gold_class": {
              "type": "boolean"
            },
            "total": {
              "type": "integer"
            },
            "booking_link": {
              "type": "string"
            },
            "is_imax": {
              "type": "boolean"
            },
            "movie": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.MovieSearchResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string"
            },
            "code": {
              "type": "integer"
            },
            "result": {
              "swagger_ref": "#/components/schemas/dto.MovieSearchResult"
            }
          }
        },
        "model.Location": {
          "properties": {
            "longitude": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "zipcode": {
              "type": "string"
            },
            "address": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "landmark": {
              "type": "string"
            },
            "latitude": {
              "type": "string"
            },
            "locale": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.Suggester": {
          "properties": {
            "phone": {
              "type": "string"
            },
            "reward_id": {
              "type": "string"
            },
            "account_number": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.MarketingEventLink": {
          "properties": {
            "position": {
              "type": "integer"
            },
            "id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dao.Amount": {
          "properties": {
            "amount": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.ConfirmOrderResponse": {
          "properties": {
            "eticket_url": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.PollingGameNotificationResponse": {
          "type": "object",
          "properties": {
            "poll_id": {
              "type": "string"
            },
            "notification": {
              "type": "boolean"
            }
          }
        },
        "addressbook.Contact": {
          "properties": {
            "nums": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.ReportResponse": {
          "properties": {
            "date": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "sistic_external_id": {
              "type": "string"
            },
            "amount": {
              "type": "number"
            },
            "event_name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "number_of_tickets": {
              "type": "integer"
            },
            "order_created_at": {
              "type": "string"
            },
            "payment_reference_id": {
              "type": "string"
            },
            "seat_details": {
              "type": "string"
            },
            "phone_number": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "models.TrailerFile": {
          "type": "object",
          "properties": {
            "transfert": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "format": {
              "type": "string"
            }
          }
        },
        "models.ImageFile": {
          "type": "object",
          "properties": {
            "size": {
              "properties": {
                "height": {
                  "type": "integer"
                },
                "width": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "dto.MovieFeedResponse": {
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/dto.MovieFeedResult"
            },
            "status": {
              "type": "string"
            },
            "code": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "dto.CartItem": {
          "properties": {
            "mode": {
              "type": "string"
            },
            "price_cat_id": {
              "type": "integer"
            },
            "price_class_list": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.PriceClass"
              },
              "type": "array"
            },
            "product_id": {
              "type": "integer"
            },
            "product_total": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            },
            "seat_inventory_ids": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "seat_section_id": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.EventNotif": {
          "type": "object",
          "properties": {
            "action_types": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "active": {
              "type": "boolean"
            },
            "notif_activity_id": {
              "type": "string"
            }
          }
        },
        "errors.BadRequestError": {
          "properties": {
            "v": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "object"
        },
        "dto.ChoicesLayout": {
          "properties": {
            "columns": {
              "type": "integer"
            },
            "rows": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "columns",
            "rows",
            "type"
          ],
          "type": "object"
        },
        "dto.CreatePollingGameRequest": {
          "properties": {
            "locales": {
              "properties": {},
              "type": "object"
            },
            "suggester": {
              "swagger_ref": "#/components/schemas/model.Suggester"
            },
            "video": {
              "swagger_ref": "#/components/schemas/model.Video"
            },
            "background_image": {
              "type": "string"
            },
            "choices_layout": {
              "swagger_ref": "#/components/schemas/model.ChoicesLayout"
            }
          },
          "type": "object"
        },
        "dto.HealthStatus": {
          "properties": {
            "environment": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.Rating": {
          "properties": {
            "display": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "model.ArticleSource": {
          "properties": {
            "name": {
              "type": "string"
            },
            "likes": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "dto.HeroMovie": {
          "properties": {
            "image": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "video": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "image",
            "title",
            "video"
          ],
          "type": "object"
        },
        "dto.ReleaseSeatResponse": {
          "properties": {
            "status_message": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.ComponentMetaData": {
          "properties": {
            "icon_image": {
              "type": "string"
            },
            "sub_title": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "background_image": {
              "type": "string"
            },
            "button_title": {
              "type": "string"
            },
            "creator_name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "displayActionButton": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "dto.Reward": {
          "properties": {
            "percent": {
              "type": "integer"
            },
            "promotion_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.MetaData": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "time": {
              "swagger_ref": "#/components/schemas/model.Time"
            },
            "date": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "can_check_in": {
              "type": "boolean"
            },
            "likes": {
              "type": "integer"
            },
            "category": {
              "type": "string"
            },
            "purchase": {
              "swagger_ref": "#/components/schemas/model.PurchaseResponse"
            },
            "longitude": {
              "type": "string"
            },
            "liked": {
              "type": "boolean"
            },
            "description": {
              "swagger_ref": "#/components/schemas/model.Description"
            },
            "checked_in": {
              "type": "boolean"
            },
            "distance": {
              "type": "integer"
            }
          }
        },
        "dto.MovieSearchResult": {
          "properties": {
            "movies": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.MovieItem"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.ExplorerMeta": {
          "type": "object",
          "properties": {
            "explorer_types": {
              "type": "array"
            },
            "article_types": {
              "type": "array"
            }
          }
        },
        "model.Defaults": {
          "properties": {
            "base_likes": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.Time": {
          "type": "object",
          "properties": {
            "end": {
              "type": "string"
            },
            "start": {
              "type": "string"
            },
            "display": {
              "type": "string"
            }
          }
        },
        "models.Cast": {
          "type": "object",
          "properties": {
            "character": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "models.Movie": {
          "properties": {
            "tmdb_id": {
              "type": "string"
            },
            "trailers": {
              "items": {
                "swagger_ref": "#/components/schemas/models.Trailer"
              },
              "type": "array"
            },
            "crew": {
              "items": {
                "swagger_ref": "#/components/schemas/models.Crew"
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "external_id": {
              "type": "string"
            },
            "runtime": {
              "type": "integer"
            },
            "website": {
              "type": "string"
            },
            "poster_image_thumbnail": {
              "type": "string"
            },
            "release_date": {
              "type": "integer"
            },
            "original_title": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            },
            "updated_at": {
              "type": "integer"
            },
            "imdb_id": {
              "type": "string"
            },
            "ratings": {
              "properties": {
                "tmdb": {
                  "swagger_ref": "#/components/schemas/models.Rating"
                },
                "imdb": {
                  "swagger_ref": "#/components/schemas/models.Rating"
                }
              },
              "type": "object"
            },
            "references": {
              "properties": {},
              "type": "object"
            },
            "cast": {
              "items": {
                "swagger_ref": "#/components/schemas/models.Cast"
              },
              "type": "array"
            },
            "genres": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/models.Genre"
              }
            },
            "posters": {
              "swagger_ref": "#/components/schemas/models.ImagesFiles"
            },
            "rentrak_film_id": {
              "type": "string"
            },
            "original_language": {
              "type": "string"
            },
            "published": {
              "type": "boolean"
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "synopsis": {
              "type": "string"
            },
            "scenes": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/models.ImagesFiles"
              }
            },
            "slug": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.PriceClass": {
          "properties": {
            "price_class_code": {
              "type": "string"
            },
            "quantity": {
              "type": "integer"
            },
            "sub_total": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            }
          },
          "type": "object"
        },
        "dto.ReleaseSeatRequest": {
          "properties": {
            "product_id": {
              "type": "string"
            },
            "released_seat_list": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.PurchaseResponse": {
          "properties": {
            "button_title": {
              "type": "string"
            },
            "deeplink": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/model.Price"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.UploadAssetResponse": {
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.EventDates": {
          "properties": {
            "display": {
              "items": {
                "swagger_ref": "#/components/schemas/model.SlotsDisplay"
              },
              "type": "array"
            },
            "slots": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Date"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.SetsReserved": {
          "properties": {
            "sets_reserved": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.Reserved"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.Run": {
          "type": "object",
          "properties": {
            "date": {
              "type": "integer"
            },
            "errorCount": {
              "type": "integer"
            },
            "injectedCount": {
              "type": "integer"
            },
            "receivedCount": {
              "type": "integer"
            },
            "success": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "dao.ReleaseSeatRequest": {
          "properties": {
            "product_id": {
              "type": "string"
            },
            "released_seat_list": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "models.Location": {
          "properties": {
            "coordinates": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.Choice": {
          "properties": {
            "image": {
              "type": "string"
            },
            "result": {
              "swagger_ref": "#/components/schemas/dto.Result"
            },
            "text": {
              "type": "string"
            },
            "color": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            }
          },
          "required": [
            "text"
          ],
          "type": "object"
        },
        "dto.SeatLevel": {
          "properties": {
            "price_category_id": {
              "type": "integer"
            },
            "price": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            },
            "seat_section_alias": {
              "type": "string"
            },
            "seat_section_type": {
              "type": "string"
            },
            "seat_color": {
              "type": "string"
            },
            "redeem": {
              "type": "boolean"
            },
            "seat_entrance": {
              "type": "string"
            },
            "seat_level_alias": {
              "type": "string"
            },
            "coordinate_list": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "seat_section_id": {
              "type": "integer"
            },
            "price_category_num": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "model.Purchase": {
          "properties": {
            "button_title": {
              "type": "string"
            },
            "deeplink": {
              "type": "string"
            },
            "price": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.FiltersResponse": {
          "properties": {
            "filters": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Filter"
              },
              "type": "array"
            },
            "type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.ShowDateAndTimeResponse": {
          "properties": {
            "show_timing_list": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/dto.ShowTime"
              }
            },
            "summary_image_path": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dao.Order": {
          "properties": {
            "_id": {
              "type": "string"
            },
            "payment": {
              "swagger_ref": "#/components/schemas/dao.Payment"
            },
            "total_products": {
              "type": "integer"
            },
            "created_at": {
              "type": "integer"
            },
            "product": {
              "items": {
                "swagger_ref": "#/components/schemas/dao.Product"
              },
              "type": "array"
            },
            "promo_code": {
              "type": "string"
            },
            "user": {
              "swagger_ref": "#/components/schemas/dao.User"
            },
            "updated_at": {
              "type": "integer"
            },
            "promo_voucher": {
              "swagger_ref": "#/components/schemas/model.RewardsVoucher"
            },
            "sistic": {
              "swagger_ref": "#/components/schemas/dao.Sistic"
            },
            "state": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.Cinemas": {
          "properties": {
            "list_val": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.SubmitOrderRequest": {
          "properties": {
            "cart_item_total": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            },
            "cart_item_list": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.CartItem"
              },
              "type": "array"
            },
            "delivery_method": {
              "swagger_ref": "#/components/schemas/dto.DeliveryMethod"
            },
            "event_id": {
              "type": "string"
            },
            "patron_info": {
              "swagger_ref": "#/components/schemas/dto.PatronInfo"
            },
            "release_seat_request": {
              "swagger_ref": "#/components/schemas/dto.ReleaseSeatRequest"
            },
            "promo_code": {
              "type": "string"
            },
            "redirection_url": {
              "type": "string"
            },
            "user_details": {
              "swagger_ref": "#/components/schemas/dto.UserDetails"
            }
          },
          "type": "object"
        },
        "dao.User": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "last_name": {
              "type": "string"
            },
            "phone_no": {
              "type": "string"
            }
          }
        },
        "models.ImagesFiles": {
          "properties": {
            "medium_res": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/models.ImageFile"
              }
            },
            "high_res": {
              "items": {
                "swagger_ref": "#/components/schemas/models.ImageFile"
              },
              "type": "array"
            },
            "low_res": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/models.ImageFile"
              }
            }
          },
          "type": "object"
        },
        "dto.MovieItem": {
          "properties": {
            "display_tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "cinema": {
              "type": "string"
            },
            "show_star_rating": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "ratings": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.Rating"
              },
              "type": "array"
            },
            "rating": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "interested": {
              "type": "boolean"
            },
            "location": {
              "swagger_ref": "#/components/schemas/models.Location"
            },
            "poster_image": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "cinema_id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "show_times": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/dto.ShowTime"
              }
            },
            "screen_types": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "models.Genre": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "dto.Result": {
          "properties": {
            "movies": {
              "swagger_ref": "#/components/schemas/dto.Movies"
            }
          },
          "type": "object"
        },
        "dao.Payment": {
          "properties": {
            "amount": {
              "swagger_ref": "#/components/schemas/dao.Amount"
            },
            "payment_reference_id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "txn_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.SeatSection": {
          "properties": {
            "price_cat_amount": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            },
            "seat_level": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.SeatLevel"
              },
              "type": "array"
            },
            "price_cat_alias": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.Description": {
          "properties": {
            "deeplink": {
              "type": "string"
            },
            "details": {
              "type": "string"
            },
            "content": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dao.Sistic": {
          "properties": {
            "product_date": {
              "type": "string"
            },
            "product_name": {
              "type": "string"
            },
            "release_seat_request": {
              "swagger_ref": "#/components/schemas/dao.ReleaseSeatRequest"
            },
            "eticker_url": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "external_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.DailyPackDashboard": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "result": {
              "swagger_ref": "#/components/schemas/dto.Result"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.CleanseCinemasResponse": {
          "properties": {
            "cinema_updated_count": {
              "type": "integer"
            },
            "missing_cinemas": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "total_count_in_db": {
              "type": "integer"
            },
            "update_error_count": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "dto.Fee": {
          "properties": {
            "charge": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            },
            "code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.ApiResponse": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "result": {
              "properties": {},
              "type": "object"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.ArticleDetail": {
          "type": "object",
          "properties": {
            "subtitle": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "button_label": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          }
        },
        "model.PageInfo": {
          "properties": {
            "next": {
              "type": "string"
            },
            "prev": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.PaymentDebitResponse": {
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/dto.Result"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.ChoicesLayout": {
          "properties": {
            "columns": {
              "type": "integer"
            },
            "rows": {
              "type": "integer"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "columns",
            "rows",
            "type"
          ],
          "type": "object"
        },
        "dto.ArticleDetailResponse": {
          "properties": {
            "deeplink": {
              "type": "string"
            },
            "category": {
              "type": "string"
            },
            "date": {
              "type": "string"
            },
            "giveaway_detail": {
              "type": "string"
            },
            "promoters": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "admission_rules": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "similar": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/dto.Component"
              }
            },
            "time": {
              "type": "string"
            },
            "footer_items": {
              "type": "array"
            },
            "purchase": {
              "swagger_ref": "#/components/schemas/model.PurchaseResponse"
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "metadata": {
              "swagger_ref": "#/components/schemas/model.MetaData"
            },
            "external_id": {
              "type": "string"
            },
            "image": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "swagger_ref": "#/components/schemas/dto.LocationResponse"
            },
            "description": {
              "swagger_ref": "#/components/schemas/model.Description"
            },
            "title": {
              "type": "string"
            },
            "duration": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.Config": {
          "properties": {
            "_id": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {}
            }
          },
          "type": "object"
        },
        "dto.OverviewEvent": {
          "type": "object",
          "properties": {
            "image_url": {
              "type": "string"
            },
            "mode": {
              "type": "string"
            },
            "seat_section_list": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/dto.SeatSection"
              }
            }
          }
        },
        "model.Options": {
          "properties": {
            "id": {
              "type": "integer"
            },
            "image": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.Amount": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            },
            "formatted": {
              "type": "string"
            }
          }
        },
        "dto.LocationResponse": {
          "properties": {
            "type": {
              "type": "string"
            },
            "zipcode": {
              "type": "string"
            },
            "address_line_1": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "latitude": {
              "type": "string"
            },
            "longitude": {
              "type": "string"
            },
            "show": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.PollingGame": {
          "properties": {
            "eligible_for": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "participants": {
              "type": "integer"
            },
            "priority": {
              "type": "integer"
            },
            "video": {
              "swagger_ref": "#/components/schemas/model.Video"
            },
            "created_at": {
              "type": "integer"
            },
            "suggester": {
              "swagger_ref": "#/components/schemas/model.Suggester"
            },
            "locales": {
              "properties": {},
              "type": "object"
            },
            "rewards": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Reward"
              },
              "type": "array"
            },
            "notification": {
              "type": "boolean"
            },
            "choices_layout": {
              "swagger_ref": "#/components/schemas/model.ChoicesLayout"
            },
            "start_time": {
              "type": "integer"
            },
            "suggester_name": {
              "type": "string"
            },
            "customer_suggested": {
              "type": "boolean"
            },
            "m_events": {
              "items": {
                "swagger_ref": "#/components/schemas/model.MarketingEventLink"
              },
              "type": "array"
            },
            "background_image": {
              "type": "string"
            },
            "faq_id": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "visible": {
              "type": "boolean"
            },
            "internal_tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "visible_until": {
              "type": "integer"
            },
            "end_time": {
              "type": "integer"
            },
            "modified_at": {
              "type": "integer"
            }
          },
          "required": [
            "end_time",
            "start_time",
            "state",
            "visible_until"
          ],
          "type": "object"
        },
        "dto.PollingGameResponse": {
          "properties": {
            "video": {
              "swagger_ref": "#/components/schemas/dto.Video"
            },
            "background_image": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "visible": {
              "type": "boolean"
            },
            "customer_suggested": {
              "type": "boolean"
            },
            "start_time": {
              "type": "integer"
            },
            "suggester_name": {
              "type": "string"
            },
            "choices_layout": {
              "swagger_ref": "#/components/schemas/dto.ChoicesLayout"
            },
            "faq_id": {
              "type": "string"
            },
            "visible_until": {
              "type": "integer"
            },
            "participants": {
              "type": "integer"
            },
            "rewards": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.Reward"
              },
              "type": "array"
            },
            "state": {
              "type": "string"
            },
            "question": {
              "type": "string"
            },
            "eligible_for": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "end_time": {
              "type": "integer"
            },
            "suggester": {
              "swagger_ref": "#/components/schemas/dto.Suggester"
            },
            "choices": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.Choice"
              },
              "type": "array"
            }
          },
          "required": [
            "end_time",
            "question",
            "start_time",
            "state",
            "visible_until"
          ],
          "type": "object"
        },
        "model.DailyPack": {
          "properties": {
            "promotion_id": {
              "type": "string"
            },
            "start_time": {
              "type": "integer"
            },
            "end_time": {
              "type": "integer"
            },
            "modified_at": {
              "properties": {},
              "type": "object"
            },
            "category": {
              "type": "string"
            },
            "created_at": {
              "type": "object",
              "properties": {}
            },
            "errors": {
              "items": {
                "swagger_ref": "#/components/schemas/model.JSONErr"
              },
              "type": "array"
            },
            "id": {
              "type": "string"
            },
            "reward_id": {
              "type": "string"
            },
            "article_detail": {
              "swagger_ref": "#/components/schemas/model.ArticleDetail"
            },
            "article_id": {
              "properties": {},
              "type": "object"
            }
          },
          "type": "object"
        },
        "dto.DashboardQueryFilterResponse": {
          "properties": {
            "key": {
              "type": "string"
            },
            "values": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.SubmitOrderResponse": {
          "properties": {
            "order_id": {
              "type": "string"
            },
            "payment_debit_response": {
              "swagger_ref": "#/components/schemas/dto.PaymentDebitResponse"
            }
          },
          "type": "object"
        },
        "dto.Component": {
          "properties": {
            "type": {
              "type": "string"
            },
            "query_filter": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/dto.DashboardQueryFilterResponse"
              }
            },
            "component_meta_data": {
              "swagger_ref": "#/components/schemas/model.ComponentMetaData"
            },
            "layout": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "sub_title": {
              "type": "string"
            },
            "actions": {
              "properties": {},
              "type": "object"
            },
            "deeplink": {
              "type": "string"
            },
            "style": {
              "type": "string"
            },
            "list": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.ListArticleResponse"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.PollingGameStatsResponse": {
          "properties": {
            "next_page": {
              "type": "boolean"
            },
            "page_number": {
              "type": "integer"
            },
            "games": {
              "items": {
                "swagger_ref": "#/components/schemas/model.PollingGameStats"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.ListArticleResponse": {
          "properties": {
            "type": {
              "type": "string"
            },
            "article_type": {
              "type": "string"
            },
            "deeplink": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "image": {
              "type": "string"
            },
            "metadata": {
              "swagger_ref": "#/components/schemas/model.MetaData"
            }
          },
          "type": "object"
        },
        "model.Article": {
          "type": "object",
          "properties": {
            "giveaway_detail": {
              "swagger_ref": "#/components/schemas/model.ArticleDetail"
            },
            "event_dates": {
              "swagger_ref": "#/components/schemas/model.EventDates"
            },
            "distance": {
              "type": "number"
            },
            "poster_image": {
              "type": "string"
            },
            "source": {
              "swagger_ref": "#/components/schemas/model.ArticleSource"
            },
            "default_info": {
              "swagger_ref": "#/components/schemas/model.Defaults"
            },
            "purchase": {
              "swagger_ref": "#/components/schemas/model.Purchase"
            },
            "promoters": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location": {
              "swagger_ref": "#/components/schemas/model.Location"
            },
            "pre_event_notif": {
              "swagger_ref": "#/components/schemas/model.EventNotif"
            },
            "tags": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "status": {
              "type": "boolean"
            },
            "published": {
              "type": "boolean"
            },
            "post_event_notif": {
              "swagger_ref": "#/components/schemas/model.EventNotif"
            },
            "display": {
              "swagger_ref": "#/components/schemas/model.Display"
            },
            "duration": {
              "type": "string"
            },
            "time": {
              "swagger_ref": "#/components/schemas/model.Time"
            },
            "description": {
              "swagger_ref": "#/components/schemas/model.Description"
            },
            "article_type": {
              "type": "string"
            },
            "date": {
              "swagger_ref": "#/components/schemas/model.Date"
            },
            "title": {
              "type": "string"
            },
            "admission_rules": {
              "type": "string"
            },
            "event_recurrence": {
              "type": "string"
            },
            "modified_at": {
              "type": "object",
              "properties": {}
            },
            "image": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "category": {
              "type": "string"
            },
            "movie_id": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "created_at": {
              "properties": {},
              "type": "object"
            },
            "external_id": {
              "type": "string"
            },
            "system_generated": {
              "type": "boolean"
            }
          },
          "required": [
            "article_type",
            "category",
            "image",
            "title"
          ]
        },
        "dto.TicketPrice": {
          "properties": {
            "password_required": {
              "type": "integer"
            },
            "price_cat_alias": {
              "type": "string"
            },
            "price_class_code": {
              "type": "string"
            },
            "price_class_id": {
              "type": "integer"
            },
            "price_value_amount": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            },
            "available_qty": {
              "type": "string"
            },
            "fee_list": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.Fee"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.Date": {
          "properties": {
            "start": {
              "type": "string"
            },
            "display": {
              "type": "string"
            },
            "end": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.TicketPriceResponse": {
          "items": {
            "properties": {
              "available_qty": {
                "type": "string"
              },
              "fee_list": {
                "items": {
                  "swagger_ref": "#/components/schemas/dto.Fee"
                },
                "type": "array"
              },
              "password_required": {
                "type": "integer"
              },
              "price_cat_alias": {
                "type": "string"
              },
              "price_class_code": {
                "type": "string"
              },
              "price_class_id": {
                "type": "integer"
              },
              "price_value_amount": {
                "swagger_ref": "#/components/schemas/dto.Amount"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "services.MappedResponse": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "target": {
              "type": "string"
            }
          }
        },
        "model.MarketingEvent": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "is_active": {
              "type": "boolean"
            },
            "last_updated": {
              "type": "integer"
            },
            "nodes": {
              "items": {
                "swagger_ref": "#/components/schemas/model.TextNode"
              },
              "type": "array"
            },
            "type": {
              "description": "for special cases",
              "type": "string"
            },
            "background_image": {
              "type": "string"
            },
            "created_at": {
              "type": "integer"
            },
            "deeplink": {
              "type": "string"
            }
          }
        },
        "dto.Movies": {
          "type": "object",
          "properties": {
            "cinemas": {
              "swagger_ref": "#/components/schemas/dto.Cinemas"
            }
          }
        },
        "dto.Reserved": {
          "properties": {
            "seat_type": {
              "type": "integer"
            },
            "top_left_coordinates": {
              "type": "string"
            },
            "coordinates": {
              "type": "string"
            },
            "inventory_id": {
              "type": "integer"
            },
            "is_group_booking_reserved": {
              "type": "boolean"
            },
            "seat_alias": {
              "type": "string"
            },
            "seat_angle": {
              "type": "string"
            },
            "seat_row_alias": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.TextNode": {
          "properties": {
            "text": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.JSONErr": {
          "type": "object",
          "properties": {
            "field": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "addressbook.AddressBookRequest": {
          "properties": {
            "version": {
              "type": "integer"
            },
            "contacts": {
              "items": {
                "swagger_ref": "#/components/schemas/addressbook.Contact"
              },
              "type": "array"
            },
            "updated": {
              "type": "integer"
            },
            "user_key": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.MovieFeedResult": {
          "properties": {
            "components": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.Component"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.SlotsDisplay": {
          "properties": {
            "time": {
              "type": "string"
            },
            "date": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.ValidatePromoRequest": {
          "type": "object",
          "properties": {
            "article_id": {
              "type": "string"
            },
            "currency": {
              "type": "string"
            },
            "amount": {
              "type": "number"
            }
          },
          "required": [
            "amount",
            "currency"
          ]
        },
        "model.PaginatedResponse": {
          "properties": {
            "data": {
              "type": "object",
              "properties": {}
            },
            "page": {
              "swagger_ref": "#/components/schemas/model.PageInfo"
            }
          },
          "type": "object"
        },
        "models.Crew": {
          "properties": {
            "id": {
              "type": "string"
            },
            "job": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.SeatOfferResponse": {
          "type": "object",
          "properties": {
            "overlay_image_path": {
              "type": "string"
            },
            "seat_selected_type": {
              "type": "string"
            },
            "sets_reserved_list": {
              "items": {
                "swagger_ref": "#/components/schemas/dto.SetsReserved"
              },
              "type": "array"
            },
            "expiration_time": {
              "type": "string"
            },
            "image_url": {
              "type": "string"
            }
          }
        },
        "dto.PatronInfo": {
          "properties": {
            "patron_type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "models.Rating": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "vote_count": {
              "type": "string"
            }
          }
        },
        "dto.Video": {
          "properties": {
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.AdminArticle": {
          "type": "object",
          "properties": {
            "modified_at": {
              "properties": {},
              "type": "object"
            },
            "source": {
              "swagger_ref": "#/components/schemas/model.ArticleSource"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "type": "boolean"
            },
            "created_at": {
              "properties": {},
              "type": "object"
            },
            "event_dates": {
              "swagger_ref": "#/components/schemas/model.EventDates"
            },
            "id": {
              "type": "string"
            },
            "metadata": {
              "swagger_ref": "#/components/schemas/model.MetaData"
            },
            "published": {
              "type": "boolean"
            },
            "system_generated": {
              "type": "boolean"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "dto.DeliveryMethod": {
          "properties": {
            "charge": {
              "swagger_ref": "#/components/schemas/dto.Amount"
            },
            "code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.OnboardEvents": {
          "type": "object",
          "properties": {
            "disliked_article_ids": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "liked_article_ids": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "model.RewardsVoucher": {
          "properties": {
            "promo_code": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "user_id": {
              "type": "string"
            },
            "voucher_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "services.MergeResult": {
          "properties": {
            "updated_count": {
              "type": "integer"
            },
            "final_count": {
              "type": "integer"
            },
            "initial_count": {
              "type": "integer"
            },
            "insert_errors": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "inserted_count": {
              "type": "integer"
            },
            "invalid_count": {
              "type": "integer"
            },
            "update_errors": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.Reward": {
          "properties": {
            "percent": {
              "type": "integer"
            },
            "promotion_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "model.Video": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "models.MovieNameMap": {
          "required": [
            "_id",
            "cinema_chain",
            "cinema_movie_name",
            "db_movie_id",
            "db_movie_name"
          ],
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "cinema_chain": {
              "type": "string"
            },
            "cinema_movie_name": {
              "type": "string"
            },
            "db_movie_id": {
              "type": "string"
            },
            "db_movie_name": {
              "type": "string"
            }
          }
        },
        "dto.CleanseCinemasRequest": {
          "properties": {
            "data": {
              "type": "array"
            }
          },
          "type": "object"
        },
        "dto.Suggester": {
          "properties": {
            "account_number": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "reward_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "dto.ValidatePromoResponse": {
          "properties": {
            "amount": {
              "type": "number"
            },
            "discount": {
              "type": "number"
            },
            "final_amount": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "model.Filter": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "no_filter": {
              "type": "string"
            },
            "options": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Options"
              },
              "type": "array"
            },
            "pre_selected": {
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "title": {
              "type": "string"
            }
          }
        },
        "dto.ApiResponseListView": {
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/dto.ListViewResponse"
            }
          },
          "type": "object"
        },
        "payments.StatusResult": {
          "properties": {
            "txn_id": {
              "type": "string"
            },
            "payment_reference_id": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "description": "Discover API documentation.",
      "license": {},
      "title": "Discover API",
      "version": "{{.Version}}",
      "contact": {}
    },
    "openapi": "3.0.1"
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebcb"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/api/v3/discover/admin/weeklyreward/{streak_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/movies/import/cleanse-cinemas",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/event/_ingest",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v5/discover/movies/data",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/dailypacks",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/dailypacks",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/assets",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v5/discover/movies/upcoming",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v5/discover/articles/saved",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v5/discover/cinemas/data",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v5/discover/showtimes/data",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/addresses/upload",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/dailypacks/{dailypack_id}/{action_type}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/movies",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/polls",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/polls",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/products/{product_id}/tickettype",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/dailypackdashboard",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/home/{customer_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/orders/{order_id}/_confirm",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/weeklypackdashboard",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/{feed_type}/filters/{customer_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/movies/search",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/weeklyreward/jobs/default-streak",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/movies/import/cleanse-showtimes",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/orders",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/orders",
      "method": "POST"
    },
    {
      "endptRegex": "/health/db",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/marketing-events/{event_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/marketing-events/{event_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/admin/movies/name_map",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/movies/name_map",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/products/{product_id}/seats/_release",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v5/discover/movies/now-showing",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/article/{type}",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/admin/marketing-events",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/marketing-events",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/admin/polls/{poll_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/polls/{poll_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/movies/import/moviedetails",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/report/_generate",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/promocode/{promo_code}/validate",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/articles/nearby",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/movies/feed",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/movies/import/showtime-capacity",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/movies/{movie_id}/activities/interested",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/movies/{movie_id}/activities/interested",
      "method": "DELETE"
    },
    {
      "endptRegex": "/api/v3/discover/onboard/actions",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/polls/jobs/transition-state",
      "method": "PATCH"
    },
    {
      "endptRegex": "/health",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/article_detail/{article_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/articles",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/movies",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/movies",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/articles",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/movies/{movie_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/event/{event_id}/timings",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/movies/{movie_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/api/v4/discover/article/{article_id}/{customer_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/cinemas",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/polls/jobs/reward",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/polls/notification",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/polls",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/polls",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/article/{article_id}/{action_type}/{customer_id}",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/config/{id}",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/config/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/movies/import/showtimes",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/movies/map/cinemas",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/article/{article_id}/{customer_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/explorer",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/movies/import/cinemas",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v4/discover/polls/stats/{page_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v5/discover/articles",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/dailypacks/jobs/default-pack",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/overlay/{customer_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/products/{product_id}/seatmap/overview",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/{feed_type}/{layout_type}/articles/{customer_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v4/discover/polls",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/dailypacks/{daily_pack_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/admin/dailypacks/{daily_pack_id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/api/v3/discover/feed",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/movies/feed/{type}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/payments/status/_update",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/products/{product_id}/seats/_offer",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/activities/{action}/{customer_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/weeklyreward",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/weeklyreward",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/invite/upload",
      "method": "POST"
    },
    {
      "endptRegex": "/api/v3/discover/onboard/articles",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/admin/articles/events",
      "method": "GET"
    },
    {
      "endptRegex": "/api/v3/discover/polls/{poll_id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/polls/{poll_id}/{hack1}/{hack2}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/api/v3/discover/sistic/user/_details",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357926"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357926"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebce"
  },
  "swaggerSpec": null,
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebcd"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357933"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357933"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebd0"
  },
  "swaggerSpec": {
    "info": {
      "version": "1.0",
      "contact": {},
      "description": "Service for handling Sphere related transactions.",
      "license": {},
      "title": "Circles-Sphere API"
    },
    "openapi": "3.0.1",
    "paths": {
      "/users/{user_id}/cards/{card_id}/pin": {
        "put": {
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "card_id",
              "in": "path",
              "name": "card_id"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.setCardPINResult"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              }
            }
          },
          "summary": "Set card pin"
        }
      },
      "/users/{user_id}/passports/{passport_id}/activate": {
        "put": {
          "description": "Response without any content.",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true
            },
            {
              "description": "487a76ad-466a-11ea-8a90-06a1e25e4e9c",
              "in": "path",
              "name": "passport_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "content": {}
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              }
            }
          },
          "summary": "Activate passport"
        }
      },
      "/orders/shipment": {
        "post": {
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/controller.orderUpdateRequest"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.orderShipmentUpdateRequest"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "provides shipment details"
        }
      },
      "/users/{user_id}/products/{product_id}/orders/validate": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.orderValidateResult"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Validate the user's order",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id"
            }
          ],
          "requestBody": {
            "description": "request body",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/service.OrderCreateRequest"
                }
              }
            }
          }
        }
      },
      "/users/{user_id}/products/{product_id}/orders": {
        "post": {
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/service.OrderCreateRequest"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.orderValidateResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Create order for the user.",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/orders/fulfilled": {
        "put": {
          "description": "{success: true/false, result: {}}",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/controller.orderUpdateRequest"
                }
              }
            },
            "description": "request body"
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.orderStatusUpdateResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Mark order as fulfilled",
          "x-codegen-request-body-name": "Body"
        }
      },
      "/users/{user_id}/cards/activate": {
        "put": {
          "summary": "Active's the card",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/controller.cardActivateRequest"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.cardActivateResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/users/{user_id}/action": {
        "post": {
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true
            }
          ],
          "requestBody": {
            "description": "conversion request",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/controller.actionRequest"
                }
              }
            }
          },
          "responses": {
            "202": {
              "content": {}
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              }
            }
          },
          "summary": "Perform user actions as specified (e.g. changing account PIN)"
        }
      },
      "/users/{user_id}/topups/{topup_id}": {
        "get": {
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "top-up-id",
              "in": "path",
              "name": "topup_id"
            },
            {
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.topupCreateResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Get top up",
          "description": "{success: true/false, result: {}}"
        }
      },
      "/users/{user_id}/cards/{card_id}/unlock": {
        "put": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.CardActionResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              }
            }
          },
          "summary": "Unlocks the Card",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "card_id",
              "in": "path",
              "name": "card_id"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true
            }
          ]
        }
      },
      "/users/{user_id}/cards/{card_id}/delete": {
        "put": {
          "summary": "Deletes the Card",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path"
            },
            {
              "description": "card_id",
              "in": "path",
              "name": "card_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.CardActionResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/users/{user_id}/cards/{card_id}/lock": {
        "put": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.CardActionResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Locks the Card",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "card_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "card_id"
            },
            {
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH"
            }
          ]
        }
      },
      "/users/{user_id}/products/{product_id}/validate": {
        "post": {
          "requestBody": {
            "description": "request body",
            "required": true,
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/service.OrderCreateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.orderValidateResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Validate the user",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      "/balance": {
        "delete": {
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "user phone number",
              "in": "query",
              "name": "userPhone"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CurrencyAmount"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.deleteWalletResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Debit card's balance",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}"
        }
      },
      "/users/{user_id}/products": {
        "get": {
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.productResult"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Bad Request"
            }
          },
          "summary": "Get Product Features given the Product ID(s)",
          "description": "{success: true/false, result: {}}"
        }
      },
      "/users/{user_id}/transactions/{txn_id}": {
        "get": {
          "summary": "Fetch transaction by transaction id",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "txn_id",
              "in": "path",
              "name": "txn_id"
            },
            {
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.TransactionDomain"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/users/{user_id}/validate": {
        "get": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.userValidateResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Check if the user is eligible for the card",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA"
            }
          ]
        }
      },
      "/transactions/reconcile": {
        "post": {
          "x-codegen-request-body-name": "Body",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "swagger_ref": "#/components/schemas/model.TransactionReconcileRequest"
                  },
                  "type": "array"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "202": {
              "content": {}
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Reconcile transactions and update/insert into DB."
        }
      },
      "/users/{user_id}/countries": {
        "get": {
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/response.PreferredCountries"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              }
            }
          },
          "summary": "Fetches preferred countries for the user"
        }
      },
      "/users/{user_id}/passports/latest": {
        "get": {
          "summary": "Passport dashboard",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.SuccessResult"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Bad Request"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/transactions": {
        "post": {
          "description": "{success: true/false, result: {}}",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.Transaction"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Creates transactions and saves to DB.",
          "x-codegen-request-body-name": "Body"
        }
      },
      "/users/{user_id}": {
        "delete": {
          "summary": "Deletes match move user.",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id"
            },
            {
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/controller.deleteRequest"
                }
              }
            },
            "description": "conversion request",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.deleteResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{user_id}/cards/{card_id}/cvv": {
        "get": {
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true
            },
            {
              "in": "path",
              "name": "card_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "card_id"
            },
            {
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.CvvResult"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Generates CVV for the card"
        }
      },
      "/users/{user_id}/home": {
        "get": {
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path"
            },
            {
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/service.RegisteredResult"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Builds user's dashboard"
        }
      },
      "/users/{user_id}/transactions": {
        "get": {
          "summary": "Fetches transactions for the user.",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.TransactionsData"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/debug-logs": {
        "post": {
          "description": "Dump debug data from app",
          "parameters": [
            {
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "OK"
            }
          },
          "summary": "Dump debug data from app"
        }
      },
      "/users/{user_id}/topups": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.topupCreateResult"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Top up the card!",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "in": "path",
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA"
            },
            {
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH"
            }
          ],
          "requestBody": {
            "description": "request body",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/request.TopupCreateRequest"
                }
              }
            }
          }
        }
      },
      "/topups/{topup_id}/status": {
        "post": {
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "name": "topup_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "top-up-id",
              "in": "path"
            },
            {
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/domain.PaasStatusRequest"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update top up status"
        }
      },
      "/forex-rates": {
        "put": {
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/service.ForexUpdateRequest"
                }
              }
            },
            "description": "request body",
            "required": true
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update Forex Rates for countries"
        }
      },
      "/orders/status": {
        "post": {
          "description": "{success: true/false, result: {}}",
          "requestBody": {
            "description": "request body",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/controller.orderUpdateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.orderStatusUpdateResponse"
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Update status of the order",
          "x-codegen-request-body-name": "Body"
        }
      },
      "/users/{user_id}/convert-currency": {
        "post": {
          "requestBody": {
            "description": "conversion request",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/controller.forexRateRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.forexRatesResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              }
            }
          },
          "summary": "Fetches the forex rate for a given base country and destination country",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path",
              "name": "user_id"
            },
            {
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH"
            }
          ]
        }
      },
      "/users/{user_id}/preferences": {
        "put": {
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/userservice.UserPreferencesResult"
                }
              }
            },
            "description": "conversion request"
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/controller.FailureResponse"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Updates user preferences",
          "x-codegen-request-body-name": "Body",
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "X-AUTH",
              "in": "header",
              "name": "X-AUTH",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "user_id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "SG-BTMOEJLEQTIA",
              "in": "path"
            }
          ]
        }
      }
    },
    "servers": [
      {
        "url": "http://localhost:3000/v1/sg/en/mobile/sphere"
      }
    ],
    "tags": null,
    "components": {
      "schemas": {
        "controller.deleteWalletResponse": {
          "type": "object",
          "properties": {
            "result": {
              "properties": {},
              "type": "object"
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "controller.cardActivateRequest": {
          "properties": {
            "activation_code": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "controller.productResult": {
          "type": "object",
          "properties": {
            "data": {
              "swagger_ref": "#/components/schemas/controller.productData"
            }
          }
        },
        "model.TransactionReconcileRequest": {
          "properties": {
            "pp_user_id": {
              "type": "string"
            },
            "date_settled": {
              "type": "string"
            },
            "merchant_id": {
              "type": "string"
            },
            "total_amount": {
              "type": "number"
            },
            "fee_currency": {
              "type": "string"
            },
            "txn_ref_id": {
              "type": "string"
            },
            "date_added": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "file_type": {
              "type": "string"
            },
            "base_currency_code": {
              "type": "string"
            },
            "transaction_currency": {
              "type": "string"
            },
            "fee_amount": {
              "type": "number"
            },
            "merchant_category_code": {
              "type": "integer"
            },
            "transaction_amount": {
              "type": "number"
            },
            "total_currency": {
              "type": "string"
            },
            "merchant_name": {
              "type": "string"
            },
            "base_currency_amount": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "controller.orderStatusUpdateResult": {
          "type": "object"
        },
        "controller.orderValidateResult": {
          "properties": {
            "validated": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "model.Address": {
          "properties": {
            "city": {
              "type": "string"
            },
            "country": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "service.address": {
          "type": "object",
          "properties": {
            "address_line_2": {
              "type": "string"
            },
            "block": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "floor": {
              "type": "string"
            },
            "unit": {
              "type": "string"
            },
            "zipcode": {
              "type": "string"
            },
            "address_line_1": {
              "description": "AddressLine1 string `json:\"address_line_1\" validate:\"max=35\"`\nAddressLine2 string `json:\"address_line_2\" validate:\"max=35\"`",
              "type": "string"
            }
          },
          "required": [
            "block",
            "country",
            "unit",
            "zipcode"
          ]
        },
        "model.CardDetail": {
          "properties": {
            "expiry": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "number": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "user_name": {
              "type": "string"
            },
            "banner_images": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.Image"
              }
            }
          },
          "type": "object"
        },
        "model.MerchantDomain": {
          "properties": {
            "category": {
              "type": "string"
            },
            "images": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Image"
              },
              "type": "array"
            },
            "name": {
              "type": "string"
            },
            "address": {
              "swagger_ref": "#/components/schemas/model.Address"
            }
          },
          "type": "object"
        },
        "model.ProductFeature": {
          "type": "object",
          "properties": {
            "images": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Image"
              },
              "type": "array"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "service.forex": {
          "properties": {
            "currency_code": {
              "type": "string"
            },
            "rate": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "controller.actionRequest": {
          "properties": {
            "operation": {
              "type": "string"
            },
            "resource": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "controller.forexRatesResponse": {
          "properties": {
            "success": {
              "type": "boolean"
            },
            "result": {
              "items": {
                "swagger_ref": "#/components/schemas/response.ExchangeRate"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.PaginationPrevNext": {
          "properties": {
            "elements": {
              "type": "integer"
            },
            "next": {
              "type": "string"
            },
            "prev": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "controller.SuccessResult": {
          "properties": {
            "result": {
              "type": "object",
              "properties": {}
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "service.registeredData": {
          "properties": {
            "user_preferences": {
              "swagger_ref": "#/components/schemas/userservice.UserPreferencesResponse"
            },
            "base_currency_account_balance": {
              "swagger_ref": "#/components/schemas/model.CurrencyAmount"
            },
            "cards": {
              "items": {
                "swagger_ref": "#/components/schemas/model.CardDetail"
              },
              "type": "array"
            },
            "forex_rate": {
              "swagger_ref": "#/components/schemas/model.ForexRate"
            },
            "net_savings": {
              "swagger_ref": "#/components/schemas/model.NetSavings"
            },
            "transactions_data": {
              "swagger_ref": "#/components/schemas/model.TransactionsData"
            }
          },
          "type": "object"
        },
        "controller.FailureResult": {
          "properties": {
            "code": {
              "example": 500,
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "errors": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "message": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "controller.topupCreateResult": {
          "properties": {
            "amount": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            },
            "email_id": {
              "description": "todo remove this once FE confirms",
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "service.OrderCreateRequest": {
          "type": "object",
          "properties": {
            "metadata": {
              "swagger_ref": "#/components/schemas/service.metadata"
            },
            "order_ref": {
              "type": "string"
            },
            "products": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "user": {
              "swagger_ref": "#/components/schemas/service.user"
            },
            "delivery_slot": {
              "swagger_ref": "#/components/schemas/service.deliverySlot"
            }
          },
          "required": [
            "delivery_slot",
            "metadata",
            "user"
          ]
        },
        "service.identity": {
          "properties": {
            "number": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "number"
          ],
          "type": "object"
        },
        "model.Merchant": {
          "type": "object",
          "properties": {
            "address": {
              "swagger_ref": "#/components/schemas/model.Address"
            },
            "categoryID": {
              "type": "integer"
            },
            "groupName": {
              "type": "string"
            },
            "images": {
              "items": {
                "swagger_ref": "#/components/schemas/model.Image"
              },
              "type": "array"
            },
            "name": {
              "type": "string"
            },
            "partnerCategoryCode": {
              "type": "string"
            }
          }
        },
        "controller.cardActivateResult": {
          "properties": {
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "controller.FailureResponse": {
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/controller.FailureResult"
            },
            "success": {
              "example": false,
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "userservice.UserPreferencesResult": {
          "properties": {
            "base_country_code": {
              "example": "SGP",
              "type": "string"
            },
            "destination_country_code": {
              "example": "IND",
              "type": "string"
            },
            "security_code": {
              "type": "string"
            },
            "security_method": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "controller.CardActionResult": {
          "properties": {
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "domain.PaasStatusResult": {
          "properties": {
            "status": {
              "type": "string"
            },
            "txn_id": {
              "type": "string"
            },
            "error_code": {
              "type": "integer"
            },
            "payment_reference_id": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "payment_reference_id",
            "reason",
            "status",
            "txn_id"
          ],
          "type": "object"
        },
        "service.RegisteredResult": {
          "properties": {
            "products": {
              "swagger_ref": "#/components/schemas/config.IMSConfig"
            },
            "registered": {
              "type": "boolean"
            },
            "account_status": {
              "type": "string"
            },
            "data": {
              "swagger_ref": "#/components/schemas/service.registeredData"
            },
            "metadata": {
              "swagger_ref": "#/components/schemas/service.metaData"
            },
            "product_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "controller.userValidateResult": {
          "properties": {
            "validated": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "controller.orderStatusUpdateResponse": {
          "properties": {
            "success": {
              "type": "boolean"
            },
            "result": {
              "swagger_ref": "#/components/schemas/controller.orderStatusUpdateResult"
            }
          },
          "type": "object"
        },
        "controller.deleteResponse": {
          "properties": {
            "result": {
              "properties": {},
              "type": "object"
            },
            "success": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "controller.forexRateRequest": {
          "properties": {
            "base_country_code": {
              "example": "SGP",
              "type": "string"
            },
            "destination_country_code": {
              "example": "IND",
              "type": "string"
            }
          },
          "type": "object"
        },
        "userservice.UserPreferencesResponse": {
          "properties": {
            "destination_country": {
              "swagger_ref": "#/components/schemas/model.Country"
            },
            "security_code": {
              "type": "string"
            },
            "security_method": {
              "type": "string"
            },
            "base_country": {
              "swagger_ref": "#/components/schemas/model.Country"
            }
          },
          "type": "object"
        },
        "config.IMSProduct": {
          "properties": {
            "id": {
              "type": "string"
            },
            "price": {
              "swagger_ref": "#/components/schemas/model.CurrencyAmount"
            }
          },
          "type": "object"
        },
        "model.NetSavings": {
          "properties": {
            "code": {
              "type": "string"
            },
            "display_code": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "model.TransactionDomain": {
          "properties": {
            "type": {
              "type": "string"
            },
            "amount": {
              "additionalProperties": {
                "swagger_ref": "#/components/schemas/model.CurrencyAmount"
              },
              "type": "object"
            },
            "id": {
              "type": "string"
            },
            "merchant": {
              "swagger_ref": "#/components/schemas/model.MerchantDomain"
            },
            "ref_no": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "time": {
              "type": "integer",
              "description": "UnixNano"
            }
          },
          "type": "object"
        },
        "domain.PaasStatusRequest": {
          "type": "object",
          "properties": {
            "result": {
              "swagger_ref": "#/components/schemas/domain.PaasStatusResult"
            },
            "success": {
              "type": "boolean"
            }
          },
          "required": [
            "result",
            "success"
          ]
        },
        "model.Country": {
          "properties": {
            "currency_display_code": {
              "type": "string"
            },
            "flag_images": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/model.Image"
              }
            },
            "name": {
              "type": "string"
            },
            "nationality": {
              "type": "string"
            },
            "code": {
              "description": "example: SGP, IND, USA etc",
              "type": "string"
            },
            "currency_code": {
              "type": "string"
            },
            "currency_code_i": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "service.metaData": {
          "properties": {
            "order_id": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "request.TopupCreateRequest": {
          "properties": {
            "amount": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "response.ExchangeRate": {
          "properties": {
            "display_code": {
              "example": "₹",
              "type": "string"
            },
            "value": {
              "example": 51.72,
              "type": "number"
            },
            "code": {
              "type": "string",
              "example": "INR"
            }
          },
          "type": "object"
        },
        "config.IMSConfig": {
          "type": "object",
          "properties": {
            "passport": {
              "swagger_ref": "#/components/schemas/config.IMSProduct"
            },
            "sphere": {
              "swagger_ref": "#/components/schemas/config.IMSProduct"
            }
          }
        },
        "model.TransactionsData": {
          "properties": {
            "paging": {
              "swagger_ref": "#/components/schemas/model.PaginationPrevNext"
            },
            "transactions": {
              "items": {
                "swagger_ref": "#/components/schemas/model.TransactionDomain"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "model.ForexRate": {
          "properties": {
            "base_currency": {
              "swagger_ref": "#/components/schemas/model.CurrencyAmount"
            },
            "destination_currency": {
              "swagger_ref": "#/components/schemas/model.CurrencyAmount"
            }
          },
          "type": "object"
        },
        "model.Image": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          }
        },
        "service.deliverySlot": {
          "type": "object",
          "properties": {
            "courier_slot_name": {
              "type": "string"
            },
            "delivery_date": {
              "type": "string"
            },
            "full_date_time": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            }
          },
          "required": [
            "courier_slot_name",
            "delivery_date",
            "full_date_time",
            "id"
          ]
        },
        "model.Transaction": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "time": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "merchant": {
              "swagger_ref": "#/components/schemas/model.Merchant"
            },
            "baseCurrencyAmount": {
              "type": "number"
            },
            "txnCurrencyCode": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "paymentRef": {
              "description": "top-up",
              "type": "string"
            },
            "txnCurrencyAmount": {
              "type": "number"
            },
            "description": {
              "type": "string"
            },
            "baseCurrencyCode": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "userID": {
              "type": "string"
            },
            "baseCurrencyAmountWithFees": {
              "type": "number"
            },
            "txnRefNo": {
              "type": "string"
            },
            "cardID": {
              "type": "string"
            }
          }
        },
        "controller.setCardPINResult": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        "controller.shipmentIdentifier": {
          "type": "object",
          "properties": {
            "identifiers": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sku": {
              "type": "string"
            }
          }
        },
        "response.Currencies": {
          "type": "object",
          "properties": {
            "all": {
              "additionalProperties": {
                "swagger_ref": "#/components/schemas/response.ExchangeRate"
              },
              "type": "object"
            },
            "base": {
              "swagger_ref": "#/components/schemas/response.ExchangeRate"
            }
          }
        },
        "controller.deleteRequest": {
          "properties": {
            "action": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "service.ForexUpdateRequest": {
          "properties": {
            "base_country_code": {
              "type": "string"
            },
            "forex_rates": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/service.forex"
              }
            }
          },
          "type": "object"
        },
        "model.CurrencyAmount": {
          "properties": {
            "code": {
              "type": "string",
              "description": "example: SGD, IDR, USD etc"
            },
            "display_code": {
              "type": "string"
            },
            "value": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "response.PreferredCountries": {
          "properties": {
            "base_countries": {
              "additionalProperties": {
                "swagger_ref": "#/components/schemas/m.Country"
              },
              "type": "object"
            },
            "currencies": {
              "swagger_ref": "#/components/schemas/response.Currencies"
            },
            "top_countries": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "all_countries": {
              "type": "object",
              "additionalProperties": {
                "swagger_ref": "#/components/schemas/m.Country"
              }
            }
          },
          "type": "object"
        },
        "controller.orderUpdateRequest": {
          "properties": {
            "shipment_identifiers": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/controller.shipmentIdentifier"
              }
            },
            "status": {
              "type": "string"
            },
            "order_ref": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "service.user": {
          "required": [
            "address",
            "dob",
            "identity",
            "name",
            "nationality",
            "phone_number",
            "preferred_name"
          ],
          "type": "object",
          "properties": {
            "preferred_name": {
              "type": "string"
            },
            "address": {
              "swagger_ref": "#/components/schemas/service.address"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "identity": {
              "swagger_ref": "#/components/schemas/service.identity"
            },
            "name": {
              "type": "string"
            },
            "nationality": {
              "type": "string"
            },
            "phone_number": {
              "type": "string"
            }
          }
        },
        "controller.CvvResult": {
          "properties": {
            "cvv": {
              "type": "string"
            },
            "expires_in_seconds": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "service.metadata": {
          "required": [
            "kyc_acknowledged",
            "mobile_country_code"
          ],
          "type": "object",
          "properties": {
            "mobile_country_code": {
              "type": "string"
            },
            "verified_email": {
              "type": "string"
            },
            "gender": {
              "type": "string"
            },
            "kyc_acknowledged": {
              "type": "boolean"
            }
          }
        },
        "controller.productData": {
          "type": "object",
          "properties": {
            "product_features": {
              "items": {
                "swagger_ref": "#/components/schemas/model.ProductFeature"
              },
              "type": "array"
            }
          }
        },
        "controller.orderShipmentUpdateRequest": {
          "properties": {
            "order_ref": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebcf"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/users/{user_id}/cards/{card_id}/pin",
      "method": "PATCH"
    },
    {
      "endptRegex": "/topups/{topup_id}/status",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/cards/activate",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/countries",
      "method": "GET"
    },
    {
      "endptRegex": "/orders/shipment",
      "method": "POST"
    },
    {
      "endptRegex": "/transactions",
      "method": "POST"
    },
    {
      "endptRegex": "/transactions/reconcile",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/cards/{card_id}/cvv",
      "method": "GET"
    },
    {
      "endptRegex": "/users/{user_id}/cards/{card_id}/unlock",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/cards/{card_id}/delete",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/products/{product_id}/validate",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/topups",
      "method": "POST"
    },
    {
      "endptRegex": "/debug-logs",
      "method": "POST"
    },
    {
      "endptRegex": "/orders/fulfilled",
      "method": "PATCH"
    },
    {
      "endptRegex": "/orders/status",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/convert-currency",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/home",
      "method": "GET"
    },
    {
      "endptRegex": "/users/{user_id}/topups/{topup_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/users/{user_id}/passports/latest",
      "method": "GET"
    },
    {
      "endptRegex": "/users/{user_id}/products/{product_id}/orders",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/products/{product_id}/orders/validate",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/validate",
      "method": "GET"
    },
    {
      "endptRegex": "/forex-rates",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/action",
      "method": "POST"
    },
    {
      "endptRegex": "/users/{user_id}/transactions",
      "method": "GET"
    },
    {
      "endptRegex": "/users/{user_id}/transactions/{txn_id}",
      "method": "GET"
    },
    {
      "endptRegex": "/balance",
      "method": "DELETE"
    },
    {
      "endptRegex": "/users/{user_id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/users/{user_id}/cards/{card_id}/lock",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/passports/{passport_id}/activate",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/preferences",
      "method": "PATCH"
    },
    {
      "endptRegex": "/users/{user_id}/products",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357935"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357935"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebd2"
  },
  "swaggerSpec": {
    "tags": [
      {
        "name": "customer"
      },
      {
        "name": "notification listeners (client side)"
      },
      {
        "name": "events subscription"
      }
    ],
    "components": {
      "schemas": {
        "Any": {
          "type": "object"
        },
        "ContactMedium": {
          "type": "object",
          "description": "Indicates the contact medium that could be used to contact the party.",
          "properties": {
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "characteristic": {
              "swagger_ref": "#/components/schemas/MediumCharacteristic"
            },
            "mediumType": {
              "type": "string",
              "description": "Type of the contact medium, such as: email address, telephone number, postal address"
            },
            "preferred": {
              "description": "If true, indicates that is the preferred contact medium",
              "type": "boolean"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            }
          },
          "required": [
            "characteristic",
            "mediumType"
          ]
        },
        "CustomerDeleteEvent": {
          "properties": {
            "event": {
              "swagger_ref": "#/components/schemas/CustomerDeleteEventPayload"
            },
            "href": {
              "description": "Reference of the resource involved in the event",
              "type": "string"
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "timeOcurred": {
              "format": "date-time",
              "type": "string",
              "description": "The time the event occured."
            },
            "id": {
              "description": "Identifier of the resource involved in the event",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            },
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "description": {
              "description": "An explanatory of the event.",
              "type": "string"
            },
            "eventTime": {
              "description": "Time of the event occurrence.",
              "format": "date-time",
              "type": "string"
            },
            "correlationId": {
              "type": "string",
              "description": "The correlation id for this event."
            }
          },
          "type": "object",
          "description": "The notification data structure"
        },
        "CustomerCreateEventPayload": {
          "type": "object",
          "description": "The event data structure",
          "properties": {
            "customer": {
              "swagger_ref": "#/components/schemas/Customer"
            }
          }
        },
        "EntityRef": {
          "description": "Entity reference schema to be use for all entityRef class.",
          "properties": {
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "Reference of the related entity.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        "MediumCharacteristic": {
          "type": "object",
          "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
          "properties": {
            "city": {
              "description": "The city",
              "type": "string"
            },
            "emailAddress": {
              "description": "Full email address in standard format",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "contactType": {
              "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation…",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "phoneNumber": {
              "description": "The primary phone number of the contact",
              "type": "string"
            },
            "postCode": {
              "type": "string",
              "description": "Postcode"
            },
            "stateOrProvince": {
              "description": "State or province",
              "type": "string"
            },
            "street1": {
              "description": "Describes the street",
              "type": "string"
            },
            "street2": {
              "description": "Complementary street description",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "socialNetworkId": {
              "description": "Identifier as a member of a social network",
              "type": "string"
            },
            "faxNumber": {
              "description": "The fax number of the contact",
              "type": "string"
            },
            "country": {
              "description": "The country",
              "type": "string"
            }
          }
        },
        "Characteristic": {
          "description": "Describes a given characteristic of an object or entity through a name/value pair.",
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "name": {
              "description": "Name of the characteristic",
              "type": "string"
            },
            "value": {
              "swagger_ref": "#/components/schemas/Any"
            },
            "valueType": {
              "description": "Data type of the value of the characteristic",
              "type": "string"
            }
          },
          "required": [
            "name",
            "value"
          ],
          "type": "object"
        },
        "Error": {
          "required": [
            "code",
            "reason"
          ],
          "type": "object",
          "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
          "properties": {
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name.",
              "type": "string"
            },
            "code": {
              "description": "Application relevant detail, defined in the API or a common list.",
              "type": "string"
            },
            "message": {
              "description": "More details and corrective actions related to the error which can be shown to a client user.",
              "type": "string"
            },
            "reason": {
              "type": "string",
              "description": "Explanation of the reason for the error which can be shown to a client user."
            },
            "referenceError": {
              "description": "URI of documentation describing the error.",
              "format": "uri",
              "type": "string"
            },
            "status": {
              "description": "HTTP Error code extension",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class.",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            }
          }
        },
        "Customer_Create": {
          "properties": {
            "engagedParty": {
              "swagger_ref": "#/components/schemas/RelatedParty"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "creditProfile": {
              "items": {
                "swagger_ref": "#/components/schemas/CreditProfile"
              },
              "type": "array"
            },
            "paymentMethod": {
              "items": {
                "swagger_ref": "#/components/schemas/PaymentMethodRef"
              },
              "type": "array"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "agreement": {
              "items": {
                "swagger_ref": "#/components/schemas/AgreementRef"
              },
              "type": "array"
            },
            "account": {
              "items": {
                "swagger_ref": "#/components/schemas/AccountRef"
              },
              "type": "array"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "relatedParty": {
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              },
              "type": "array"
            },
            "status": {
              "type": "string",
              "description": "Used to track the lifecycle status of the customer."
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "statusReason": {
              "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
              "type": "string"
            },
            "characteristic": {
              "description": "Describes the characteristic of a customer.",
              "items": {
                "swagger_ref": "#/components/schemas/Characteristic"
              },
              "type": "array"
            },
            "name": {
              "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
              "type": "string"
            },
            "contactMedium": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/ContactMedium"
              }
            }
          },
          "required": [
            "engagedParty",
            "name"
          ],
          "type": "object",
          "description": "\nSkipped properties: id,href"
        },
        "AgreementRef": {
          "properties": {
            "name": {
              "description": "Name of the agreement",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "Reference of the related entity.",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of a related entity.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications."
        },
        "EventSubscriptionInput": {
          "type": "object",
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
          "properties": {
            "callback": {
              "description": "The callback being registered.",
              "type": "string"
            },
            "query": {
              "description": "additional data to be passed",
              "type": "string"
            }
          },
          "required": [
            "callback"
          ]
        },
        "CreditProfile": {
          "description": "Credit profile for the party (containing credit scoring, ...). By default only the current credit profile  is retrieved. It can be used as a list to give the party credit profiles history, the first one in the list will be the current one.",
          "properties": {
            "creditProfileDate": {
              "format": "date-time",
              "type": "string",
              "description": "The date the profile was established"
            },
            "creditRiskRating": {
              "description": "This is an integer whose value is used to rate the risk",
              "type": "integer"
            },
            "creditScore": {
              "description": "A measure of a person or organizations creditworthiness calculated on the basis of a combination of factors such as their income and credit history",
              "type": "integer"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            }
          },
          "required": [
            "creditProfileDate",
            "validFor"
          ],
          "type": "object"
        },
        "CustomerStateChangeEventPayload": {
          "type": "object",
          "description": "The event data structure",
          "properties": {
            "customer": {
              "swagger_ref": "#/components/schemas/Customer"
            }
          }
        },
        "Customer": {
          "type": "object",
          "properties": {
            "account": {
              "items": {
                "swagger_ref": "#/components/schemas/AccountRef"
              },
              "type": "array"
            },
            "characteristic": {
              "description": "Describes the characteristic of a customer.",
              "items": {
                "swagger_ref": "#/components/schemas/Characteristic"
              },
              "type": "array"
            },
            "creditProfile": {
              "items": {
                "swagger_ref": "#/components/schemas/CreditProfile"
              },
              "type": "array"
            },
            "id": {
              "description": "Unique identifier for Customers",
              "type": "string"
            },
            "status": {
              "description": "Used to track the lifecycle status of the customer.",
              "type": "string"
            },
            "href": {
              "description": "Url used to reference the customer.",
              "type": "string"
            },
            "name": {
              "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
              "type": "string"
            },
            "statusReason": {
              "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
              "type": "string"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            },
            "engagedParty": {
              "swagger_ref": "#/components/schemas/RelatedParty"
            },
            "agreement": {
              "items": {
                "swagger_ref": "#/components/schemas/AgreementRef"
              },
              "type": "array"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "contactMedium": {
              "items": {
                "swagger_ref": "#/components/schemas/ContactMedium"
              },
              "type": "array"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "paymentMethod": {
              "items": {
                "swagger_ref": "#/components/schemas/PaymentMethodRef"
              },
              "type": "array"
            },
            "relatedParty": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              }
            }
          },
          "required": [
            "engagedParty"
          ]
        },
        "PaymentMethodRef": {
          "properties": {
            "id": {
              "description": "Unique identifier of the payment mean",
              "type": "string"
            },
            "name": {
              "description": "Name of the payment mean",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "type": "string",
              "description": "Reference of the payment mean"
            }
          },
          "required": [
            "id"
          ],
          "type": "object",
          "description": "PaymentMethod reference. A payment method defines a specific mean of payment (e.g direct debit)."
        },
        "AccountRef": {
          "type": "object",
          "description": "Account reference. A account may be a party account or a financial account.",
          "properties": {
            "description": {
              "description": "Detailed description of the account",
              "type": "string"
            },
            "href": {
              "description": "Reference of the account",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of the account",
              "type": "string"
            },
            "name": {
              "description": "Name of the account",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class entity name"
            }
          },
          "required": [
            "name"
          ]
        },
        "CustomerDeleteEventPayload": {
          "description": "The event data structure",
          "properties": {
            "customer": {
              "swagger_ref": "#/components/schemas/Customer"
            }
          },
          "type": "object"
        },
        "Customer_Update": {
          "type": "object",
          "description": "\nSkipped properties: id,href",
          "properties": {
            "name": {
              "description": "A word, term, or phrase by which the Customer is known and distinguished from other Customers.",
              "type": "string"
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "engagedParty": {
              "swagger_ref": "#/components/schemas/RelatedParty"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "account": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/AccountRef"
              }
            },
            "statusReason": {
              "description": "A string providing an explanation on the value of the status lifecycle. For instance if the status is Rejected, statusReason will provide the reason for rejection.",
              "type": "string"
            },
            "agreement": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/AgreementRef"
              }
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "contactMedium": {
              "items": {
                "swagger_ref": "#/components/schemas/ContactMedium"
              },
              "type": "array"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "creditProfile": {
              "items": {
                "swagger_ref": "#/components/schemas/CreditProfile"
              },
              "type": "array"
            },
            "characteristic": {
              "description": "Describes the characteristic of a customer.",
              "items": {
                "swagger_ref": "#/components/schemas/Characteristic"
              },
              "type": "array"
            },
            "status": {
              "description": "Used to track the lifecycle status of the customer.",
              "type": "string"
            },
            "relatedParty": {
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              },
              "type": "array"
            },
            "paymentMethod": {
              "items": {
                "swagger_ref": "#/components/schemas/PaymentMethodRef"
              },
              "type": "array"
            }
          },
          "required": [
            "engagedParty"
          ]
        },
        "EventSubscription": {
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
          "properties": {
            "callback": {
              "description": "The callback being registered.",
              "type": "string"
            },
            "id": {
              "description": "Id of the listener",
              "type": "string"
            },
            "query": {
              "description": "additional data to be passed",
              "type": "string"
            }
          },
          "required": [
            "callback",
            "id"
          ],
          "type": "object"
        },
        "CustomerCreateEvent": {
          "description": "The notification data structure",
          "properties": {
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "eventTime": {
              "description": "Time of the event occurrence.",
              "format": "date-time",
              "type": "string"
            },
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            },
            "id": {
              "description": "Identifier of the resource involved in the event",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "timeOcurred": {
              "format": "date-time",
              "type": "string",
              "description": "The time the event occured."
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/CustomerCreateEventPayload"
            },
            "href": {
              "description": "Reference of the resource involved in the event",
              "type": "string"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "description": {
              "description": "An explanatory of the event.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "CustomerAttributeValueChangeEvent": {
          "description": "The notification data structure",
          "properties": {
            "timeOcurred": {
              "type": "string",
              "description": "The time the event occured.",
              "format": "date-time"
            },
            "eventTime": {
              "description": "Time of the event occurrence.",
              "format": "date-time",
              "type": "string"
            },
            "priority": {
              "type": "string",
              "description": "A priority."
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "description": {
              "type": "string",
              "description": "An explanatory of the event."
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            },
            "event": {
              "swagger_ref": "#/components/schemas/CustomerAttributeValueChangeEventPayload"
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "fieldPath": {
              "type": "string",
              "description": "The path identifying the object field concerned by this notification."
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "CustomerAttributeValueChangeEventPayload": {
          "description": "The event data structure",
          "properties": {
            "customer": {
              "swagger_ref": "#/components/schemas/Customer"
            }
          },
          "type": "object"
        },
        "TimePeriod": {
          "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
          "properties": {
            "endDateTime": {
              "format": "date-time",
              "type": "string",
              "description": "End of the time period, using IETC-RFC-3339 format"
            },
            "startDateTime": {
              "type": "string",
              "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end",
              "format": "date-time"
            }
          },
          "type": "object"
        },
        "RelatedParty": {
          "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
          "properties": {
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name",
              "type": "string"
            },
            "href": {
              "description": "Reference of the related entity.",
              "type": "string"
            },
            "id": {
              "type": "string",
              "description": "Unique identifier of a related entity."
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "role": {
              "type": "string",
              "description": "Role played by the related party"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            }
          },
          "required": [
            "@referredType",
            "id"
          ],
          "type": "object"
        },
        "CustomerStateChangeEvent": {
          "type": "object",
          "description": "The notification data structure",
          "properties": {
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            },
            "eventTime": {
              "description": "Time of the event occurrence.",
              "format": "date-time",
              "type": "string"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "title": {
              "type": "string",
              "description": "The title of the event."
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "href": {
              "description": "Reference of the resource involved in the event",
              "type": "string"
            },
            "timeOcurred": {
              "description": "The time the event occured.",
              "format": "date-time",
              "type": "string"
            },
            "description": {
              "type": "string",
              "description": "An explanatory of the event."
            },
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/CustomerStateChangeEventPayload"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the resource involved in the event"
            }
          }
        }
      }
    },
    "info": {
      "version": "4.0",
      "description": "This is Swagger UI environment generated for the TMF Customer Management specification",
      "title": "TMF629-Customer Management"
    },
    "openapi": "3.0.1",
    "paths": {
      "/listener/customerAttributeValueChangeEvent": {
        "post": {
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification CustomerAttributeValueChangeEvent",
          "operationId": "listenToCustomerAttributeValueChangeEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/CustomerAttributeValueChangeEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity CustomerAttributeValueChangeEvent"
        }
      },
      "/listener/customerCreateEvent": {
        "post": {
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "summary": "Client listener for entity CustomerCreateEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification CustomerCreateEvent",
          "operationId": "listenToCustomerCreateEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/CustomerCreateEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          }
        }
      },
      "/listener/customerDeleteEvent": {
        "post": {
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification CustomerDeleteEvent",
          "operationId": "listenToCustomerDeleteEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/CustomerDeleteEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "summary": "Client listener for entity CustomerDeleteEvent"
        }
      },
      "/listener/customerStateChangeEvent": {
        "post": {
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity CustomerStateChangeEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification CustomerStateChangeEvent",
          "operationId": "listenToCustomerStateChangeEvent",
          "requestBody": {
            "required": true,
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/CustomerStateChangeEvent"
                }
              }
            },
            "description": "The event data"
          }
        }
      },
      "/customer": {
        "get": {
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Comma-separated properties to be provided in response",
              "in": "query",
              "name": "fields"
            },
            {
              "name": "offset",
              "schema": {
                "type": "integer"
              },
              "description": "Requested index for start of resources to be provided in response",
              "in": "query"
            },
            {
              "name": "limit",
              "schema": {
                "type": "integer"
              },
              "description": "Requested number of resources to be provided in response",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "headers": {
                "X-Result-Count": {
                  "schema": {
                    "type": "integer"
                  },
                  "description": "Actual number of items returned in the response body"
                },
                "X-Total-Count": {
                  "description": "Total number of items matching criteria",
                  "schema": {
                    "type": "integer"
                  }
                }
              },
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/Customer"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "List or find Customer objects",
          "tags": [
            "customer"
          ],
          "description": "This operation list or find Customer entities",
          "operationId": "listCustomer"
        },
        "post": {
          "description": "This operation creates a Customer entity.",
          "operationId": "createCustomer",
          "requestBody": {
            "description": "The Customer to be created",
            "required": true,
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/Customer_Create"
                }
              }
            }
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Customer"
                  }
                }
              },
              "description": "Created"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Creates a Customer",
          "tags": [
            "customer"
          ],
          "x-codegen-request-body-name": "customer"
        }
      },
      "/customer/{id}": {
        "delete": {
          "description": "This operation deletes a Customer entity.",
          "operationId": "deleteCustomer",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the Customer"
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Deletes a Customer",
          "tags": [
            "customer"
          ]
        },
        "get": {
          "description": "This operation retrieves a Customer entity. Attribute selection is enabled for all first level attributes.",
          "operationId": "retrieveCustomer",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the Customer",
              "in": "path",
              "name": "id",
              "required": true
            },
            {
              "description": "Comma-separated properties to provide in response",
              "in": "query",
              "name": "fields",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Customer"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Retrieves a Customer by ID",
          "tags": [
            "customer"
          ]
        },
        "patch": {
          "operationId": "patchCustomer",
          "parameters": [
            {
              "description": "Identifier of the Customer",
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/Customer_Update"
                }
              }
            },
            "description": "The Customer to be updated",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Customer"
                  }
                }
              },
              "description": "Updated"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "description": "Method Not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Updates partially a Customer",
          "tags": [
            "customer"
          ],
          "x-codegen-request-body-name": "customer",
          "description": "This operation updates partially a Customer entity."
        }
      },
      "/hub": {
        "post": {
          "tags": [
            "events subscription"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
          "operationId": "registerListener",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/EventSubscriptionInput"
                }
              }
            },
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Subscribed"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Register a listener"
        }
      },
      "/hub/{id}": {
        "delete": {
          "summary": "Unregister a listener",
          "tags": [
            "events subscription"
          ],
          "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
          "operationId": "unregisterListener",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The id of the registered listener"
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "405": {
              "description": "Method not allowed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      }
    },
    "servers": [
      {
        "url": "https://http://localhost:3000/tmf-api/customerManagement/v4"
      }
    ]
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebd1"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/customer/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/customer/{id}",
      "method": "PATCH"
    },
    {
      "endptRegex": "/customer/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/hub",
      "method": "POST"
    },
    {
      "endptRegex": "/hub/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/listener/customerAttributeValueChangeEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/customerCreateEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/customerDeleteEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/customerStateChangeEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/customer",
      "method": "GET"
    },
    {
      "endptRegex": "/customer",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357937"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357937"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebd4"
  },
  "swaggerSpec": null,
  "version": "2021/10/14",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebd3"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357941"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357941"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebd6"
  },
  "swaggerSpec": null,
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebd5"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357942"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357942"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebd8"
  },
  "swaggerSpec": {
    "components": {
      "schemas": {
        "responses.Address": {
          "properties": {
            "unit": {
              "type": "string"
            },
            "zipcode": {
              "type": "string"
            },
            "address_line_1": {
              "type": "string"
            },
            "address_line_2": {
              "type": "string"
            },
            "block": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "floor": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "responses.PlaceOrderResponse": {
          "properties": {
            "order_id": {
              "type": "string"
            },
            "order_ref": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "sqlnullable.NullString": {
          "type": "object"
        },
        "responses.DeliverySlot": {
          "type": "object",
          "properties": {
            "cost": {
              "type": "number"
            },
            "courier_slot_name": {
              "type": "string"
            },
            "display_text": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "full_date_time": {
              "type": "string"
            },
            "special": {
              "type": "boolean"
            },
            "delivery_date": {
              "type": "string"
            },
            "display_time": {
              "type": "string"
            }
          }
        },
        "requests.InitiateCheckout": {
          "items": {
            "properties": {
              "quantity": {
                "type": "integer"
              },
              "product_code": {
                "type": "string"
              }
            },
            "required": [
              "product_code"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "requests.Identity": {
          "properties": {
            "number": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "required": [
            "number",
            "type"
          ],
          "type": "object"
        },
        "responses.Ping": {
          "properties": {
            "environment": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "requests.Checkout": {
          "properties": {
            "product_code": {
              "type": "string"
            },
            "quantity": {
              "type": "integer"
            }
          },
          "required": [
            "product_code"
          ],
          "type": "object"
        },
        "responses.OrderFormDetailResponse": {
          "type": "object",
          "properties": {
            "user": {
              "swagger_ref": "#/components/schemas/responses.UserDetail"
            },
            "delivery_slots": {
              "items": {
                "swagger_ref": "#/components/schemas/responses.DeliverySlot"
              },
              "type": "array"
            }
          }
        },
        "requests.UserAttr": {
          "properties": {
            "name": {
              "type": "string"
            },
            "nationality": {
              "type": "string"
            },
            "phone_number": {
              "type": "string"
            },
            "preferred_name": {
              "description": "optional",
              "type": "string"
            },
            "address": {
              "swagger_ref": "#/components/schemas/requests.Address"
            },
            "dob": {
              "description": "YYYY-MM-DD",
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "identity": {
              "swagger_ref": "#/components/schemas/requests.Identity"
            }
          },
          "required": [
            "dob",
            "email",
            "name",
            "nationality",
            "phone_number"
          ],
          "type": "object"
        },
        "responses.Identity": {
          "properties": {
            "number": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "apperror.AppError": {
          "properties": {
            "code": {
              "type": "integer"
            },
            "err": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "message": {
              "type": "string"
            },
            "time": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "requests.DeliverySlotAttr": {
          "required": [
            "courier_slot_name",
            "delivery_date",
            "full_date_time",
            "id"
          ],
          "type": "object",
          "properties": {
            "full_date_time": {
              "type": "string"
            },
            "id": {
              "type": "integer"
            },
            "courier_slot_name": {
              "type": "string"
            },
            "delivery_date": {
              "type": "string"
            }
          }
        },
        "responses.Checkout": {
          "type": "object",
          "properties": {
            "cart_id": {
              "type": "string"
            }
          }
        },
        "responses.UserDetail": {
          "properties": {
            "phone_number": {
              "type": "string"
            },
            "address": {
              "swagger_ref": "#/components/schemas/responses.Address"
            },
            "dob": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "identity": {
              "swagger_ref": "#/components/schemas/responses.Identity"
            },
            "name": {
              "type": "string"
            },
            "nationality": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "requests.PlaceOrderRequest": {
          "properties": {
            "delivery_slot": {
              "swagger_ref": "#/components/schemas/requests.DeliverySlotAttr"
            },
            "metadata": {
              "properties": {},
              "type": "object"
            },
            "user": {
              "swagger_ref": "#/components/schemas/requests.UserAttr"
            }
          },
          "type": "object"
        },
        "responses.Country": {
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "alpha_2_code": {
              "type": "string"
            },
            "alpha_3_code": {
              "type": "string"
            },
            "alpha_3_currency_code": {
              "swagger_ref": "#/components/schemas/sqlnullable.NullString"
            }
          },
          "type": "object"
        },
        "requests.Address": {
          "required": [
            "address_line_1",
            "block",
            "zipcode"
          ],
          "type": "object",
          "properties": {
            "zipcode": {
              "type": "string"
            },
            "address_line_1": {
              "type": "string"
            },
            "address_line_2": {
              "description": "optional",
              "type": "string"
            },
            "block": {
              "type": "string"
            },
            "country": {
              "description": "optional",
              "type": "string"
            },
            "floor": {
              "description": "optional",
              "type": "string"
            },
            "unit": {
              "description": "optional",
              "type": "string"
            }
          }
        }
      }
    },
    "info": {
      "version": "{{.Version}}",
      "contact": {},
      "description": "A system which manages all orders",
      "license": {},
      "title": "Shop"
    },
    "openapi": "3.0.1",
    "paths": {
      "/checkout": {
        "post": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.Checkout"
                  }
                }
              }
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/apperror.AppError"
                  }
                }
              },
              "description": "Unprocessable Entity"
            }
          },
          "summary": "InitiateCheckout is called on initiating the checkout before order placement",
          "x-codegen-request-body-name": "checkout",
          "description": "{success: true/false, result: {}}\nAny Error http status will also be 200",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/requests.InitiateCheckout"
                }
              }
            },
            "description": "Initiate Checkout",
            "required": true
          }
        }
      },
      "/countries": {
        "get": {
          "summary": "ListAction is called to fetch all countries list based on priority",
          "description": "{success: true/false, result: {}}\nAny Error http status will also be 200",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.Country"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/apperror.AppError"
                  }
                }
              }
            }
          }
        }
      },
      "/orders": {
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.PlaceOrderResponse"
                  }
                }
              },
              "description": "OK"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/apperror.AppError"
                  }
                }
              },
              "description": "Unprocessable Entity"
            }
          },
          "summary": "PlaceOrderAction will validate and initates order creation",
          "x-codegen-request-body-name": "order",
          "description": "validates form data\nlock/consume inventory\n{success: true/false, result: {}}\nAny Error http status will also be 200",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/requests.PlaceOrderRequest"
                }
              }
            },
            "description": "Place Order"
          }
        }
      },
      "/orders/prehook": {
        "get": {
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.OrderFormDetailResponse"
                  }
                }
              }
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/apperror.AppError"
                  }
                }
              },
              "description": "Unprocessable Entity"
            }
          },
          "summary": "PrecheckAction will validate all the checks before order placement",
          "description": "**PATCH - for sphere it will return the order form details in response\n{success: true/false, result: {}}\nAny Error http status will also be 200"
        }
      },
      "/ping": {
        "get": {
          "summary": "Ping is a basic health check for ELB",
          "description": "{success: true/false, result: {}}",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/responses.Ping"
                  }
                }
              },
              "description": "OK"
            }
          }
        }
      }
    },
    "servers": [
      {
        "url": "http://localhost:3000{{.BasePath}}"
      }
    ],
    "tags": null
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebd7"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/ping",
      "method": "GET"
    },
    {
      "endptRegex": "/checkout",
      "method": "POST"
    },
    {
      "endptRegex": "/countries",
      "method": "GET"
    },
    {
      "endptRegex": "/orders",
      "method": "POST"
    },
    {
      "endptRegex": "/orders/prehook",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357943"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357943"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebda"
  },
  "swaggerSpec": {
    "components": {
      "responses": {
        "getCustomerInvoicesResponse": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "swagger_ref": "#/components/schemas/invoice"
                },
                "type": "array"
              }
            }
          },
          "description": ""
        }
      },
      "schemas": {
        "ObjectId": {
          "description": "http://www.mongodb.org/display/DOCS/Object+IDs",
          "title": "ObjectId is a unique ID identifying a BSON value. It must be exactly 12 bytes\nlong. MongoDB objects by default have such a property set in their \"_id\"\nproperty.",
          "type": "string",
          "x-go-package": "gopkg.in/mgo.v2/bson"
        },
        "invoiceUsageDetail": {
          "type": "object",
          "x-go-name": "InvoiceUsageDetail",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "Invoice's usage detail",
          "properties": {
            "amount": {
              "swagger_ref": "#/components/schemas/invoiceUsageDetailAmount"
            },
            "dateFrom": {
              "description": "Start date of usage",
              "type": "string",
              "x-go-name": "DateFrom"
            },
            "dateTo": {
              "description": "End date of usage",
              "type": "string",
              "x-go-name": "DateTo"
            },
            "serviceType": {
              "description": "Service Type",
              "type": "string",
              "x-go-name": "ServiceType"
            },
            "used": {
              "format": "double",
              "type": "number",
              "x-go-name": "Used",
              "description": "Used data in GB"
            }
          },
          "required": [
            "amount",
            "dateFrom",
            "dateTo",
            "serviceType",
            "used"
          ]
        },
        "invoiceMonthlySubscription": {
          "required": [
            "amount",
            "dateFrom",
            "dateTo",
            "remark"
          ],
          "type": "object",
          "x-go-name": "InvoiceMonthlySubscription",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "An invoice's monthly subscription",
          "properties": {
            "amount": {
              "x-go-name": "Amount",
              "description": "The monthly subscriptipn amount payable",
              "format": "double",
              "type": "number"
            },
            "dateFrom": {
              "x-go-name": "DateFrom",
              "description": "The start date of the subscription",
              "type": "string"
            },
            "dateTo": {
              "x-go-name": "DateTo",
              "description": "The end date of the subscription",
              "type": "string"
            },
            "remark": {
              "description": "The remarks of the adjustment",
              "type": "string",
              "x-go-name": "Remark"
            }
          }
        },
        "invoiceUsage": {
          "required": [
            "local"
          ],
          "type": "object",
          "x-go-name": "InvoiceUsage",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "Invoice's usages",
          "properties": {
            "local": {
              "items": {
                "swagger_ref": "#/components/schemas/invoiceUsageDetail"
              },
              "type": "array",
              "x-go-name": "Local",
              "description": "Invoice Local Usage"
            }
          }
        },
        "invoiceUsageDetailAmount": {
          "description": "Invoice's usage detail amount",
          "properties": {
            "afterTax": {
              "description": "Amount including tax",
              "format": "double",
              "type": "number",
              "x-go-name": "AfterTax"
            },
            "base": {
              "description": "Base amount before tax",
              "format": "double",
              "type": "number",
              "x-go-name": "Base"
            },
            "taxed": {
              "description": "Amount taxed",
              "format": "double",
              "type": "number",
              "x-go-name": "Taxed"
            }
          },
          "required": [
            "afterTax",
            "base",
            "taxed"
          ],
          "type": "object",
          "x-go-name": "InvoiceUsageDetailAmount",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models"
        },
        "invoice": {
          "properties": {
            "customer": {
              "swagger_ref": "#/components/schemas/invoiceCustomer"
            },
            "meta": {
              "swagger_ref": "#/components/schemas/invoiceMeta"
            },
            "monthlySubscriptions": {
              "x-go-name": "MonthlySubscriptions",
              "description": "The invoice's monthly subscriptions",
              "items": {
                "swagger_ref": "#/components/schemas/invoiceMonthlySubscription"
              },
              "type": "array"
            },
            "summary": {
              "swagger_ref": "#/components/schemas/invoiceSummary"
            },
            "usages": {
              "swagger_ref": "#/components/schemas/invoiceUsage"
            },
            "adjustments": {
              "items": {
                "swagger_ref": "#/components/schemas/invoiceAdjustment"
              },
              "type": "array",
              "x-go-name": "Adjustments",
              "description": "The invoice's adjustments"
            }
          },
          "required": [
            "adjustments",
            "customer",
            "meta",
            "monthlySubscriptions",
            "summary",
            "usages"
          ],
          "type": "object",
          "x-go-name": "Invoice",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "A customer's invoice represents the bill for a month's worth of usage (start to end of month)"
        },
        "invoiceAdjustment": {
          "description": "An invoice's adjustments (e.g. promo code)",
          "properties": {
            "date": {
              "description": "The date of the adjustment",
              "type": "string",
              "x-go-name": "Date"
            },
            "remark": {
              "x-go-name": "Remark",
              "description": "The remarks of the adjustment",
              "type": "string"
            },
            "amount": {
              "format": "double",
              "type": "number",
              "x-go-name": "Amount",
              "description": "The adjustment amount"
            }
          },
          "required": [
            "amount",
            "date",
            "remark"
          ],
          "type": "object",
          "x-go-name": "InvoiceAdjustment",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models"
        },
        "invoiceMeta": {
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "The invoice's meta info",
          "properties": {
            "taxRate": {
              "x-go-name": "TaxRate",
              "description": "The tax rate of the invoice",
              "format": "double",
              "type": "number"
            },
            "dateDue": {
              "description": "The due date of the invoice",
              "type": "string",
              "x-go-name": "DateDue"
            },
            "dateFrom": {
              "description": "The start date of the invoice",
              "type": "string",
              "x-go-name": "DateFrom"
            },
            "dateIssued": {
              "description": "The issue date of the invoice",
              "type": "string",
              "x-go-name": "DateIssued"
            },
            "dateTo": {
              "type": "string",
              "x-go-name": "DateTo",
              "description": "The end date of the invoice"
            },
            "id": {
              "swagger_ref": "#/components/schemas/ObjectId"
            }
          },
          "required": [
            "dateDue",
            "dateFrom",
            "dateIssued",
            "dateTo",
            "id",
            "taxRate"
          ],
          "type": "object",
          "x-go-name": "InvoiceMeta"
        },
        "invoiceCustomer": {
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "A customer's information relating to the invoice",
          "properties": {
            "address2": {
              "description": "The address 2 of the customer.",
              "type": "string",
              "x-go-name": "Address2"
            },
            "firstName": {
              "description": "The first name of the customer.",
              "type": "string",
              "x-go-name": "FirstName"
            },
            "fullName": {
              "description": "The full name of the customer.",
              "type": "string",
              "x-go-name": "FullName"
            },
            "msisdn": {
              "description": "The MSISDN of the customer.",
              "type": "string",
              "x-go-name": "Msisdn"
            },
            "accountID": {
              "x-go-name": "AccountID",
              "description": "The account id of the customer.",
              "type": "string"
            },
            "address1": {
              "description": "The address 1 of the customer.",
              "type": "string",
              "x-go-name": "Address1"
            }
          },
          "required": [
            "accountID",
            "address1",
            "address2",
            "firstName",
            "fullName",
            "msisdn"
          ],
          "type": "object",
          "x-go-name": "InvoiceCustomer"
        },
        "invoiceSummary": {
          "required": [
            "total"
          ],
          "type": "object",
          "x-go-name": "InvoiceSummary",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "The invoice's summary",
          "properties": {
            "total": {
              "swagger_ref": "#/components/schemas/invoiceSummaryTotal"
            }
          }
        },
        "invoiceSummaryTotal": {
          "type": "object",
          "x-go-name": "InvoiceSummaryTotal",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/bf/api-src/models",
          "description": "The invoice's summary total",
          "properties": {
            "amount": {
              "x-go-name": "Amount",
              "description": "The total amount payable",
              "format": "double",
              "type": "number"
            },
            "taxed": {
              "format": "double",
              "type": "number",
              "x-go-name": "Taxed",
              "description": "The tax included"
            }
          },
          "required": [
            "amount",
            "taxed"
          ]
        }
      }
    },
    "info": {
      "description": "Documentation of the 5G BF API.",
      "title": "5G BF API",
      "version": "1.0.0"
    },
    "openapi": "3.0.1",
    "paths": {
      "/v1/customer-invoices/{msisdn}": {
        "get": {
          "operationId": "getCustomerInvoices",
          "parameters": [
            {
              "x-go-name": "Msisdn",
              "description": "The MSISDN of the customer",
              "in": "path",
              "name": "msisdn",
              "required": true,
              "schema": {
                "x-go-name": "Msisdn",
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "querystart",
              "required": true,
              "schema": {
                "format": "int32",
                "type": "integer",
                "x-go-name": "QueryStart"
              },
              "x-go-name": "QueryStart",
              "description": "The start of the usage month in YYYYMM"
            },
            {
              "in": "query",
              "name": "queryend",
              "required": true,
              "schema": {
                "type": "integer",
                "x-go-name": "QueryEnd",
                "format": "int32"
              },
              "x-go-name": "QueryEnd",
              "description": "The end of the usage month in YYYYMM"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/invoice"
                    },
                    "type": "array"
                  }
                }
              },
              "description": ""
            }
          },
          "tags": [
            "customer-invoices"
          ],
          "description": "Get customer's invoices by using a range of usage month"
        }
      }
    },
    "servers": [
      {
        "url": "http://a3b7ede2b2a114c6dbbca7ffbc33fe27-1254863686.ap-southeast-1.elb.amazonaws.com"
      }
    ],
    "tags": null
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebd9"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/v1/customer-invoices/{msisdn}",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357944"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357944"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebdc"
  },
  "swaggerSpec": null,
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebdb"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357947"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357947"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebde"
  },
  "swaggerSpec": {
    "tags": null,
    "components": {
      "schemas": {
        "model.CartInfo": {
          "type": "object",
          "properties": {
            "product_code": {
              "type": "string"
            },
            "quantity": {
              "type": "integer"
            }
          }
        },
        "model.StatusUpdateRequest": {
          "properties": {
            "cart_id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "app.CartResponse": {
          "type": "object",
          "properties": {
            "cart": {
              "properties": {},
              "type": "object"
            },
            "cart_items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "model.Cart": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string"
            },
            "created_at": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "status": {
              "type": "string"
            },
            "updated_at": {
              "type": "string"
            }
          }
        }
      }
    },
    "info": {
      "license": {},
      "title": "Circles Cart service",
      "version": "1.0",
      "contact": {},
      "description": "A system which manages and tracks the cart items"
    },
    "openapi": "3.0.1",
    "paths": {
      "/cart": {
        "get": {
          "parameters": [
            {
              "in": "path",
              "name": "status",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "active"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "swagger_ref": "#/components/schemas/model.Cart"
                    }
                  }
                }
              },
              "description": "OK"
            },
            "500": {
              "content": {}
            }
          },
          "summary": "GetCartByStatus gets the active cart details of the user",
          "description": "{success: true/false, result: {}}"
        },
        "post": {
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/model.Cart"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "CreateCart creates new cart for the user, deletes if any active cart exists.",
          "description": "{success: true/false, result: {}}"
        }
      },
      "/cart/status": {
        "put": {
          "description": "{success: true/false, result: {}}",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.StatusUpdateRequest"
                }
              }
            },
            "description": "status",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/app.CartResponse"
                  }
                }
              }
            },
            "400": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "Updates the status of the cart.",
          "x-codegen-request-body-name": "Body"
        }
      },
      "/cart_items/cart/{cart_id}": {
        "post": {
          "description": "{success: true/false, result: {}}",
          "parameters": [
            {
              "description": "cart id",
              "in": "path",
              "name": "cartId",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "swagger_ref": "#/components/schemas/model.CartInfo"
                }
              }
            },
            "description": "array of items",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/app.CartResponse"
                  }
                }
              },
              "description": "OK"
            },
            "400": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "summary": "CreateCart creates new cart for the user, deletes if any active cart exists.",
          "x-codegen-request-body-name": "RequestBody"
        }
      }
    },
    "servers": [
      {
        "url": "http://localhost:3000{{.BasePath}}"
      }
    ]
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebdd"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/cart",
      "method": "GET"
    },
    {
      "endptRegex": "/cart",
      "method": "POST"
    },
    {
      "endptRegex": "/cart/status",
      "method": "PATCH"
    },
    {
      "endptRegex": "/cart_items/cart/{cart_id}",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357948"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357948"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebe0"
  },
  "swaggerSpec": {
    "servers": [
      {
        "url": "https://http://localhost/tmf-api/usageConsumption/v4"
      }
    ],
    "tags": [
      {
        "name": "queryUsageConsumption"
      },
      {
        "name": "notification listeners (client side)"
      },
      {
        "name": "events subscription"
      }
    ],
    "components": {
      "schemas": {
        "BalanceActionRef": {
          "type": "object",
          "description": "link to the resource that holds balance-related request information",
          "properties": {
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        },
        "PartyAccountRef": {
          "description": "PartyAccount reference. A party account is an arrangement that a party has with an enterprise that provides products to the party.",
          "properties": {
            "description": {
              "description": "Detailed description of the party account",
              "type": "string"
            },
            "href": {
              "description": "Reference of the party account",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "name": {
              "description": "Name of the party account",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "id": {
              "description": "Unique identifier of the party account",
              "type": "string"
            },
            "status": {
              "description": "The condition of the account, such as due, paid, in arrears.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        "QueryUsageConsumptionStateChangeEventPayload": {
          "description": "The event data structure",
          "properties": {
            "queryUsageConsumption": {
              "swagger_ref": "#/components/schemas/QueryUsageConsumption"
            }
          },
          "type": "object"
        },
        "UsageConsumption": {
          "description": "An usage consumption enables to know at a given point the balances and the consumption counters related to various buckets (SMS, Voice, Data for example). It could be calculated for a device identified by a public key (msisdn number for a mobile device for example or PSTN or VOIP number for a fix device), for a subscribed offer or option or for an user.",
          "properties": {
            "href": {
              "format": "uri",
              "type": "string",
              "description": "Hyperlink reference"
            },
            "service": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/ServiceRef"
              }
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "state": {
              "swagger_ref": "#/components/schemas/TaskStateType"
            },
            "name": {
              "description": "Usage consumption name",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "logicalResource": {
              "items": {
                "swagger_ref": "#/components/schemas/UsageConsumptionLogicalResourceRef"
              },
              "type": "array"
            },
            "product": {
              "items": {
                "swagger_ref": "#/components/schemas/UsageConsumptionProductRef"
              },
              "type": "array"
            },
            "bucketRefOrValue": {
              "items": {
                "swagger_ref": "#/components/schemas/BucketRefOrValue"
              },
              "type": "array",
              "description": "Bucket(s) included in the offer or option subscribed."
            },
            "validPeriod": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "description": {
              "description": "Free short text describing the usage consumption content",
              "type": "string"
            },
            "lastUpdate": {
              "description": "Date when the status was last changed",
              "format": "date-time",
              "type": "string"
            },
            "relatedParty": {
              "description": "Reference and role of the related parties for which the usage consumption is requested",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              },
              "type": "array"
            },
            "creationDate": {
              "type": "string",
              "description": "Date and time of the request creation",
              "format": "date-time"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "partyAccount": {
              "description": "A reference to the account that owns the bucket",
              "items": {
                "swagger_ref": "#/components/schemas/PartyAccountRef"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "RelatedParty": {
          "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
          "properties": {
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "href": {
              "type": "string",
              "description": "Hyperlink reference",
              "format": "uri"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "role": {
              "description": "Role played by the related party",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            }
          },
          "required": [
            "@referredType",
            "id"
          ],
          "type": "object"
        },
        "QueryUsageConsumption_Create": {
          "description": "An QueryUsageConsumption allows to manage the calculation request of an usage consumption\nSkipped properties: id,href,usageConsumption",
          "properties": {
            "queryUsageConsumptionDate": {
              "format": "date-time",
              "type": "string",
              "description": "Date when the query was submitted"
            },
            "relatedParty": {
              "description": "Reference and role of the related parties for which the usage consumption is requested",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              },
              "type": "array"
            },
            "searchCriteria": {
              "swagger_ref": "#/components/schemas/UsageConsumption"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "partyAccount": {
              "items": {
                "swagger_ref": "#/components/schemas/PartyAccountRef"
              },
              "type": "array",
              "description": "A reference to the account that owns the bucket"
            }
          },
          "required": [
            "searchCriteria"
          ],
          "type": "object"
        },
        "Entity": {
          "description": "Base entity schema for use in TMForum Open-APIs",
          "properties": {
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "UsageConsumptionLogicalResourceRef": {
          "description": "reference to the LogicalResource eg MSISDN",
          "properties": {
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "consumptionSummary": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/ConsumptionSummary"
              }
            },
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "type": "object"
        },
        "BucketRelationship": {
          "properties": {
            "bucketRefOrValue": {
              "swagger_ref": "#/components/schemas/BucketRefOrValue"
            },
            "relationshipType": {
              "description": "Type of the bucket relationship, such as [isAggregated] if the bucket is a part of other or [aggregator] is the bucket holds others",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            }
          },
          "required": [
            "bucketRefOrValue",
            "relationshipType"
          ],
          "type": "object",
          "description": "Linked bucket to the one instantiate, such as [isAggregated] if the bucket is a part of other or [aggregator] is the bucket holds others "
        },
        "QueryUsageConsumptionCreateEventPayload": {
          "description": "The event data structure",
          "properties": {
            "queryUsageConsumption": {
              "swagger_ref": "#/components/schemas/QueryUsageConsumption"
            }
          },
          "type": "object"
        },
        "EventSubscription": {
          "required": [
            "callback",
            "id"
          ],
          "type": "object",
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
          "properties": {
            "query": {
              "type": "string",
              "description": "additional data to be passed"
            },
            "callback": {
              "type": "string",
              "description": "The callback being registered."
            },
            "id": {
              "description": "Id of the listener",
              "type": "string"
            }
          }
        },
        "QueryUsageConsumptionDeleteEvent": {
          "description": "The notification data structure",
          "properties": {
            "event": {
              "swagger_ref": "#/components/schemas/QueryUsageConsumptionDeleteEventPayload"
            },
            "eventId": {
              "type": "string",
              "description": "The identifier of the notification."
            },
            "eventTime": {
              "type": "string",
              "description": "Time of the event occurrence.",
              "format": "date-time"
            },
            "priority": {
              "type": "string",
              "description": "A priority."
            },
            "description": {
              "description": "An explnatory of the event.",
              "type": "string"
            },
            "timeOcurred": {
              "description": "The time the event occured.",
              "format": "date-time",
              "type": "string"
            },
            "title": {
              "type": "string",
              "description": "The title of the event."
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the event.",
              "type": "string"
            },
            "eventType": {
              "type": "string",
              "description": "The type of the notification."
            }
          },
          "type": "object"
        },
        "EventSubscriptionInput": {
          "properties": {
            "callback": {
              "type": "string",
              "description": "The callback being registered."
            },
            "query": {
              "description": "additional data to be passed",
              "type": "string"
            }
          },
          "required": [
            "callback"
          ],
          "type": "object",
          "description": "Sets the communication endpoint address the service instance must use to deliver notification information"
        },
        "UsageConsumptionProductRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "consumptionSummary": {
              "items": {
                "swagger_ref": "#/components/schemas/ConsumptionSummary"
              },
              "type": "array"
            },
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            }
          }
        },
        "QueryUsageConsumptionDeleteEventPayload": {
          "type": "object",
          "description": "The event data structure",
          "properties": {
            "queryUsageConsumption": {
              "swagger_ref": "#/components/schemas/QueryUsageConsumption"
            }
          }
        },
        "TimePeriod": {
          "type": "object",
          "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
          "properties": {
            "endDateTime": {
              "format": "date-time",
              "type": "string",
              "description": "End of the time period, using IETC-RFC-3339 format",
              "example": "1985-04-12T23:20:50.52Z"
            },
            "startDateTime": {
              "format": "date-time",
              "type": "string",
              "description": "Start of the time period, using IETC-RFC-3339 format",
              "example": "1985-04-12T23:20:50.52Z"
            }
          }
        },
        "TaskStateType": {
          "type": "string",
          "description": "Possible values for the state of a task",
          "enum": [
            "accepted",
            "terminatedWithError",
            "inProgress",
            "done"
          ]
        },
        "Addressable": {
          "description": "Base schema for adressable entities",
          "properties": {
            "href": {
              "type": "string",
              "description": "Hyperlink reference",
              "format": "uri"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ResourceRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            }
          }
        },
        "QueryUsageConsumptionCreateEvent": {
          "properties": {
            "timeOcurred": {
              "type": "string",
              "description": "The time the event occured.",
              "format": "date-time"
            },
            "correlationId": {
              "description": "The correlation id for this event.",
              "type": "string"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "description": {
              "description": "An explnatory of the event.",
              "type": "string"
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            },
            "eventTime": {
              "description": "Time of the event occurrence.",
              "format": "date-time",
              "type": "string"
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/QueryUsageConsumptionCreateEventPayload"
            },
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            }
          },
          "type": "object",
          "description": "The notification data structure"
        },
        "QueryUsageConsumption": {
          "description": "An QueryUsageConsumption allows to manage the calculation request of an usage consumption",
          "properties": {
            "searchCriteria": {
              "swagger_ref": "#/components/schemas/UsageConsumption"
            },
            "relatedParty": {
              "description": "Reference and role of the related parties for which the usage consumption is requested",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              },
              "type": "array"
            },
            "usageConsumption": {
              "description": "Report with current counters and balances",
              "items": {
                "swagger_ref": "#/components/schemas/UsageConsumption"
              },
              "type": "array"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "queryUsageConsumptionDate": {
              "type": "string",
              "description": "Date when the query was submitted",
              "format": "date-time"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class Extensible name"
            },
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "partyAccount": {
              "items": {
                "swagger_ref": "#/components/schemas/PartyAccountRef"
              },
              "type": "array",
              "description": "A reference to the account that owns the bucket"
            }
          },
          "type": "object"
        },
        "Extensible": {
          "properties": {
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            }
          },
          "type": "object",
          "description": "Base Extensible schema for use in TMForum Open-APIs"
        },
        "BucketRefOrValue": {
          "description": "A bucket (called UsageVolumProduct in the SID Model) represents and tracks a quantity of usage (remaining or consumed). It could be either a quantity or an amount in a currency. It can represent a fixed number of SMS,MMS, call minutes, quantity of data and so on",
          "properties": {
            "href": {
              "description": "A resource URI pointing to the resource in the OB that stores the detailed information for the bucket",
              "type": "string"
            },
            "product": {
              "items": {
                "swagger_ref": "#/components/schemas/UsageConsumptionProductRef"
              },
              "type": "array"
            },
            "usageType": {
              "description": "defines the type of the underlying Balance eg data,voice, any currency eg EUR, USD etc",
              "type": "string"
            },
            "relatedParty": {
              "type": "array",
              "description": "Used to provide information about any other entity with relation to the balance, for instance to define customer hierarchy for the balance (e.g.: customerId, userId, )",
              "items": {
                "swagger_ref": "#/components/schemas/RelatedParty"
              }
            },
            "validFor": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "bucketCounter": {
              "items": {
                "swagger_ref": "#/components/schemas/ConsumptionSummary"
              },
              "type": "array"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "remainingValueName": {
              "description": "Remaining amount in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example",
              "type": "string"
            },
            "reserveBalance": {
              "items": {
                "swagger_ref": "#/components/schemas/ReserveBalanceRef"
              },
              "type": "array"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "name": {
              "description": "Friendly name to identify the bucket",
              "type": "string"
            },
            "service": {
              "items": {
                "swagger_ref": "#/components/schemas/ServiceRef"
              },
              "type": "array"
            },
            "logicalResource": {
              "items": {
                "swagger_ref": "#/components/schemas/UsageConsumptionLogicalResourceRef"
              },
              "type": "array"
            },
            "remainingValue": {
              "swagger_ref": "#/components/schemas/Quantity"
            },
            "id": {
              "description": "Unique Identifier within the server for the bucket",
              "type": "string"
            },
            "isShared": {
              "description": "True if the bucket is shared between several devices or users",
              "type": "boolean"
            },
            "status": {
              "description": "status for the bucket. active, expired, suspended",
              "type": "string"
            },
            "bucketRelationship": {
              "type": "array",
              "items": {
                "swagger_ref": "#/components/schemas/BucketRelationship"
              }
            },
            "partyAccount": {
              "swagger_ref": "#/components/schemas/PartyAccountRef"
            },
            "description": {
              "description": "Text describing the contents of the balance managed by the bucket",
              "type": "string"
            },
            "reservedValue": {
              "swagger_ref": "#/components/schemas/Quantity"
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Error": {
          "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
          "properties": {
            "reason": {
              "description": "Explanation of the reason for the error which can be shown to a client user.",
              "type": "string"
            },
            "referenceError": {
              "description": "URI of documentation describing the error.",
              "format": "uri",
              "type": "string"
            },
            "status": {
              "description": "HTTP Error code extension",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class."
            },
            "@schemaLocation": {
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri",
              "type": "string"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class entity name.",
              "type": "string"
            },
            "code": {
              "description": "Application relevant detail, defined in the API or a common list.",
              "type": "string"
            },
            "message": {
              "description": "More details and corrective actions related to the error which can be shown to a client user.",
              "type": "string"
            }
          },
          "required": [
            "code",
            "reason"
          ],
          "type": "object"
        },
        "ServiceRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "description": "Service reference, for when Service is used by other entities",
          "properties": {
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            },
            "@baseType": {
              "type": "string",
              "description": "When sub-classing, this defines the super-class"
            },
            "@referredType": {
              "description": "The actual type of the target instance when needed for disambiguation.",
              "type": "string"
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            }
          }
        },
        "ReserveBalanceRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "description": "The ReserveBalance resource allows adjustments to be made to the original BalanceTopup eg increment the amount, alter the recharge periodicity",
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "name": {
              "description": "Name of the related entity.",
              "type": "string"
            }
          }
        },
        "ConsumptionSummary": {
          "description": "The consumption counters (called ConsumptionSummary in the SID model) detail for example the different kind of consumption done on the bucket.",
          "properties": {
            "level": {
              "description": "Counter level. The counter can be given globally for the bucket or detailed by user or by network product for example in case of shared bucket",
              "type": "string"
            },
            "consumptionPeriod": {
              "swagger_ref": "#/components/schemas/TimePeriod"
            },
            "user": {
              "swagger_ref": "#/components/schemas/RelatedParty"
            },
            "@schemaLocation": {
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships",
              "format": "uri"
            },
            "@type": {
              "type": "string",
              "description": "When sub-classing, this defines the sub-class Extensible name"
            },
            "valueName": {
              "description": "Value of the counter in a formatted string used for display needs for example",
              "type": "string"
            },
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "counterType": {
              "description": "Type of the consumption counter. We can give for example a counter of the used value for a bucket (counterType=used for example) or the value of the consumption done out of the bucket(s) (counterType=outOfBucket for example)",
              "type": "string"
            },
            "href": {
              "description": "Hyperlink reference",
              "format": "uri",
              "type": "string"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "value": {
              "swagger_ref": "#/components/schemas/Quantity"
            }
          },
          "type": "object"
        },
        "EntityRef": {
          "required": [
            "id"
          ],
          "type": "object",
          "description": "Entity reference schema to be use for all entityRef class.",
          "properties": {
            "@baseType": {
              "description": "When sub-classing, this defines the super-class",
              "type": "string"
            },
            "@referredType": {
              "type": "string",
              "description": "The actual type of the target instance when needed for disambiguation."
            },
            "@schemaLocation": {
              "format": "uri",
              "type": "string",
              "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
            },
            "@type": {
              "description": "When sub-classing, this defines the sub-class Extensible name",
              "type": "string"
            },
            "href": {
              "format": "uri",
              "type": "string",
              "description": "Hyperlink reference"
            },
            "id": {
              "description": "unique identifier",
              "type": "string"
            },
            "name": {
              "type": "string",
              "description": "Name of the related entity."
            }
          }
        },
        "Quantity": {
          "type": "object",
          "description": "An amount in a given unit",
          "properties": {
            "amount": {
              "default": 1,
              "description": "Numeric value in a given unit",
              "format": "float",
              "type": "number"
            },
            "units": {
              "description": "Unit",
              "type": "string"
            }
          }
        },
        "QueryUsageConsumptionStateChangeEvent": {
          "description": "The notification data structure",
          "properties": {
            "title": {
              "description": "The title of the event.",
              "type": "string"
            },
            "correlationId": {
              "type": "string",
              "description": "The correlation id for this event."
            },
            "description": {
              "description": "An explnatory of the event.",
              "type": "string"
            },
            "eventTime": {
              "format": "date-time",
              "type": "string",
              "description": "Time of the event occurrence."
            },
            "eventId": {
              "description": "The identifier of the notification.",
              "type": "string"
            },
            "eventType": {
              "description": "The type of the notification.",
              "type": "string"
            },
            "timeOcurred": {
              "description": "The time the event occured.",
              "format": "date-time",
              "type": "string"
            },
            "event": {
              "swagger_ref": "#/components/schemas/QueryUsageConsumptionStateChangeEventPayload"
            },
            "priority": {
              "description": "A priority.",
              "type": "string"
            },
            "domain": {
              "type": "string",
              "description": "The domain of the event."
            }
          },
          "type": "object"
        }
      }
    },
    "info": {
      "version": "4.0.0",
      "description": "## TMF API Reference: TMF677 - Usage Consumption\n\n### Release: 20.5 - December 2020\n\nThis API covers the consumption follow up function providing ongoing information about usages related to any subscribed communication products (voice, data, TV,…) without having to wait for the invoice production. This information may concern usages charged on a bucket, supervised or not, and so the remaining credits on the bucket. It allows customers or users to be informed on usages done and remaining credits on the buckets that they consume under their purchased offers and options.\n\nThe usage consumption API allows you to view at a given point the balance and the consumption counters of the various buckets (SMS, Voice, Data for example) that one or more user(s) consume with each of their devices, according to the purchased offers and options.\n\n### Resources \n- **usageConsumptionReport** : a UsageConsumptionReport retrieves the data related to these balances and various consumption counters and calculated at the time of the request by the server.\n- **usageConsumptionReportRequest** : used to manage the calculation request of an usage consumption report.\n\n### Operations\nThe use of the both resources described in this document is conditioned by the capability of the server:\n- If the server could perform the calculation and so give the usage consumption report in synchronous mode according to the criteria given by the API requester, a GET operation with filter criteria on usageConsumptionReport resource could be used. We could accept to use a GET operation in this context because the server calculates the data given in the usage consumption report without necessarily storing it.\n- We must also anticipate the use case where the server could only give an asynchronous response to the calculation of a UsageConsumptionReport requested by the API consumer. In this case, a POST operation on usageConsumptionReportRequest could be sent by the API consumer asking the server that a usage consumption report calculation has to be performed. Then, the API requester could follow the process with a GET operation on this same resource retrieving the status of the request. The server could also use the notification pattern to inform the API consumer that the usage consumption report is available\n\nCopyright © TM Forum 2020. All Rights Reserved.",
      "title": "TMF677-Usage Consumption"
    },
    "openapi": "3.0.1",
    "paths": {
      "/listener/queryUsageConsumptionCreateEvent": {
        "post": {
          "summary": "Client listener for entity QueryUsageConsumptionCreateEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification QueryUsageConsumptionCreateEvent",
          "operationId": "listenToQueryUsageConsumptionCreateEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/QueryUsageConsumptionCreateEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/listener/queryUsageConsumptionDeleteEvent": {
        "post": {
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/QueryUsageConsumptionDeleteEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              },
              "description": "Notified"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "summary": "Client listener for entity QueryUsageConsumptionDeleteEvent",
          "tags": [
            "notification listeners (client side)"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification QueryUsageConsumptionDeleteEvent",
          "operationId": "listenToQueryUsageConsumptionDeleteEvent"
        }
      },
      "/listener/queryUsageConsumptionStateChangeEvent": {
        "post": {
          "x-codegen-request-body-name": "data",
          "description": "Example of a client listener for receiving the notification QueryUsageConsumptionStateChangeEvent",
          "operationId": "listenToQueryUsageConsumptionStateChangeEvent",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/QueryUsageConsumptionStateChangeEvent"
                }
              }
            },
            "description": "The event data",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Notified",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Client listener for entity QueryUsageConsumptionStateChangeEvent",
          "tags": [
            "notification listeners (client side)"
          ]
        }
      },
      "/queryUsageConsumption": {
        "get": {
          "parameters": [
            {
              "name": "fields",
              "schema": {
                "type": "string"
              },
              "description": "Comma-separated properties to be provided in response",
              "in": "query"
            },
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer"
              },
              "description": "Requested index for start of resources to be provided in response"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer"
              },
              "description": "Requested number of resources to be provided in response"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "items": {
                      "swagger_ref": "#/components/schemas/QueryUsageConsumption"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "Success",
              "headers": {
                "X-Result-Count": {
                  "description": "Actual number of items returned in the response body",
                  "schema": {
                    "type": "integer"
                  }
                },
                "X-Total-Count": {
                  "description": "Total number of items matching criteria",
                  "schema": {
                    "type": "integer"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "summary": "List or find QueryUsageConsumption objects",
          "tags": [
            "queryUsageConsumption"
          ],
          "description": "This operation list or find QueryUsageConsumption entities",
          "operationId": "listQueryUsageConsumption"
        },
        "post": {
          "x-codegen-request-body-name": "queryUsageConsumption",
          "description": "This operation creates a QueryUsageConsumption entity.",
          "operationId": "createQueryUsageConsumption",
          "requestBody": {
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/QueryUsageConsumption_Create"
                }
              }
            },
            "description": "The QueryUsageConsumption to be created",
            "required": true
          },
          "responses": {
            "201": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/QueryUsageConsumption"
                  }
                }
              },
              "description": "Created"
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Creates a QueryUsageConsumption",
          "tags": [
            "queryUsageConsumption"
          ]
        }
      },
      "/queryUsageConsumption/{id}": {
        "delete": {
          "description": "This operation deletes a QueryUsageConsumption entity.",
          "operationId": "deleteQueryUsageConsumption",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the QueryUsageConsumption"
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Deletes a QueryUsageConsumption",
          "tags": [
            "queryUsageConsumption"
          ]
        },
        "get": {
          "summary": "Retrieves a QueryUsageConsumption by ID",
          "tags": [
            "queryUsageConsumption"
          ],
          "description": "This operation retrieves a QueryUsageConsumption entity. Attribute selection is enabled for all first level attributes.",
          "operationId": "retrieveQueryUsageConsumption",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Identifier of the QueryUsageConsumption"
            },
            {
              "in": "query",
              "name": "fields",
              "schema": {
                "type": "string"
              },
              "description": "Comma-separated properties to provide in response"
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/QueryUsageConsumption"
                  }
                }
              },
              "description": "Success"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/hub": {
        "post": {
          "summary": "Register a listener",
          "tags": [
            "events subscription"
          ],
          "x-codegen-request-body-name": "data",
          "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
          "operationId": "registerListener",
          "requestBody": {
            "description": "Data containing the callback endpoint to deliver the information",
            "required": true,
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "swagger_ref": "#/components/schemas/EventSubscriptionInput"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Subscribed",
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/EventSubscription"
                  }
                }
              }
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad Request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method Not allowed"
            },
            "409": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Conflict"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          }
        }
      },
      "/hub/{id}": {
        "delete": {
          "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
          "operationId": "unregisterListener",
          "parameters": [
            {
              "schema": {
                "type": "string"
              },
              "description": "The id of the registered listener",
              "in": "path",
              "name": "id",
              "required": true
            }
          ],
          "responses": {
            "204": {
              "content": {},
              "description": "Deleted"
            },
            "400": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Bad request"
            },
            "401": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Unauthorized"
            },
            "403": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Forbidden"
            },
            "404": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Not Found"
            },
            "405": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Method not allowed"
            },
            "500": {
              "content": {
                "application/json;charset=utf-8": {
                  "schema": {
                    "swagger_ref": "#/components/schemas/Error"
                  }
                }
              },
              "description": "Internal Server Error"
            }
          },
          "summary": "Unregister a listener",
          "tags": [
            "events subscription"
          ]
        }
      }
    }
  },
  "version": "1.0.0",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebdf"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/listener/queryUsageConsumptionDeleteEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/listener/queryUsageConsumptionStateChangeEvent",
      "method": "POST"
    },
    {
      "endptRegex": "/queryUsageConsumption",
      "method": "GET"
    },
    {
      "endptRegex": "/queryUsageConsumption",
      "method": "POST"
    },
    {
      "endptRegex": "/queryUsageConsumption/{id}",
      "method": "GET"
    },
    {
      "endptRegex": "/queryUsageConsumption/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/hub",
      "method": "POST"
    },
    {
      "endptRegex": "/hub/{id}",
      "method": "DELETE"
    },
    {
      "endptRegex": "/listener/queryUsageConsumptionCreateEvent",
      "method": "POST"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357949"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357949"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebe2"
  },
  "swaggerSpec": {
    "paths": {
      "/v1/watchlistSubscriber/{subscriberId}": {
        "get": {
          "tags": [
            "watchlist-subscriber"
          ],
          "summary": "Get a subscriber's usage data from the global watch list",
          "description": "This endpoint returns the subscriber's total usage data for the month",
          "operationId": "GetWatchListSubscriber",
          "parameters": [
            {
              "name": "subscriberId",
              "in": "path",
              "description": "This is the subscriber msisdn that is being queried",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "SubscriberId"
              },
              "x-go-name": "SubscriberId"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            }
          }
        }
      },
      "/v1/watchlistSubscribers": {
        "get": {
          "x-codegen-request-body-name": "limit",
          "tags": [
            "watchlist-subscribers"
          ],
          "summary": "List the subscribers that are in the global watch list",
          "description": "By default it will list all current subscribers in watch list.\nThis is to cater for future feature that enables querying of subscribers that were in the watchlist",
          "operationId": "listWatchlistSubscribers",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int16"
                }
              }
            },
            "required": false,
            "description": "This limits the number of watch list subscribers returned"
          },
          "responses": {
            "200": {
              "content": {}
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "subscriber": {
          "required": [
            "msisdn",
            "totalUsageUnits"
          ],
          "type": "object",
          "properties": {
            "totalUsageUnits": {
              "x-go-name": "TotalUsageUnits",
              "type": "string",
              "description": "The total used units of the subscriber for the current period."
            },
            "msisdn": {
              "x-go-name": "Msisdn",
              "type": "string",
              "description": "The id of the subscriber."
            }
          },
          "description": "A Subscriber represents a user who owns a sim card\nIt is used to describe the subscriber and his/her total useage units for the current period",
          "x-go-name": "Subscriber",
          "x-go-package": "bitbucket.org/libertywireless/circles-ccs/abmf/api-src/models"
        }
      },
      "responses": {
        "getWatchListSubscriberResponse": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "getWatchListSubscribersResponse": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "openapi": "3.0.1",
    "info": {
      "title": "ABMF API",
      "description": "Documentation of the ABMF API.",
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "http://a07548ec3a85744d087afdbf71215a41-878421990.ap-southeast-1.elb.amazonaws.com"
      }
    ],
    "tags": null
  },
  "version": "2021/09/23",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebe1"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/v1/watchlistSubscriber/{subscriberId}",
      "method": "GET"
    },
    {
      "endptRegex": "/v1/watchlistSubscribers",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357952"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357952"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebe4"
  },
  "swaggerSpec": {
    "openapi": "3.0.1",
    "info": {
      "version": "1.0.0",
      "title": "Liberty VoIP",
      "description": "Documentation of the Liberty VoIP API.",
      "contact": {
        "email": "kelvin@circles.asia",
        "name": "Kelvin"
      }
    },
    "servers": [
      {
        "url": "https://psg-voicemail.circles.life/v1"
      }
    ],
    "tags": null,
    "paths": {
      "/{country}/{locale}/{tenant}/{service}/otp/{action}": {
        "get": {
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "tags": [
            "OTP"
          ],
          "summary": "Handles the API request for voice OTP list.",
          "operationId": "OTPGet",
          "parameters": [
            {
              "x-go-name": "Action",
              "name": "action",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Action"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country",
              "name": "country",
              "in": "path"
            },
            {
              "name": "locale",
              "in": "path",
              "required": true,
              "schema": {
                "x-go-name": "Locale",
                "type": "string"
              },
              "x-go-name": "Locale"
            },
            {
              "name": "tenant",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant"
            },
            {
              "name": "service",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service"
            },
            {
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Down"
              },
              "x-go-name": "Down",
              "name": "down"
            },
            {
              "in": "query",
              "schema": {
                "x-go-name": "Up",
                "type": "string"
              },
              "x-go-name": "Up",
              "name": "up"
            },
            {
              "x-go-name": "Search",
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Search"
              }
            }
          ]
        }
      },
      "/{country}/{locale}/{tenant}/{service}/otp/pin": {
        "post": {
          "operationId": "OTPPin",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country",
              "name": "country",
              "in": "path"
            },
            {
              "schema": {
                "x-go-name": "Locale",
                "type": "string"
              },
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path",
              "required": true
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "x-go-name": "Tenant",
                "type": "string"
              },
              "x-go-name": "Tenant",
              "name": "tenant"
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service",
              "name": "service"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "properties": {
                    "msisdn": {
                      "type": "string",
                      "x-go-name": "Msisdn"
                    },
                    "pin": {
                      "type": "string",
                      "x-go-name": "Pin"
                    },
                    "_id": {
                      "x-go-name": "UUID",
                      "type": "string"
                    },
                    "datetime": {
                      "type": "string",
                      "x-go-name": "Datetime"
                    },
                    "email": {
                      "type": "string",
                      "x-go-name": "Email"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "x-codegen-request-body-name": "Body",
          "tags": [
            "OTP"
          ],
          "summary": "Handles the API request for sending a voice OTP."
        }
      },
      "/{country}/{locale}/{tenant}/{service}/report/{type}": {
        "get": {
          "operationId": "listReport",
          "parameters": [
            {
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country",
              "name": "country"
            },
            {
              "name": "locale",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              },
              "x-go-name": "Locale"
            },
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant",
              "name": "tenant",
              "in": "path"
            },
            {
              "name": "service",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service"
            },
            {
              "name": "type",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Type"
              },
              "x-go-name": "Type"
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Search"
              },
              "x-go-name": "Search"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "tags": [
            "Report"
          ],
          "summary": "Handles the API request for reports."
        }
      },
      "/{country}/{locale}/{tenant}/{service}/account/email": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Handles the API request for emails.",
          "description": "email required. should handle peers separately if necessary",
          "operationId": "listEmail",
          "parameters": [
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country",
              "name": "country",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              },
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path"
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant",
              "name": "tenant"
            },
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service",
              "name": "service",
              "in": "path"
            },
            {
              "name": "down",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Down"
              },
              "x-go-name": "Down"
            },
            {
              "x-go-name": "Up",
              "name": "up",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Up"
              }
            },
            {
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Search"
              },
              "x-go-name": "Search",
              "name": "search"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        },
        "post": {
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "required": [
                    "email"
                  ],
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "x-go-name": "Tags"
                    },
                    "template": {
                      "x-go-name": "Template",
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "x-go-name": "Email"
                    },
                    "host": {
                      "x-go-name": "Host",
                      "type": "string"
                    },
                    "md5secret": {
                      "type": "string",
                      "x-go-name": "Md5Secret"
                    }
                  }
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "x-codegen-request-body-name": "Body",
          "tags": [
            "Account"
          ],
          "summary": "Adds the given email.",
          "operationId": "addEmail",
          "parameters": [
            {
              "name": "country",
              "in": "path",
              "required": true,
              "schema": {
                "x-go-name": "Country",
                "type": "string"
              },
              "x-go-name": "Country"
            },
            {
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              },
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Tenant",
              "name": "tenant",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              }
            },
            {
              "name": "service",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service"
            }
          ]
        },
        "delete": {
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "tags": [
            "Account"
          ],
          "summary": "Deletes the given email.",
          "operationId": "delEmail",
          "parameters": [
            {
              "x-go-name": "Email",
              "name": "email",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Email"
              }
            },
            {
              "name": "country",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country"
            },
            {
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              }
            },
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant",
              "name": "tenant",
              "in": "path"
            },
            {
              "x-go-name": "Service",
              "name": "service",
              "in": "path",
              "required": true,
              "schema": {
                "x-go-name": "Service",
                "type": "string"
              }
            }
          ]
        }
      },
      "/{country}/{locale}/{tenant}/{service}/audit/list": {
        "get": {
          "operationId": "listAudit",
          "parameters": [
            {
              "name": "country",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country"
            },
            {
              "name": "locale",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              },
              "x-go-name": "Locale"
            },
            {
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant",
              "name": "tenant",
              "in": "path",
              "required": true
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service",
              "name": "service"
            },
            {
              "name": "down",
              "in": "query",
              "schema": {
                "x-go-name": "Down",
                "type": "string"
              },
              "x-go-name": "Down"
            },
            {
              "schema": {
                "type": "string",
                "x-go-name": "Up"
              },
              "x-go-name": "Up",
              "name": "up",
              "in": "query"
            },
            {
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Search"
              },
              "x-go-name": "Search",
              "name": "search"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "tags": [
            "Audit"
          ]
        }
      },
      "/{country}/{locale}/{tenant}/{service}/{type}/id": {
        "get": {
          "tags": [
            "Media"
          ],
          "summary": "Gets the media of the given type and filename.",
          "operationId": "getMedia",
          "parameters": [
            {
              "schema": {
                "x-go-name": "Filename",
                "type": "string"
              },
              "x-go-name": "Filename",
              "name": "filename",
              "in": "query",
              "description": "Filename of media",
              "required": true
            },
            {
              "schema": {
                "x-go-name": "Country",
                "type": "string"
              },
              "x-go-name": "Country",
              "name": "country",
              "in": "path",
              "required": true
            },
            {
              "name": "locale",
              "in": "path",
              "required": true,
              "schema": {
                "x-go-name": "Locale",
                "type": "string"
              },
              "x-go-name": "Locale"
            },
            {
              "name": "tenant",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant"
            },
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service",
              "name": "service",
              "in": "path"
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Type"
              },
              "x-go-name": "Type",
              "name": "type"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/{country}/{locale}/{tenant}/{service}/{type}/list": {
        "get": {
          "operationId": "listMedia",
          "parameters": [
            {
              "schema": {
                "x-go-name": "Filename",
                "type": "string"
              },
              "x-go-name": "Filename",
              "name": "filename",
              "in": "query",
              "description": "Filename of media",
              "required": true
            },
            {
              "name": "country",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country"
            },
            {
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              },
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path"
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant",
              "name": "tenant"
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "x-go-name": "Service",
                "type": "string"
              },
              "x-go-name": "Service",
              "name": "service"
            },
            {
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Type"
              },
              "x-go-name": "Type",
              "name": "type"
            },
            {
              "name": "down",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Down"
              },
              "x-go-name": "Down"
            },
            {
              "name": "up",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Up"
              },
              "x-go-name": "Up"
            },
            {
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Search"
              },
              "x-go-name": "Search",
              "name": "search"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "tags": [
            "Media"
          ],
          "summary": "Lists all media."
        }
      },
      "/{country}/{locale}/{tenant}/{service}/cdr/list": {
        "get": {
          "summary": "Lists all CDR files.",
          "operationId": "listCDR",
          "parameters": [
            {
              "name": "country",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country"
            },
            {
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              }
            },
            {
              "name": "tenant",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant"
            },
            {
              "name": "service",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service"
            },
            {
              "schema": {
                "type": "string",
                "x-go-name": "Down"
              },
              "x-go-name": "Down",
              "name": "down",
              "in": "query"
            },
            {
              "name": "up",
              "in": "query",
              "schema": {
                "x-go-name": "Up",
                "type": "string"
              },
              "x-go-name": "Up"
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Search"
              },
              "x-go-name": "Search"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "tags": [
            "CDR"
          ]
        }
      },
      "/{country}/{locale}/{tenant}/{service}/csat/call": {
        "post": {
          "x-codegen-request-body-name": "Body",
          "tags": [
            "CSAT"
          ],
          "summary": "Handles the API request for initiating a call between the agent and customer.",
          "operationId": "CSATCall",
          "parameters": [
            {
              "name": "country",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              },
              "x-go-name": "Country"
            },
            {
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Locale"
              }
            },
            {
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              },
              "x-go-name": "Tenant",
              "name": "tenant",
              "in": "path",
              "required": true
            },
            {
              "name": "service",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Service"
              },
              "x-go-name": "Service"
            }
          ],
          "requestBody": {
            "content": {
              "*/*": {
                "schema": {
                  "properties": {
                    "_id": {
                      "type": "string",
                      "x-go-name": "UUID"
                    },
                    "datetime": {
                      "type": "string",
                      "format": "date-time",
                      "x-go-name": "Datetime"
                    },
                    "email": {
                      "type": "string",
                      "x-go-name": "Email"
                    },
                    "msisdn": {
                      "type": "string",
                      "x-go-name": "Msisdn"
                    },
                    "ticket": {
                      "type": "string",
                      "x-go-name": "Ticket"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          }
        }
      },
      "/{country}/{locale}/{tenant}/{service}/csat/list": {
        "get": {
          "operationId": "CSATlist",
          "parameters": [
            {
              "x-go-name": "Country",
              "name": "country",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Country"
              }
            },
            {
              "schema": {
                "x-go-name": "Locale",
                "type": "string"
              },
              "x-go-name": "Locale",
              "name": "locale",
              "in": "path",
              "required": true
            },
            {
              "x-go-name": "Tenant",
              "name": "tenant",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "x-go-name": "Tenant"
              }
            },
            {
              "name": "service",
              "in": "path",
              "required": true,
              "schema": {
                "x-go-name": "Service",
                "type": "string"
              },
              "x-go-name": "Service"
            },
            {
              "schema": {
                "type": "string",
                "x-go-name": "Down"
              },
              "x-go-name": "Down",
              "name": "down",
              "in": "query"
            },
            {
              "schema": {
                "type": "string",
                "x-go-name": "Up"
              },
              "x-go-name": "Up",
              "name": "up",
              "in": "query"
            },
            {
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string",
                "x-go-name": "Search"
              },
              "x-go-name": "Search"
            }
          ],
          "responses": {
            "200": {
              "content": {}
            },
            "500": {
              "content": {}
            }
          },
          "tags": [
            "CSAT"
          ],
          "summary": "Handles the API request for CSAT list."
        }
      }
    },
    "components": {
      "schemas": {
        "Media": {
          "properties": {
            "ani": {
              "type": "string",
              "x-go-name": "Ani"
            },
            "cid": {
              "type": "string",
              "x-go-name": "Cid"
            },
            "datetime": {
              "type": "string",
              "x-go-name": "Datetime"
            },
            "dnis": {
              "type": "string",
              "x-go-name": "Dnis"
            },
            "filename": {
              "type": "string",
              "x-go-name": "Filename"
            },
            "length": {
              "type": "integer",
              "format": "int32",
              "x-go-name": "Length"
            },
            "number": {
              "type": "string",
              "x-go-name": "Number"
            },
            "ticket": {
              "type": "string",
              "x-go-name": "Ticket"
            }
          },
          "description": "Media defines the media response back to the API caller",
          "x-go-package": "bitbucket.org/libertywireless/liberty-voip/api/v1",
          "type": "object"
        },
        "OTP": {
          "x-go-package": "bitbucket.org/libertywireless/liberty-voip/api/v1",
          "type": "object",
          "properties": {
            "msisdn": {
              "type": "string",
              "x-go-name": "Msisdn"
            },
            "pin": {
              "type": "string",
              "x-go-name": "Pin"
            },
            "status": {
              "type": "string",
              "x-go-name": "Status"
            },
            "_id": {
              "type": "string",
              "description": "index on datetime",
              "x-go-name": "UUID"
            },
            "dateiso": {
              "x-go-name": "Dateiso",
              "type": "string"
            },
            "debug": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "x-go-name": "Debug"
            },
            "email": {
              "type": "string",
              "x-go-name": "Email"
            }
          },
          "description": "OTP defines the otp response back to the API caller"
        },
        "Response": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "x-go-name": "Type"
            },
            "cdr": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-go-name": "Cdr"
            },
            "error": {
              "type": "string",
              "x-go-name": "Error"
            },
            "list": {
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "x-go-name": "List",
              "type": "array"
            },
            "media": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "x-go-name": "Media"
            },
            "message": {
              "x-go-name": "Message",
              "type": "string"
            },
            "otp": {
              "x-go-name": "Otp",
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "description": "Response defines the standard API response for all APIs in this service",
          "x-go-package": "bitbucket.org/libertywireless/liberty-voip/api/v1"
        },
        "Cdr": {
          "description": "Cdr describes the CDR as inserted into the mongo collection",
          "x-go-package": "bitbucket.org/libertywireless/liberty-voip/model",
          "type": "object",
          "properties": {
            "lastapp": {
              "type": "string",
              "description": "Last application if appropriate",
              "x-go-name": "Lastapp",
              "maxLength": 80,
              "minLength": 80
            },
            "uniqueid": {
              "type": "string",
              "description": "Unique Channel Identifier",
              "x-go-name": "Uniqueid",
              "maxLength": 32,
              "minLength": 32
            },
            "channel": {
              "minLength": 80,
              "type": "string",
              "description": "Channel used",
              "x-go-name": "Channel",
              "maxLength": 80
            },
            "disposition": {
              "type": "string",
              "description": "What happened to the call: ANSWERED, NO ANSWER, BUSY, FAILED",
              "x-go-name": "Disposition"
            },
            "dst": {
              "description": "Destination extension",
              "x-go-name": "Dst",
              "maxLength": 80,
              "minLength": 80,
              "type": "string"
            },
            "start": {
              "type": "string",
              "description": "Start of call (date/time)",
              "x-go-name": "Start"
            },
            "answer": {
              "type": "string",
              "description": "Answer of call (date/time)",
              "x-go-name": "Answer"
            },
            "billsec": {
              "format": "int32",
              "x-go-name": "Billsec",
              "type": "integer",
              "description": "Total time call is up, in seconds"
            },
            "accountcode": {
              "x-go-name": "Accountcode",
              "maxLength": 20,
              "minLength": 20,
              "type": "string",
              "description": "Account number to use"
            },
            "lastdata": {
              "maxLength": 80,
              "minLength": 80,
              "type": "string",
              "description": "Last application data",
              "x-go-name": "Lastdata"
            },
            "dcontext": {
              "x-go-name": "Dcontext",
              "maxLength": 80,
              "minLength": 80,
              "type": "string",
              "description": "Destination context"
            },
            "peeraccount": {
              "x-go-name": "Peeraccount",
              "type": "string",
              "description": "The account code of the Party B channel"
            },
            "userfield": {
              "type": "string",
              "description": "A user defined field set on the channels",
              "x-go-name": "Userfield"
            },
            "dstchannel": {
              "maxLength": 80,
              "minLength": 80,
              "type": "string",
              "description": "Destination channel if appropriate",
              "x-go-name": "Dstchannel"
            },
            "amaflags": {
              "type": "string",
              "description": "What flags to use: DOCUMENTATION, BILL, IGNORE etc.",
              "x-go-name": "Amaflags"
            },
            "linkedid": {
              "type": "string",
              "description": "A unique identifier that unites multiple CDR records",
              "x-go-name": "Linkedid"
            },
            "clid": {
              "description": "Caller*ID with text",
              "x-go-name": "Clid",
              "maxLength": 80,
              "minLength": 80,
              "type": "string"
            },
            "duration": {
              "type": "integer",
              "description": "Total time in system, in seconds",
              "format": "int32",
              "x-go-name": "Duration"
            },
            "sequence": {
              "format": "int32",
              "x-go-name": "Sequence",
              "type": "integer",
              "description": "A numeric value combined with uniqueid and linkedid, used to uniquely id a CDR record"
            },
            "src": {
              "description": "Caller*ID number",
              "x-go-name": "Src",
              "maxLength": 80,
              "minLength": 80,
              "type": "string"
            },
            "end": {
              "x-go-name": "End",
              "type": "string",
              "description": "End of call (date/time)"
            }
          }
        }
      },
      "responses": {
        "responseWrapper": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    }
  },
  "version": "2021/09/27",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebe3"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": [
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/csat/call",
      "method": "POST"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/csat/list",
      "method": "GET"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/otp/{action}",
      "method": "GET"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/report/{type}",
      "method": "GET"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/{type}/list",
      "method": "GET"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/account/email",
      "method": "GET"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/account/email",
      "method": "POST"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/account/email",
      "method": "DELETE"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/audit/list",
      "method": "GET"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/cdr/list",
      "method": "GET"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/otp/pin",
      "method": "POST"
    },
    {
      "endptRegex": "/{country}/{locale}/{tenant}/{service}/{type}/id",
      "method": "GET"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357953"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357953"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebe6"
  },
  "swaggerSpec": null,
  "version": "2021/11/30",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebe5"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357955"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357955"
    }
  }
},{
  "_id": {
    "$oid": "6311594daa3a4a58c00cebe8"
  },
  "swaggerSpec": null,
  "version": "2021/12/20",
  "serviceRef": {
    "$oid": "6311594daa3a4a58c00cebe7"
  },
  "ownerRef": {
    "$oid": "63113b9c2644cc400660ac83"
  },
  "endpts": null,
  "createdAt": {
    "$date": {
      "$numberLong": "1662081357957"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1662081357957"
    }
  }
}]